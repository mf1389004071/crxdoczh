// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.sockets.tcp</code> API to send and receive data over the
// network using TCP connections. This API supersedes the TCP functionality
// previously found in the <code>chrome.socket</code> API.-->
// 使用 <code>chrome.sockets.tcp</code> API 使用 TCP
// 连接通过网络发送和接收数据。该 API 是对原先
// <code>chrome.socket</code> API 中 TCP 功能的增强。
namespace sockets.tcp {
  // <!--@The socket properties specified in the <code>create</code> or
  // <code>update</code> function. Each property is optional. If a property
  // value is not specified, a default value is used when calling
  // <code>create</code>, or the existing value if preserved when calling
  // <code>update</code>.-->
  // <code>create</code> 或 <code>update</code>
  // 函数中指定的套接字属性，每一个属性都是可选的。如果没有指定某个属性值，调用
  // <code>create</code> 时使用默认值，调用 <code>update</code>
  // 时使用原有的值。
  dictionary SocketProperties {
    // <!--@Flag indicating if the socket is left open when the event page of
    // the application is unloaded (see
    // <a href="http://developer.chrome.com/apps/app_lifecycle">Manage App
    // Lifecycle</a>). The default value is "false." When the application is
    // loaded, any sockets previously opened with persistent=true can be fetched
    // with <code>getSockets</code>.-->
    // 应用的事件页面卸载（参见<a href="app_lifecycle"
    // >管理应用的生命周期</a>）时是否使套接字保持打开状态，默认值为
    // <code>false</code>。应用载入时，之前使用 <code>persistent: true</code>
    // 打开的套接字可以通过 <code>getSockets</code> 获取。
    boolean? persistent;

    // <!--@An application-defined string associated with the socket.-->
    // 与套接字相关联的字符串，由应用定义。
    DOMString? name;

    // <!--@The size of the buffer used to receive data. The default value is 4096.-->
    // 用于接收数据的缓冲区大小，默认值为 4096。
    long? bufferSize;
  };

  // <!--@Result of <code>create</code> call.-->
  // <code>create</code> 调用的结果。
  dictionary CreateInfo {
    // <!--@The ID of the newly created socket. Note that socket IDs created from
    // this API are not compatible with socket IDs created from other APIs, such
    // as the deprecated <code>$(ref:socket)</code> API.-->
    // 新创建套接字的标识符。注意，该 API 中创建的套接字标识符和其他 API
    // 中创建的套接字标识符不兼容，例如弃用的 <code>$(ref:socket)</code> API。
    long socketId;
  };

  // <!--@Callback from the <code>create</code> method.-->
  // <code>create</code> 方法的回调函数。
  // |createInfo| : <!--@The result of the socket creation.-->
  // 套接字创建的结果。
  callback CreateCallback = void (CreateInfo createInfo);

  // <!--@Callback from the <code>connect</code> method.-->
  // <code>connect</code> 方法的回调函数。
  // |result| : <!--@The result code returned from the underlying network call.
  // A negative value indicates an error.-->
  // 底层网络调用返回的结果代码，负值表示错误。
  callback ConnectCallback = void (long result);

  // <!--@Callback from the <code>disconnect</code> method.-->
  // <code>disconnect</code> 方法的回调函数。
  callback DisconnectCallback = void ();

  // <!--@Result of the <code>send</code> method.-->
  // <code>send</code> 方法的结果。
  dictionary SendInfo {
    // <!--@The result code returned from the underlying network call.
    // A negative value indicates an error.-->
    // 底层网络调用返回的结果代码，负值表示错误。
    long resultCode;

    // <!--@The number of bytes sent (if result == 0)-->
    // 发送的字节数（如果 result == 0 的话）。
    long? bytesSent;
  };

  // <!--@Callback from the <code>send</code> method.-->
  // <code>send</code> 方法的回调函数。
  // |sendInfo| : <!--@Result of the <code>send</code> method.-->
  // <code>send</code> 方法的结果。
  callback SendCallback = void (SendInfo sendInfo);

  // <!--@Callback from the <code>close</code> method.-->
  // <code>close</code> 方法的回调函数。
  callback CloseCallback = void ();

  // <!--@Callback from the <code>update</code> method.-->
  // <code>update</code> 方法的回调函数。
  callback UpdateCallback = void ();

  // <!--@Callback from the <code>setPaused</code> method.-->
  // <code>setPaused</code> 方法的回调函数。
  callback SetPausedCallback = void ();

  // <!--@Callback from the <code>setKeepAliveCallback</code> method.-->
  // <code>setKeepAlive</code> 方法的回调函数。
  // |result| : <!--@The result code returned from the underlying network call.
  // A negative value indicates an error.-->
  // 底层网络调用返回的结果代码，负值表示错误。
  callback SetKeepAliveCallback = void (long result);

  // <!--@Callback from the <code>setNodeDelay</code> method.-->
  // <code>setNodeDelay</code> 方法的回调函数。
  // |result| : <!--@The result code returned from the underlying network call.
  // A negative value indicates an error.-->
  // 底层网络调用返回的结果代码，负值表示错误。
  callback SetNoDelayCallback = void (long result);

  // <!--@Result of the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的结果。
  dictionary SocketInfo {
    // <!--@The socket identifier.->
    // 套接字标识符。
    long socketId;

    // <!--@Flag indicating whether the socket is left open when the application is
    // suspended (see <code>SocketProperties.persistent</code>).-->
    // 应用关闭时（参见
    // <code>SocketProperties.persistent</code>）是否使套接字保持打开状态。
    boolean persistent;

    // <!--@Application-defined string associated with the socket.-->
    // 与套接字相关联的字符串，由应用定义。
    DOMString? name;

    // <!--@The size of the buffer used to receive data. If no buffer size has been
    // specified explictly, the value is not provided.-->
    // 用于接收数据的缓冲区大小。如果没有明确指定缓冲区大小，则不提供该属性的值。
    long? bufferSize;

    // <!--@Flag indicating whether a connected socket blocks its peer from sending
    // more data (see <code>setPaused</code>).-->
    // 表示连接的套接字是否阻止对方发送更多数据（请参见
    // <code>setPaused</code>）。
    boolean paused;

    // <!--@Flag indicating whether the socket is connected to a remote peer.-->
    // 表示套接字是否已经连接到远程计算机的标志。
    boolean connected;

    // <!--@If the underlying socket is connected, contains its local IPv4/6 address.-->
    // 如果下层套接字已连接，则包含它的本机 IPv4/6 地址。
    DOMString? localAddress;

    // <!--@If the underlying socket is connected, contains its local port.-->
    // 如果下层套接字已连接，则包含它的本机端口。
    long? localPort;

    // <!--@If the underlying socket is connected, contains the peer/ IPv4/6 address.-->
    // 如果下层套接字已连接，则包含它的远程 IPv4/6 地址。
    DOMString? peerAddress;

    // <!--@If the underlying socket is connected, contains the peer port.-->
    // 如果下层套接字已连接，则包含它的远程端口。
    long? peerPort;
  };

  // <!--@Callback from the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的回调函数。
  // |socketInfo| : <!--@Object containing the socket information.-->
  // 包含套接字信息的对象。
  callback GetInfoCallback = void (SocketInfo socketInfo);

  // <!--@Callback from the <code>getSockets</code> method.-->
  // <code>getSockets</code> 方法的回调函数。
  // |socketInfos| : <!--@Array of object containing socket information.-->
  // 包含套接字信息的对象数组。
  callback GetSocketsCallback = void (SocketInfo[] socketInfos);

  // <!--@Data from an <code>onReceive</code> event.-->
  // 来自 <code>onReceive</code> 事件的数据。
  dictionary ReceiveInfo {
    // <!--@The socket identifier.-->
    // 套接字标识符。
    long socketId;

    // <!--@The data received, with a maxium size of <code>bufferSize</code>.-->
    // 接收到的数据，最大大小为 <code>bufferSize</code>。
    ArrayBuffer data;
  };

  // <!--@Data from an <code>onReceiveError</code> event.-->
  // 来自 <code>onReceiveError</code> 事件的数据。
  dictionary ReceiveErrorInfo {
    // <!--@The socket identifier.-->
    // 套接字标识符。
    long socketId;

    // <!--@The result code returned from the underlying network call.-->
    // 底层网络调用返回的结果代码。
    long resultCode;
  };

  interface Functions {
    // <!--@Creates a TCP socket.-->
    // 创建 TCP 套接字。
    // |properties| : <!--@The socket properties (optional).-->
    // 套接字属性（可选）。
    // |callback| : <!--@Called when the socket has been created.-->
    // 套接字创建后调用。
    static void create(optional SocketProperties properties,
                       CreateCallback callback);

    // <!--@Updates the socket properties.-->
    // 更新套接字属性。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |properties| : <!--@The properties to update.-->
    // 要更新的属性。
    // |callback| : <!--@Called when the properties are updated.-->
    // 属性更新后调用。
    static void update(long socketId,
                       SocketProperties properties,
                       optional UpdateCallback callback);

    // <!--@Enables or disables the application from receiving messages from its
    // peer. The default value is "false". Pausing a socket is typically used
    // by an application to throttle data sent by its peer. When a socket is
    // paused, no <code>onReceive</code> event is raised. When a socket is
    // connected and un-paused, <code>onReceive</code> events are raised again
    // when messages are received.-->
    // 允许或阻止应用从远程计算机接收消息，默认值为
    // <code>false</code>。应用通常使用暂停套接字的方式限制远程计算机发送的数据。套接字暂停时不会产生
    // <code>onReceive</code>
    // 事件，套接字已连接并且取消暂停时，接收到消息后就会产生
    // <code>onReceive</code> 事件。
    static void setPaused(long socketId,
                          boolean paused,
                          optional SetPausedCallback callback);

    // <!--@Enables or disables the keep-alive functionality for a TCP connection.-->
    // 启用或禁用 TCP 连接保持活动状态的功能。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |enable| : <!--@If true, enable keep-alive functionality.-->
    // 如果为 true 的话启用保持活动状态的功能。
    // |delay| : <!--@Set the delay seconds between the last data packet received
    // and the first keepalive probe. Default is 0.-->
    // 设置接收到最后一个数据包以及第一次保持活动状态探测之间间隔的秒数，默认为
    // 0。
    // |callback| : <!--@Called when the setKeepAlive attempt is complete.-->
    // setKeepAlive 尝试完成后调用。
    static void setKeepAlive(long socketId,
                             boolean enable,
                             optional long delay,
                             SetKeepAliveCallback callback);

    // <!--@Sets or clears <code>TCP_NODELAY</code> for a TCP connection. Nagle's
    // algorithm will be disabled when <code>TCP_NODELAY</code> is set.-->
    // 设置 TCP 连接的 <code>TCP_NODELAY</code> 标志，设置 <code>TCP_NODELAY</code>
    // 标志后会禁用纳格算法。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |noDelay| : <!--@If true, disables Nagle's algorithm.-->
    // 如果为 true 的话则禁用纳格算法。
    // |callback| : <!--@Called when the setNoDelay attempt is complete.-->
    // setNoDelay 尝试完成后调用。
    static void setNoDelay(long socketId,
                           boolean noDelay,
                           SetNoDelayCallback callback);

    // <!--@Connects the socket to a remote machine. When the <code>connect</code>
    // operation completes successfully, <code>onReceive</code> events are
    // raised when data is received from the peer. If a network error occurs
    // while the runtime is receiving packets, a <code>onReceiveError</code>
    // event is raised, at which point no more <code>onReceive</code> event will
    // be raised for this socket until the <code>resume</code> method is called.-->
    // 将套接字连接到远程计算机。<code>connect</code>
    // 操作成功完成后，从对方接收到数据时就会产生 <code>onReceive</code>
    // 事件。如果运行时接收数据包时发生网络错误，则会产生
    // 事件 <code>onReceiveError</code>，并且从这时候开始不会再次产生
    // <code>onReceive</code> 事件，直到您调用 <code>resume</code> 方法。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |peerAddress| : <!--@The address of the remote machine. DNS name, IPv4 and
    //  IPv6 formats are supported.-->
    // 远程计算机的地址，支持 DNS 名称、IPv4 和 IPv6 格式的地址。
    // |peerPort| : <!--@The port of the remote machine.-->
    // 远程计算机的端口。
    // |callback| : <!--@Called when the connect attempt is complete.-->
    // 连接完成后调用。
    static void connect(long socketId,
                        DOMString peerAddress,
                        long peerPort,
                        ConnectCallback callback);

    // <!--@Disconnects the socket.-->
    // 断开套接字的连接。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the disconnect attempt is complete.-->
    // 连接断开后调用。
    static void disconnect(long socketId,
                           optional DisconnectCallback callback);

    // <!--@Sends data on the given TCP socket.-->
    // 在指定 TCP 套接字上发送数据。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |data| : <!--@The data to send.-->
    // 要发送的数据。
    // |callback| : <!--@Called when the <code>send</code> operation completes.-->
    // <code>send</code> 操作完成时调用。
    static void send(long socketId,
                     ArrayBuffer data,
                     SendCallback callback);

    // <!--@Closes the socket and releases the address/port the socket is bound to.
    // Each socket created should be closed after use. The socket id is no
    // no longer valid as soon at the function is called. However, the socket is
    // guaranteed to be closed only when the callback is invoked.-->
    // 关闭套接字，并释放套接字绑定的地址/端口。每一个创建的套接字在使用完成后都必须关闭。该函数调用后套接字标识符就失效，但是调用回调函数时才能保证套接字已经关闭。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the <code>close</code> operation completes.-->
    // <code>close</code> 操作完成时调用。
    static void close(long socketId,
                      optional CloseCallback callback);

    // <!--@Retrieves the state of the given socket.-->
    // 获取指定套接字的状态。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the socket state is available.-->
    // 套接字状态可用时调用。
    static void getInfo(long socketId,
                        GetInfoCallback callback);

    // <!--@Retrieves the list of currently opened sockets owned by the application.-->
    // 获取应用拥有的当前打开的套接字列表。
    // |callback| : <!--@Called when the list of sockets is available.-->
    // 套接字列表可用时调用。
    static void getSockets(GetSocketsCallback callback);
  };

  interface Events {
    // <!--@Event raised when data has been received for a given socket.-->
    // 套接字接收到数据时产生该事件。
    // |info| : <!--@The event data.-->
    // 事件数据。
    static void onReceive(ReceiveInfo info);

    // <!--@Event raised when a network error occured while the runtime was waiting
    // for data on the socket address and port. Once this event is raised, the
    // socket is set to <code>paused</code> and no more <code>onReceive</code>
    // events are raised for this socket.-->
    // 运行时等待该套接字地址和端口上的数据时如果发生网络错误则产生该事件。一旦产生该事件后，套接字将设置为
    // <code>paused</code>（暂停）状态，不再产生 <code>onReceive</code> 事件。
    // |info| : <!--@The event data.-->
    // 事件数据。
    static void onReceiveError(ReceiveErrorInfo info);
  };
};
