// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Note: Many of these functions and events are implemented by hand and should
// not elicit any code generation from the schema compiler. These items are
// marked "nocompile."

[
  {
    "namespace": "runtime",
//@    "description": "Use the <code>chrome.runtime</code> API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.",
    "description": "使用 <code>chrome.runtime</code> API 获取后台网页、返回清单文件详情、监听并响应应用或扩展程序生命周期内的事件，您还可以使用该 API 将相对路径的 URL 转换为完全限定的 URL。",
    "types": [
      {
        "id": "Port",
        "type": "object",
        "nocompile": true,
//@        "description": "An object which allows two way communication with other pages.",
        "description": "允许与其他页面双向通信的对象。",
        "properties": {
          "name": {"type": "string"},
          "disconnect": { "type": "function" },
          "onDisconnect": { "$ref": "events.Event" },
          "onMessage": { "$ref": "events.Event" },
          "postMessage": {"type": "function"},
          "sender": {
            "$ref": "MessageSender",
            "optional": true,
//@            "description": "This property will <b>only</b> be present on ports passed to onConnect/onConnectExternal listeners."
            "description": "<b>只有</b>当端口传递给 onConnect/onConnectExternal 监听器时才会存在该属性。"
          }
        },
        "additionalProperties": { "type": "any"}
      },
      {
        "id": "MessageSender",
        "type": "object",
        "nocompile": true,
//@        "description": "An object containing information about the script context that sent a message or request.",
        "description": "包含有关发送消息或请求的脚本上下文信息的对象。",
        "properties": {
//@          "tab": {"$ref": "tabs.Tab", "optional": true, "description": "The $(ref:tabs.Tab) which opened the connection, if any. This property will <strong>only</strong> be present when the connection was opened from a tab (including content scripts), and <strong>only</strong> if the receiver is an extension, not an app.", "extension_types": ["extension", "legacy_packaged_app"]},
          "tab": {"$ref": "tabs.Tab", "optional": true, "description": "打开连接的 $(ref:tabs.Tab)（标签页），如果有的话。<b>只有</b>当连接从标签页或内容脚本中打开，<b>并且</b>接收方是扩展程序而不是应用时才会存在这一属性。", "extension_types": ["extension", "legacy_packaged_app"]},
//@          "id": {"type": "string", "optional": true, "description": "The ID of the extension or app that opened the connection, if any."},
          "id": {"type": "string", "optional": true, "description": "打开连接的扩展程序或应用的标识符（如果有的话）。"},
//@          "url": {"type": "string", "optional": true, "description": "The URL of the page or frame that opened the connection, if any. This property will <strong>only</strong> be present when the connection was opened from a tab or content script."},
          "url": {"type": "string", "optional": true, "description": "打开连接的页面或框架 URL（如果有的话），<strong>只有</strong>当连接从标签页或内容脚本打开时才会存在这一属性。"},
//@          "tlsChannelId": {"type": "string", "optional": true, "description": "The TLS channel ID of the web page that opened the connection, if requested by the extension or app, and if available."}
          "tlsChannelId": {"type": "string", "optional": true, "description": "如果扩展程序或应用请求该属性并且可用，则为打开连接的网页的 TLS 通道标识符。"}
        }
      },
      {
        "id": "PlatformInfo",
        "type": "object",
//@        "description": "An object containing information about the current platform.",
        "description": "包含当前平台相关信息的对象。",
        "properties": {
          "os": {
            "type": "string",
//@                    "description": "The operating system chrome is running on.",
            "description": "当前运行 Chrome 浏览器的操作系统。",
            "enum": ["mac", "win", "android", "cros", "linux", "openbsd"]
          },
          "arch": {
            "type": "string",
            "enum": ["arm", "x86-32", "x86-64"],
//@                    "description": "The machine's processor architecture."
            "description": "计算机的处理器架构。"
          },
          "nacl_arch" : {
//@                    "description": "The native client architecture. This may be different from arch on some platforms.",
            "description": "Native Client 架构，在某些平台上可能和 arch 不同。",
            "type": "string",
            "enum": ["arm", "x86-32", "x86-64"]
          }
        }
      }
    ],
    "properties": {
      "lastError": {
        "type": "object",
        "optional": true,
//@        "description": "This will be defined during an API method callback if there was an error",
        "description": "如果发生错误，在 API 方法的回调函数执行的过程中将会定义该属性。",
        "properties": {
          "message": {
            "optional": true,
            "type": "string",
//@            "description": "Details about the error which occurred."
            "description": "有关发生错误的详情。"
          }
        }
      },
      "id": {
        "type": "string",
//@        "description": "The ID of the extension/app."
        "description": "扩展程序/应用的标识符。"
      }
    },
    "functions": [
      {
        "name": "getBackgroundPage",
        "type": "function",
//@        "description": "Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
        "description": "获取当前扩展程序/应用中正在运行的后台网页的 JavaScript window 对象。如果后台网页是事件页面，系统会确保在调用回调函数前它已经加载。如果没有后台网页，将会设置错误信息。",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "backgroundPage",
                // Note: Only optional because we don't support validation
                // for custom callbacks.
                "optional": true,
                "type": "object",
                "isInstanceOf": "Window",
                "additionalProperties": { "type": "any" },
//@                "description": "The JavaScript 'window' object for the background page."
                "description": "后台页面的 JavaScript window 对象。"
              }
            ]
          }
        ]
      },
      {
        "name": "getManifest",
//@        "description": "Returns details about the app or extension from the manifest. The object returned is a serialization of the full <a href=\"manifest\">manifest file</a>.",
        "description": "从清单文件中返回有关应用或扩展程序的详情，返回的对象是完整<a href=\"manifest\">清单文件</a>序列化的结果。",
        "type": "function",
        "nocompile": true,
        "parameters": [],
        "returns": {
          "type": "object",
          "properties": {},
          "additionalProperties": { "type": "any" },
//@          "description": "The manifest details."
          "description": "清单文件详情。"
        }
      },
      {
        "name": "getURL",
        "type": "function",
        "nocompile": true,
//@        "description": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
        "description": "将应用或扩展程序安装目录内的相对路径转换为完全限定的 URL。",
        "parameters": [
          {
            "type": "string",
            "name": "path",
//@            "description": "A path to a resource within an app/extension expressed relative to its install directory."
            "description": "指向应用或扩展程序内资源的路径，相对于它的安装目录。"
          }
        ],
        "returns": {
          "type": "string",
//@          "description": "The fully-qualified URL to the resource."
          "description": "指向资源的完全限定 URL。"
        }
      },
      {
        "name": "setUninstallURL",
        "type": "function",
//@        "description": "Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters.",
        "description": "设置卸载时访问的 URL，可以用来清理服务器上的数据、进行分析以及实现调查。最多不能超过 255 个字符。",
        "parameters": [
          {
            "type": "string",
            "name": "url",
            "maxLength": 255
          }
        ]
      },
      {
        "name": "reload",
//@        "description": "Reloads the app or extension.",
        "description": "重新加载应用或扩展程序。",
        "type": "function",
        "parameters": []
      },
      {
        "name": "requestUpdateCheck",
        "type": "function",
//@        "description": "Requests an update check for this app/extension.",
        "description": "为当前应用/扩展程序请求检查更新。",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "status",
                "type": "string",
                "enum": ["throttled", "no_update", "update_available"],
//@                "description": "Result of the update check."
                "description": "检查更新的结果。"
              },
              {
                "name": "details",
                "type": "object",
                "optional": true,
                "properties": {
                  "version": {
                    "type": "string",
//@                    "description": "The version of the available update."
                    "description": "可用更新的版本。"
                  }
                },
//@                "description": "If an update is available, this contains more information about the available update."
                "description": "如果更新可用的话，包含有关可用更新的更多信息。"
              }
            ]
          }
        ]
      },
      {
        "name": "restart",
//@        "description": "Restart the ChromeOS device when the app runs in kiosk mode. Otherwise, it's no-op.",
        "description": "如果应用在信息亭模式下运行，则重新启动 Chrome OS 设备，否则不进行任何操作。",
        "type": "function",
        "parameters": []
      },
      {
        "name": "connect",
        "type": "function",
        "nocompile": true,
//@        "description": "Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and <a href=\"manifest/externally_connectable\">web messaging</a>. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via <a href="/extensins/tabs#method-connect">tabs.connect</a>.",
        "description": "尝试连接到扩展程序/应用中的连接监听者（例如后台网页）或其他扩展程序/应用，该方法可用于内容脚本连接到所属扩展程序进程、应用/扩展程序之间的通信以及<a href=\"manifest/externally_connectable\">与网页通信</a>。注意，该方法不能连接到内容脚本中的监听者，扩展程序可以通过 <a href=\"/extensins/tabs#method-connect\">tabs.connect</a> 连接到嵌入至标签页中的内容脚本。",
        "parameters": [
//@          {"type": "string", "name": "extensionId", "optional": true, "description": "The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for <a href=\"manifest/externally_connectable\">web messaging</a>."},
          {"type": "string", "name": "extensionId", "optional": true, "description": "您需要连接的扩展程序或应用的标识符，如果省略，则会尝试连接到您自己的扩展程序。如果使用<a href=\"manifest/externally_connectable\">与网页通信</a>的方式从网页发送消息则必须指定该参数。"},
          {
            "type": "object",
            "name": "connectInfo",
            "properties": {
//@              "name": { "type": "string", "optional": true, "description": "Will be passed into onConnect for processes that are listening for the connection event." },
              "name": { "type": "string", "optional": true, "description": "将传递给监听连接事件的扩展程序进程的 onConnect 事件。" },
//@              "includeTlsChannelId": { "type": "boolean", "optional": true, "description": "Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event." }
              "includeTlsChannelId": { "type": "boolean", "optional": true, "description": "TLS 通道标识符是否会传递至 onConnectExternal 事件。" }
            },
            "optional": true
          }
        ],
        "returns": {
          "$ref": "Port",
//@          "description": "Port through which messages can be sent and received. The port's $(ref:runtime.Port onDisconnect) event is fired if the extension/app does not exist. "
          "description": "用来与扩展程序发送和接受消息的端口。如果扩展程序不存在则引发该端口的 $(ref:runtime.Port.onDisconnect) 事件。"
        }
      },
      {
        "name": "connectNative",
        "type": "function",
        "nocompile": true,
//@        "description": "Connects to a native application in the host machine.",
        "description": "连接到计算机上的原生应用程序。",
        "parameters": [
          {
            "type": "string",
            "name": "application",
//@            "description": "The name of the registered application to connect to."
            "description": "要连接的已注册应用程序名称。"
          }
        ],
        "returns": {
          "$ref": "Port",
//@          "description": "Port through which messages can be sent and received with the application"
          "description": "用来与应用程序发送和接收消息的端口。"
        }
      },
      {
        "name": "sendMessage",
        "type": "function",
        "nocompile": true,
        "allowAmbiguousOptionalArguments": true,
//@        "description": "Sends a single message to event listeners within your extension/app or a different extension/app. Similar to $(ref:runtime.connect) but only sends a single message, with an optional response. If sending to your extension, the $(ref:runtime.onMessage) event will be fired in each page, or $(ref:runtime.onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use <a href="/extensins/tabs#method-sendMessage">tabs.sendMessage</a>.",
        "description": "向您的扩展程序/应用或另一个扩展程序/应用中的其他事件监听者发送单个消息。与 $(ref:runtime.connect) 类似，但是只发送单个消息（可以有响应）。如果向您自己的扩展程序发送消息，每个网页中都会产生 $(ref:runtime.onMessage) 事件；如果发送至另一个扩展程序则产生 $(ref:runtime.onMessageExternal) 事件。注意，扩展程序不能使用该方法向内容脚本发送消息。要向内容脚本发送消息，请使用 <a href=\"/extensins/tabs#method-sendMessage\">tabs.sendMessage</a>。",
        "parameters": [
//@          {"type": "string", "name": "extensionId", "optional": true, "description": "The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for <a href=\"manifest/externally_connectable\">web messaging</a>."},
          {"type": "string", "name": "extensionId", "optional": true, "description": "您需要发送消息的扩展程序或应用的标识符，如果省略，消息就发送到您自己的扩展程序/应用。如果使用<a href=\"manifest/externally_connectable\">与网页通信</a>的方式从网页发送消息则必须指定该参数。"},
          { "type": "any", "name": "message" },
          {
            "type": "object",
            "name": "options",
            "properties": {
//@              "includeTlsChannelId": { "type": "boolean", "optional": true, "description": "Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event." }
              "includeTlsChannelId": { "type": "boolean", "optional": true, "description": "TLS 通道标识符是否会传递至 onMessageExternal 事件。" }
            },
            "optional": true
          },
          {
            "type": "function",
            "name": "responseCallback",
            "optional": true,
            "parameters": [
              {
                "name": "response",
                "type": "any",
//@                "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
                "description": "消息处理程序发送的 JSON 响应对象。如果连接到扩展程序的过程中发生错误，调用这一回调函数时将不传递参数，并将 $(ref:runtime.lastError) 设为错误消息。"
              }
            ]
          }
        ]
      },
      {
        "name": "sendNativeMessage",
        "type": "function",
        "nocompile": true,
//@        "description": "Send a single message to a native application.",
        "description": "向原生应用程序发送单个消息。",
        "parameters": [
          {
            "name": "application",
//@            "description": "The name of the native messaging host.",
            "description": "原生消息通信宿主的名称。",
            "type": "string"
          },
          {
            "name": "message",
//@            "description": "The message that will be passed to the native messaging host.",
            "description": "传递给原生消息通信宿主的消息。",
            "type": "object",
            "additionalProperties": {
              "type": "any"
            }
          },
          {
            "type": "function",
            "name": "responseCallback",
            "optional": true,
            "parameters": [
              {
                "name": "response",
                "type": "any",
//@                "description": "The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message.",
                "description": "原生消息宿主发送的响应消息。如果连接到原生消息宿主的过程中发生错误，调用回调函数时不会传递参数，同时 $(ref:runtime.lastError) 将设置为错误消息。",
                "additionalProperties": {
                  "type": "any"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "getPlatformInfo",
        "type": "function",
//@        "description": "Returns information about the current platform.",
        "description": "返回有关当前平台的信息。",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
//@            "description": "Called with results",
            "description": "调用时返回结果。",
            "parameters": [
              {
                "name": "platformInfo",
                "$ref": "PlatformInfo"
              }
            ]
          }
        ]
      },
      {
        "name": "getPackageDirectoryEntry",
        "type": "function",
//@        "description": "Returns a DirectoryEntry for the package directory.",
        "description": "返回包目录对应的 DirectoryEntry（目录项）。",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "directoryEntry",
                "type": "object",
                "additionalProperties": { "type": "any" },
                "isInstanceOf": "DirectoryEntry"
              }
            ]
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onStartup",
        "type": "function",
//@        "description": "Fired when a profile that has this extension installed first starts up. This event is not fired when an incognito profile is started, even if this extension is operating in 'split' incognito mode."
        "description": "当安装了该扩展程序的配置文件第一次启动时产生。即使扩展程序以“分离式”隐身模式运行，启动隐身配置文件时也不会产生该事件。"
      },
      {
        "name": "onInstalled",
        "type": "function",
//@        "description": "Fired when the extension is first installed, when the extension is updated to a new version, and when Chrome is updated to a new version.",
        "description": "当扩展程序第一次安装、更新至新版本或 Chrome 浏览器更新至新版本时产生。",
        "parameters": [
          {
            "type": "object",
            "name": "details",
            "properties": {
              "reason": {
                "type": "string",
                "enum": ["install", "update", "chrome_update", "shared_module_update"],
//@                "description": "The reason that this event is being dispatched."
                "description": "分发这一事件的原因。"
              },
              "previousVersion": {
                "type": "string",
                "optional": true,
//@                "description": "Indicates the previous version of the extension, which has just been updated. This is present only if 'reason' is 'update'."
                "description": "表示已更新扩展程序的前一个版本，只有当 reason 为 'update' 时才存在。"
              },
              "id": {
                "type": "string",
                "optional": true,
                "description": "Indicates the ID of the imported shared module extension which updated. This is present only if 'reason' is 'shared_module_update'."
              }
            }
          }
        ]
      },
      {
        "name": "onSuspend",
        "type": "function",
//@        "description": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. "
        "description": "在事件页面即将卸载前发送，这样扩展程序就有机会进行清理。注意，由于页面即将卸载，处理该事件时开始的任何异步操作都不能保证完成。如果卸载前事件页面产生了更多活动，将产生 onSuspendCanceled 事件，并且事件页面不会卸载。"
      },
      {
        "name": "onSuspendCanceled",
        "type": "function",
//@        "description": "Sent after onSuspend to indicate that the app won't be unloaded after all."
        "description": "在 onSuspend 之后发送，表示应用最终不会被卸载。"
      },
      {
        "name": "onUpdateAvailable",
        "type": "function",
//@        "description": "Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call chrome.runtime.reload(). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call chrome.runtime.reload() manually in response to this event the update will not get installed until the next time chrome itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if chrome.runtime.reload() is called in response to this event.",
        "description": "当更新可用时产生，然而由于应用当前还在运行，不能立即安装。如果您什么都不做，更新将在后台网页下一次卸载时安装。如果您希望快点安装，您可以显式调用 $(ref:runtime.reload)。如果您的扩展程序使用的是持久存在的后台网页，后台网页始终不会卸载，所以除非您响应该事件并调用 chrome.runtime.reload()，否则只有等到 Chrome 浏览器下一次重新启动时更新才会安装。如果没有处理程序监听该事件，并且您的扩展程序使用持久的后台网页，那么实际行为就和您调用 chrome.runtime.reload() 响应该事件一样。",
        "parameters": [
          {
            "type": "object",
            "name": "details",
            "properties": {
              "version": {
                "type": "string",
//@                "description": "The version number of the available update."
                "description": "可用更新的版本号。"
              }
            },
            "additionalProperties": { "type": "any" },
//@            "description": "The manifest details of the available update."
            "description": "可用更新的清单文件详情。"
          }
        ]
      },
      {
        // TODO(xiyuan): onBrowserUpdateAvailable is deprecated in favor of
        // onRestartRequired. We should remove it when we are sure it is unused.
        "name": "onBrowserUpdateAvailable",
        "type": "function",
//@        "description": "Fired when a Chrome update is available, but isn't installed immediately because a browser restart is required.",
        "description": "当 Chrome 浏览器的更新可用，但是由于需要浏览器重新启动而没有立即安装时产生。",
//@        "deprecated": "Please use $(ref:runtime.onRestartRequired).",
        "deprecated": "请使用 $(ref:runtime.onRestartRequired)。",
        "parameters": []
      },
      {
        "name": "onConnect",
        "type": "function",
        "nocompile": true,
        "options": {
          "unmanaged": true
        },
//@        "description": "Fired when a connection is made from either an extension process or a content script.",
        "description": "当连接从扩展程序进程或内容脚本中发起时产生。",
        "parameters": [
          {"$ref": "Port", "name": "port"}
        ]
      },
      {
        "name": "onConnectExternal",
        "type": "function",
        "nocompile": true,
        "options": {
          "unmanaged": true
        },
//@        "description": "Fired when a connection is made from another extension.",
        "description": "当连接从另一个扩展程序发起时产生。",
        "parameters": [
          {"$ref": "Port", "name": "port"}
        ]
      },
      {
        "name": "onMessage",
        "type": "function",
        "options": {
          "unmanaged": true
        },
        "nocompile": true,
//@        "description": "Fired when a message is sent from either an extension process or a content script.",
        "description": "当消息从扩展程序进程或者内容脚本中发送时产生。",
        "parameters": [
//@          {"name": "message", "type": "any", "optional": true, "description": "The message sent by the calling script."},
          {"name": "message", "type": "any", "optional": true, "description": "调用脚本发送的消息。"},
          {"name": "sender", "$ref": "MessageSender" },
//@          {"name": "sendResponse", "type": "function", "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)." }
          {"name": "sendResponse", "type": "function", "description": "当您产生响应时调用（最多一次）的函数，参数可以是任何可转化为 JSON 的对象。如果您在同一个文档中有一个以上的 <code>onMessage</code> 事件处理函数，只有其中一个可以发送响应。当事件处理函数返回时，该函数将失效，除非您在事件处理函数中返回 true，表示您希望通过异步方式发送响应（这样，与另一端之间的消息通道将会保持打开状态，直到调用了 <code>sendResponse</code>）。",
          "parameters": [
              {
                "name": "response",
                "type": "any",
//@                "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
                "description": "要发送的 JSON 响应对象。"
              }
            ]
          }
        ],
        "returns": {
          "type": "boolean",
          "optional": true,
//@          "description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
          "description": "如果您需要在事件监听器返回后再调用 <code>sendResponse</code> 请在事件监听器中返回 true。"
        }
      },
      {
        "name": "onMessageExternal",
        "type": "function",
        "options": {
          "unmanaged": true
        },
        "nocompile": true,
//@        "description": "Fired when a message is sent from another extension/app. Cannot be used in a content script.",
        "description": "当消息从另一个扩展程序/应用发送时产生。不能在内容脚本中使用。",
        "parameters": [
//@          {"name": "message", "type": "any", "optional": true, "description": "The message sent by the calling script."},
          {"name": "message", "type": "any", "optional": true, "description": "调用脚本发送的消息。"},
          {"name": "sender", "$ref": "MessageSender" },
//@          {"name": "sendResponse", "type": "function", "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)." }
          {"name": "sendResponse", "type": "function", "description": "当您产生响应时调用（最多一次）的函数，参数可以是任何可转化为 JSON 的对象。如果您在同一个文档中有一个以上的 <code>onMessage</code> 事件处理函数，只有其中一个可以发送响应。当事件处理函数返回时，该函数将失效，除非您在事件处理函数中返回 true，表示您希望通过异步方式发送响应（这样，与另一端之间的消息通道将会保持打开状态，直到调用了 <code>sendResponse</code>）。",
          "parameters": [
              {
                "name": "response",
                "type": "any",
//@                "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
                "description": "要发送的 JSON 响应对象。"
              }
            ]
          }
        ],
        "returns": {
          "type": "boolean",
          "optional": true,
//@          "description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
          "description": "如果您需要在事件监听器返回后再调用 <code>sendResponse</code> 请在事件监听器中返回 true。"
        }
      },
      {
        "name": "onRestartRequired",
        "type": "function",
//@        "description": "Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.",
        "description": "应用或者运行它的设备需要重新启动时产生，应用应该尽早关闭所有窗口，以便开始重新启动。如果应用什么都不做，超过 24 小时的宽限期后会强制重新启动。目前，只有 Chrome OS 的 Kiosk 应用会产生该事件。",
        "parameters": [
          {
            "type": "string",
            "name": "reason",
//@            "description": "The reason that the event is being dispatched. 'app_update' is used when the restart is needed because the application is updated to a newer version. 'os_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy.",
            "description": "产生该事件的原因。由于应用更新至新版本而需要重新启动时使用 'app_update'，由于浏览器/操作系统更新到新版本而需要重新启动时使用 'os_update'，当系统运行的时间超过企业策略中设置的允许值时使用 'periodic'。",
            "enum": ["app_update", "os_update", "periodic"]
          }
        ]
      }
    ]
  }
]
