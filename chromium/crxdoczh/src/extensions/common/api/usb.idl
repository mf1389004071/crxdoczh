// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.usb</code> API to interact with connected USB
// devices. This API provides access to USB operations from within the context
// of an app. Using this API, apps can function as drivers for hardware devices.-->
// 使用 <code>chrome.usb</code> API 与已连接的 USB 设备交互。该 API
// 提供了在应用的环境中进行 USB 操作的能力，通过该 API
// 应用可以作为硬件设备的驱动程序使用。
namespace usb {

  // <!--@Direction, Recipient, RequestType, and TransferType all map to their
  // namesakes within the USB specification.-->
  // Direction（方向）、Recipient（接收方）和 RequestType（请求类型）都与
  // USB 规范中的相应术语一致。
  enum Direction {in, out};
  enum Recipient {device, _interface, endpoint, other};
  enum RequestType {standard, class, vendor, reserved};
  enum TransferType {control, interrupt, isochronous, bulk};

  // <!--@For isochronous mode, SynchronizationType and UsageType map to their
  // namesakes within the USB specification.-->
  // 对于同步模式，SynchronizationType 和 UsageType
  // 与 USB 规范中的相应术语一致。
  enum SynchronizationType {asynchronous, adaptive, synchronous};
  enum UsageType {data, feedback, explicitFeedback};

  // <!--@Returned by |getDevices| to identify a connected USB device.-->
  // 由 <code>getDevices</code> 返回，表示已连接的 USB 设备。
  dictionary Device {
    // <!--@The id of the USB device. It remains unchanged until the device is
    // unplugged.-->
    // USB 设备的标识符，在设备拔出前不会更改。
    long device;
    long vendorId;
    long productId;
  };

  // <!--@Returned by |openDevice| to be used for USB communication.
  // Every time a device is opened, a new connection handle is created.
  //
  // A connection handle represents the underlying data structure that contains
  // all the data we need to communicate with a USB device, including the status
  // of interfaces, the pending transfers, the descriptors, and etc. A connectin
  // handle id is different from a USB device id.
  //
  // All connection handles can work together if the device allows it.
  // The connection handle will be automatically closed when the app is reloaded
  // or suspended.
  //
  // When a connection handle is closed, all the interfaces it claimed will be
  // released and all the transfers in progress will be canceled immediately.-->
  // 由 <code>openDevice</code> 返回，用于 USB
  // 通信。每一次打开设备时会创建一个新的连接句柄。
  //
  // 连接句柄表示底层数据结构，包含与
  // USB 设备通信所需的所有数据，包括接口状态、待定的传输、描述符等。连接句柄标识符与
  // USB 设备标识符不同。
  //
  // 如果设备允许的话，所有连接句柄可以同时工作。应用重新载入或关闭时连接句柄会自动关闭。
  //
  // 连接句柄关闭时，获取的所有接口都会被释放，并且正在进行的所有传输都会立即取消。
  dictionary ConnectionHandle {
    // <!--@The id of the USB connection handle.-->
    // USB 连接句柄的标识符。
    long handle;
    long vendorId;
    long productId;
  };

  dictionary EndpointDescriptor {
    long address;
    TransferType type;
    Direction direction;
    long maximumPacketSize;

    // <!--@Used for isochronous mode.-->
    // 用于同步模式。
    SynchronizationType? synchronization;
    UsageType? usage;

    // <!--@If this is an interrupt endpoint, this will be 1-255.-->
    // 如果是中断端点，这一值为 1～255。
    long? pollingInterval;
  };

  dictionary InterfaceDescriptor {
    long interfaceNumber;
    long alternateSetting;
    long interfaceClass;
    long interfaceSubclass;
    long interfaceProtocol;
    DOMString? description;
    EndpointDescriptor[] endpoints;
  };

  // <!--@ControlTransferInfo represents that parameters to a single USB control
  // transfer.-->
  // ControlTransferInfo 对象表示一次 USB 控制传输的参数。
  dictionary ControlTransferInfo {
    // <!--@The direction of this transfer.-->
    // 本次传输的方向。
    Direction direction;

    // <!--@The intended recipient for this transfer.-->
    // 本次传输的接收方。
    Recipient recipient;

    // <!--@The type of this request.-->
    // 本次请求的类型。
    RequestType requestType;

    long request;
    long value;
    long index;

    // <!--@If this transfer is an input transfer, then this field must be set to
    // indicate the expected data length. If this is an output transfer, then
    // this field is ignored.-->
    // 如果本次传输是输入传输，则该字段必须设置为预期的数据长度。如果本次传输是输出传输，将忽略该字段。
    long? length;

    // <!--@The data payload carried by this transfer. If this is an output transfer
    // then this field must be set.-->
    // 本次传输所携带的数据。如果是输出传输，则必须设置该字段。
    ArrayBuffer? data;
  };

  // <!--@GenericTransferInfo is used by both bulk and interrupt transfers to
  // specify the parameters of the transfer.-->
  // GenericTransferInfo 对象在大块传输与中断传输中用来指定传输参数。
  dictionary GenericTransferInfo {
    // <!--@The direction of this transfer.-->
    // 本次传输的方向。
    Direction direction;

    long endpoint;

    // <!--@If this is an input transfer then this field indicates the size of the
    // input buffer. If this is an output transfer then this field is ignored.-->
    // 如果本次传输是输入传输，则该字段表示输入缓冲区的大小。如果本次传输是输出传输，将忽略该字段。
    long? length;

    // <!--@If this is an output transfer then this field must be populated.
    // Otherwise, it will be ignored.-->
    // 如果是输出传输，则必须包含该字段，否则将忽略。
    ArrayBuffer? data;
  };

  // <!--@IsochronousTransferInfo describes a single multi-packet isochronous
  // transfer.-->
  // IsochronousTransferInfo 对象描述一次多包同步传输。
  dictionary IsochronousTransferInfo {
    // <!--@All of the normal transfer parameters are encapsulated in the
    // transferInfo parameters. Note that the data specified in this parameter
    // block is split along packetLength boundaries to form the individual
    // packets of the transfer.-->
    // 所有一般的传输参数都包含在此 transferInfo
    // 参数中。注意，该参数块中指定的数据将按照数据包长度（packetLength）分割，构成传输过程中的每一个数据包。
    GenericTransferInfo transferInfo;

    // <!--@The total number of packets in this transfer.-->
    // 本次传输中数据包的总数。
    long packets;

    // <!--@The length of each of the packets in this transfer.-->
    // 本次传输中每个数据包的长度。
    long packetLength;
  };

  dictionary TransferResultInfo {
    // <!--@A value of 0 indicates that the transfer was a success. Other values
    // indicate failure.-->
    // 0 表示传输成功，其他值表示失败。
    long? resultCode;

    // <!--@If the transfer was an input transfer then this field will contain all
    // of the input data requested.-->
    // 如果本次传输是输入传输，该字段将包含所有请求的输入数据。
    ArrayBuffer? data;
  };

  // <!--@Describes the properties of devices which are found via |getDevices|.-->
  // 描述由 <code>getDevices</code> 发现的设备的属性。
  dictionary EnumerateDevicesOptions {
    long vendorId;
    long productId;
  };
  
  // <!--@Describes the properties of devices which are found via |findDevices|.-->
  // 描述由 <code>getDevices</code> 发现的设备的属性。
  dictionary EnumerateDevicesAndRequestAccessOptions {
    long vendorId;
    long productId;
    // <!--@The interface id to request access against.
    // Only available on ChromeOS. It has no effect on other platforms.-->
    // 要请求访问的接口标识符，仅在 ChromeOS 上可用，在其他平台上无效。
    long? interfaceId;
  };

  callback VoidCallback = void ();
  callback GetDevicesCallback = void (Device[] devices);
  callback RequestAccessCallback = void (boolean sucess);
  callback OpenDeviceCallback = void (ConnectionHandle handle);
  callback FindDevicesCallback = void (ConnectionHandle[] handles);
  callback ListInterfacesCallback = void (InterfaceDescriptor[] descriptors);
  callback CloseDeviceCallback = void ();
  callback TransferCallback = void (TransferResultInfo info);
  callback ResetDeviceCallback = void(boolean result);

  interface Functions {
    // <!--@Lists USB devices specified by vendorId/productId/interfaceId tuple.-->
    // 列出制造商标识符/产品标识符/接口标识符指定的 USB 设备。
    // |options|: <!--@The properties to search for on target devices.-->
    // 在目标设备上搜索的属性。
    // |callback|: <!--@Invoked with a list of |Device|s on complete.-->
    // 完成时调用，传递 <code>Device</code> 对象列表。
    static void getDevices(EnumerateDevicesOptions options,
                           GetDevicesCallback callback);

    // <!--@This method is ChromeOS specific. Calling this method on other platforms
    // will fail.
    // Requests access from the permission broker to an OS claimed device if the
    // given interface on the device is not claimed.-->
    // 该方法仅用于 ChromeOS，在其他平台上调用该方法会失败。如果设备上的指定接口没有被占有，则请求访问操作系统占有的设备。
    //
    // |device|: <!--@The device to request access to.-->
    // 要请求访问的设备。
    // |interfaceId|: 
    static void requestAccess(Device device,
                              long interfaceId,
                              RequestAccessCallback callback);

    // <!--@Opens a USB device returned by |getDevices|.-->
    // 打开由 <code>getDevices</code> 返回的 USB 设备。
    // |device|: <!--@The device to open.-->
    // 要打开的 USB 设备。
    // |callback|: <!--@Invoked with the created ConnectionHandle on complete.-->
    // 完成时调用，传递创建的 ConnectionHandle（连接句柄）。
    static void openDevice(Device device, OpenDeviceCallback callback);

    // <!--@Finds USB devices specified by the vendorId/productId/interfaceId tuple
    // and, if permissions allow, opens them for use.-->
    // 寻找制造商标识符（venderId）/产品标识符（productId）/接口标识符（interfaceId）指定的
    // USB 设备，如果权限允许的话同时打开设备以便使用。
    //
    // <!--@On Chrome OS, you can specify the interfaceId. In that case the method
    // will request access from permission broker in the same way as in
    // |requestUsbAcess|.-->
    // 在 ChromeOS 上，您可以指定 interfaceId，在这种情况下，该方法使用与
    // <code>requestUsbAcccess</code> 一样的方式请求访问权限。
    //
    // <!--@If the access request is rejected, or the device is failed to be opened,
    // its connection handle will not be created or returned.-->
    // 如果访问请求被拒绝，或者无法打开设备，则不会创建或返回连接句柄。
    //
    // <!--@Calling this method is equivalent to calling |getDevices| followed by
    // a series of |requestAccess| (if it is on ChromeOs) and |openDevice|
    // calls, and returning all the successfully opened connection handles.-->
    // 调用该方法与调用 <code>getDevices</code> 并使用
    // <code>requestAccess</code>（如果是在 ChromeOS 上）和
    // <code>openDevice</code> 等价，同时返回所有成功打开的连接句柄。
    //
    // |options|: <!--@The properties to search for on target devices.-->
    // 用于搜索目标设备的属性。
    // |callback|: <!--@Invoked with the opened ConnectionHandle on complete.-->
    // 完成后调用，传递打开的 ConnectionHandle（连接句柄）。
    static void findDevices(EnumerateDevicesAndRequestAccessOptions options,
                            FindDevicesCallback callback);

    // <!--@Closes a connection handle. Invoking operations on a device after it
    // has been closed is a safe operation, but causes no action to be taken.-->
    // 关闭连接句柄。关闭设备后对其进行操作是安全的，而不会采取任何行动。
    // |handle|: <!--@The connection handle to close.-->
    // 要关闭的连接句柄。
    // |callback|: <!--@The callback to invoke once the device is closed.-->
    // 设备关闭后调用的回调函数。
    static void closeDevice(ConnectionHandle handle,
                            optional CloseDeviceCallback callback);

    // <!--@Lists all the interfaces on the USB device.-->
    // 列举 USB 设备上的所有接口。
    // |handle|: <!--@The device from which the interfaces should be listed.-->
    // 要列举接口的设备。
    // |callback|: <!--@The callback to invoke when the interfaces are enumerated.-->
    // 接口列举完成时调用的回调函数。
    static void listInterfaces(ConnectionHandle handle,
                               ListInterfacesCallback callback);

    // <!--@Claims an interface on the specified USB device.
    // Before you can transfer data with endpoints, you must claim their parent
    // interfaces. Only one connection handle on the same host can claim each
    // interface. If the interface is already claimed, this call will fail.
    //
    // You shall call releaseInterface when the interface is not needed anymore.-->
    // 在指定 USB
    // 设备上获取接口。在您可以与端点传输数据前，您必须获取它们所属的接口。同一主机上的每一个接口只有一个连接句柄可以占有。如果接口已经被占有，该调用会失败。
    //
    // 不再需要接口时您应该调用 releaseInterface。
    // |handle|: <!--@The device on which the interface is to be claimed.-->
    // 要获取接口的设备。
    // |interface|: <!--@The interface number to be claimed.-->
    // 要获取的接口编号。
    // |callback|: <!--@The callback to invoke once the interface is claimed.-->
    // 获取接口后调用的回调函数。
    static void claimInterface(ConnectionHandle handle, long interfaceNumber,
                               VoidCallback callback);

    // <!--@Releases a claim to an interface on the provided device.-->
    // 释放在提供的设备上获取的接口。
    // |handle|: <!--@The device on which the interface is to be released.-->
    // 要释放接口的设备。
    // |interface|: <!--@The interface number to be released.-->
    // 要释放的接口编号。
    // |callback|: <!--@The callback to invoke once the interface is released.-->
    // 接口释放后调用的回调函数。
    static void releaseInterface(ConnectionHandle handle, long interfaceNumber,
                                 VoidCallback callback);

    // <!--@Selects an alternate setting on a previously claimed interface on a
    // device.-->
    // 在之前获取的设备接口上选择替代的设置。
    // |handle|: <!--@The device on which the interface settings are to be set.-->
    // 要设置接口设置的设备。
    // |interface|: <!--@The interface number to be set.-->
    // 要设置的接口编号。
    // |alternateSetting|: <!--@The alternate setting to set.-->
    // 要设置的替代设置。
    // |callback|: <!--@The callback to invoke once the interface setting is set.-->
    // 接口设置后调用的回调函数。
    static void setInterfaceAlternateSetting(ConnectionHandle handle,
                                             long interfaceNumber,
                                             long alternateSetting,
                                             VoidCallback callback);

    // <!--@Performs a control transfer on the specified device. See the
    // ControlTransferInfo structure for the parameters required to make a
    // transfer.-->
    // 在指定设备上进行控制传输，有关进行传输所需要的参数，请参见
    // ControlTransferInfo 结构。
    //
    // <!--@Conceptually control transfer talks to the device itself. You do not need
    // to claim interface 0 to perform a control transfer.-->
    // 从概念上说，控制传输与设备本身通信，您不需要占有接口 0 来进行控制传输。
    //
    // |handle|: <!--@A connection handle to make the transfer on.-->
    // 进行传输的连接句柄。
    // |transferInfo|: <!--@The parameters to the transfer. See ControlTransferInfo.-->
    // 传输的参数，参见 ControlTransferInfo。
    // |callback|: <!--@Invoked once the transfer has completed.-->
    // 传输完成后调用。
    static void controlTransfer(ConnectionHandle handle,
                                ControlTransferInfo transferInfo,
                                TransferCallback callback);

    // <!--@Performs a bulk transfer on the specified device.-->
    // 在指定设备上进行大块传输。
    // |handle|: <!--@A connection handle to make the transfer on.-->
    // 进行传输的连接句柄。
    // |transferInfo|: <!--@The parameters to the transfer. See GenericTransferInfo.-->
    // 传输的参数，参见 GenericTransferInfo。
    // |callback|: <!--@Invoked once the transfer has completed.-->
    // 传输完成后调用。
    static void bulkTransfer(ConnectionHandle handle,
                             GenericTransferInfo transferInfo,
                             TransferCallback callback);

    // <!--@Performs an interrupt transfer on the specified device.-->
    // 在指定设备上进行中断传输。
    // |handle|: <!--@A connection handle to make the transfer on.-->
    // 进行传输的连接句柄。
    // |transferInfo|: <!--@The parameters to the transfer. See GenericTransferInfo.-->
    // 传输的参数，参见 GenericTransferInfo。
    // |callback|: <!--@Invoked once the transfer has completed.-->
    // 传输完成后调用。
    static void interruptTransfer(ConnectionHandle handle,
                                  GenericTransferInfo transferInfo,
                                  TransferCallback callback);

    // <!--@Performs an isochronous transfer on the specific device.-->
    // 在指定设备上进行同步传输。
    // |handle|: <!--@A connection handle to make the transfer on.-->
    // 进行传输的连接句柄。
    // |transferInfo|: <!--@The parameters to the transfer. See
    // IsochronousTransferInfo.-->
    // 传输的参数，参见 IsochronousTransferInfo。
    // |callback|: <!--@Invoked once the transfer has been completed.-->
    // 传输完成后调用。
    static void isochronousTransfer(ConnectionHandle handle,
                                    IsochronousTransferInfo transferInfo,
                                    TransferCallback callback);

    // <!--@Tries to reset the USB device and restores it to the previous status.
    // If the reset fails, the given connection handle will be closed and the 
    // USB device will appear to be disconnected then reconnected. 
    // In that case you must call |getDevices| or |findDevices| again to acquire
    // the device.-->
    // 尝试重置 USB
    // 设备，并恢复原来的状态。如果重置失败，指定的连接句柄将会关闭，USB
    // 设备就像断开连接后再重新连接一样。在这种情况下，您必须再次调用
    // <cdoe>getDevices</code> 或 <code>findDevices</code> 获取设备。
    //
    // |handle|: <!--@A connection handle to reset.-->
    // 要重置的连接句柄。
    // |callback|: <!--@Invoked once the device is reset with a boolean indicating
    // whether the reset is completed successfully.-->
    // 设备重置后调用，传递的布尔值表示重置是否成功完成。
    static void resetDevice(ConnectionHandle handle,
                            ResetDeviceCallback callback);
  };
};
