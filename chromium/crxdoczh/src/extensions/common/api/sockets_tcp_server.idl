// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.sockets.tcpServer</code> API to create server
// applications using TCP connections. This API supersedes the TCP functionality
// previously found in the <code>chrome.socket</code> API.-->
// 使用 <code>chrome.sockets.tcpServer</code> API 创建使用 TCP
// 连接的服务器应用。该 API 是对原先 <code>chrome.socket</code> API 中 TCP
// 功能的增强。
namespace sockets.tcpServer {
  // <!--@The socket properties specified in the <code>create</code> or
  // <code>update</code> function. Each property is optional. If a property
  // value is not specified, a default value is used when calling
  // <code>create</code>, or the existing value if preserved when calling
  // <code>update</code>.-->
  // 函数中指定的套接字属性，每一个属性都是可选的。如果没有指定某个属性值，调用
  // <code>create</code> 时使用默认值，调用 <code>update</code>
  // 时使用原有的值。
  dictionary SocketProperties {
    // <!--@Flag indicating if the socket remains open when the event page of the
    // application is unloaded (see
    // <a href="http://developer.chrome.com/apps/app_lifecycle.html">Manage App
    // Lifecycle</a>). The default value is "false." When the application is
    // loaded, any sockets previously opened with persistent=true can be fetched
    // with <code>getSockets</code>.-->
    // 应用的事件页面卸载（参见<a href="app_lifecycle.html"
    // >管理应用的生命周期</a>）时是否使套接字保持打开状态，默认值为
    // <code>false</code>。应用载入时，之前使用 <code>persistent: true</code>
    // 打开的套接字可以通过 <code>getSockets</code> 获取。
    boolean? persistent;

    // <!--@An application-defined string associated with the socket.-->
    // 与套接字相关联的字符串，由应用定义。
    DOMString? name;
  };

  // <!--@Result of <code>create</code> call.-->
  // <code>create</code> 调用的结果。
  dictionary CreateInfo {
    // <!--@The ID of the newly created server socket. Note that socket IDs created
    // from this API are not compatible with socket IDs created from other APIs,
    // such as the deprecated <code>$(ref:socket)</code> API.-->
    // 新创建的服务器套接字的标识符。注意，该 API
    // 中创建的套接字标识符和其他 API
    // 中创建的套接字标识符不兼容，例如弃用的 <code>$(ref:socket)</code> API。
    long socketId;
  };

  // <!--@Callback from the <code>create</code> method.-->
  // <code>create</code> 方法的回调函数。
  // |createInfo| : <!--@The result of the socket creation.-->
  // 套接字创建的结果。
  callback CreateCallback = void (CreateInfo createInfo);

  // <!--@Callback from the <code>listen</code> method.-->
  // <code>listen</code> 方法的回调函数。
  // |result| : <!--@The result code returned from the underlying network call.
  // A negative value indicates an error.-->
  // 底层网络调用返回的结果代码，负值表示错误。
  callback ListenCallback = void (long result);

  // <!--@Callback from the <code>disconnect</code> method.-->
  // <code>disconnect</code> 方法的回调函数。
  callback DisconnectCallback = void ();

  // <!--@Callback from the <code>close</code> method.-->
  // <code>close</code> 方法的回调函数。
  callback CloseCallback = void ();

  // <!--@Callback from the <code>update</code> method.-->
  // <code>update</code> 方法的回调函数。
  callback UpdateCallback = void ();

  // <!--@Callback from the <code>setPaused</code> method.-->
  // <code>setPaused</code> 方法的回调函数。
  callback SetPausedCallback = void ();

  // <!--@Result of the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的结果。
  dictionary SocketInfo {
    // <!--@The socket identifier.-->
    // 套接字标识符。
    long socketId;

    // <!--@Flag indicating if the socket remains open when the event page of the
    // application is unloaded (see <code>SocketProperties.persistent</code>).
    // The default value is "false".-->
    // 应用关闭时（参见
    // <code>SocketProperties.persistent</code>）是否使套接字保持打开状态。默认值为
    // <code>false</code>。
    boolean persistent;

    // <!--@Application-defined string associated with the socket.-->
    // 与套接字相关联的字符串，由应用定义。
    DOMString? name;

    // <!--@Flag indicating whether connection requests on a listening socket are
    // dispatched through the <code>onAccept</code> event or queued up in the
    // listen queue backlog.
    // See <code>setPaused</code>. The default value is "false".-->
    // 表示正在监听的套接字上的连接请求是通过 <code>onAccept</code>
    // 事件分发还是放入监听队列中的标志。请参见
    // <code>setPaused</code>。默认值为 <code>false</code>。
    boolean paused;

    // <!--@If the socket is listening, contains its local IPv4/6 address.-->
    // 如果套接字处于监听状态，包含它的本机 IPv4/6 地址。
    DOMString? localAddress;

    // <!--@If the socket is listening, contains its local port.-->
    // 如果套接字处于监听状态，包含它的本机端口。
    long? localPort;
  };

  // <!--@Callback from the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的回调函数。
  // |socketInfo| : <!--@Object containing the socket information.-->
  // 包含套接字信息的对象。
  callback GetInfoCallback = void (SocketInfo socketInfo);

  // <!--@Callback from the <code>getSockets</code> method.-->
  // <code>getSockets</code> 方法的回调函数。
  // |socketInfos| : <!--@Array of object containing socket information.-->
  // 包含套接字信息的对象数组。
  callback GetSocketsCallback = void (SocketInfo[] socketInfos);

  // <!--@Data from an <code>onAccept</code> event.-->
  // 来自 <code>onAccept</code> 事件的数据。
  dictionary AcceptInfo {
    // <!--@The server socket identifier.-->
    // 服务器的套接字标识符。
    long socketId;

    // <!--@The client socket identifier, i.e. the socket identifier of the newly
    // established connection. This socket identifier should be used only with
    // functions from the <code>chrome.sockets.tcp</code> namespace. Note the
    // client socket is initially paused and must be explictly un-paused by the
    // application to start receiving data.-->
    // 客户端的套接字标识符，即新建立的连接对应的套接字标识符，该套接字标识符只能在
    // <code>chrome.sockets.tcp</code>
    // 命名空间的函数中使用。注意，客户端套接字一开始处于暂停状态，应用必须显式取消暂停才能开始接收数据。
    long clientSocketId;
  };

  // <!--@Data from an <code>onAcceptError</code> event.-->
  // 来自 <code>onAcceptError</code> 事件的数据。
  dictionary AcceptErrorInfo {
    // <!--@The server socket identifier.-->
    // 服务器的套接字标识符。
    long socketId;

    // <!--@The result code returned from the underlying network call.-->
    // 底层网络调用返回的结果代码。
    long resultCode;
  };

  interface Functions {
    // <!--@Creates a TCP server socket.-->
    // 创建 TCP 服务器套接字。
    // |properties| : <!--@The socket properties (optional).-->
    // 套接字属性（可选）。
    // |callback| : <!--@Called when the socket has been created.-->
    // 套接字创建后调用。
    static void create(optional SocketProperties properties,
                       CreateCallback callback);

    // <!--@Updates the socket properties.-->
    // 更新套接字属性。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |properties| : <!--@The properties to update.-->
    // 要更新的属性。
    // |callback| : <!--@Called when the properties are updated.-->
    // 属性更新后调用。
    static void update(long socketId,
                       SocketProperties properties,
                       optional UpdateCallback callback);

    // <!--@Enables or disables a listening socket from accepting new connections.
    // When paused, a listening socket accepts new connections until its backlog
    // (see <code>listen</code> function) is full then refuses additional
    // connection requests. <code>onAccept</code> events are raised only when
    // the socket is un-paused.-->
    // 允许或阻止正在监听的套接字接受新的连接。处于暂停状态时，正在监听的套接字仍然会接受新的连接，直到挂起连接队列已满（参见
    // <code>listen</code>
    // 函数），接下来拒绝其他连接请求。只有套接字未暂停时才会产生
    // <code>onAccept</code> 事件。
    static void setPaused(long socketId,
                          boolean paused,
                          optional SetPausedCallback callback);

    // <!--@Listens for connections on the specified port and address.
    // If the port/address is in use, the callback indicates a failure.-->
    // 监听指定端口与地址上的连接。如果端口/地址已经在使用，回调函数会指示失败。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |address| : <!--@The address of the local machine.-->
    // 本地计算机的地址。
    // |port| : <!--@The port of the local machine.-->
    // 本地计算机的端口。
    // |backlog| : <!--@Length of the socket's listen queue. The default value
    // depends on the Operating System (SOMAXCONN), which ensures a reasonable
    // queue length for most applications.-->
    // 套接字监听队列的长度，默认值取决于操作系统（SOMAXCONN），确保对大部分应用程序来说都有合适的队列长度。
    // |callback| : <!--@Called when listen operation completes.-->
    // 监听操作完成时调用。
    static void listen(long socketId,
                       DOMString address,
                       long port,
                       optional long backlog,
                       ListenCallback callback);

    // <!--@Disconnects the listening socket, i.e. stops accepting new connections
    // and releases the address/port the socket is bound to. The socket
    // identifier remains valid, e.g. it can be used with <code>listen</code> to
    // accept connections on a new port and address.-->
    // 断开正在监听的套接字，即不再接受新的连接，并释放绑定至套接字的地址/端口。套接字标识符仍然有效，例如您可以继续使用
    // <code>listen</code> 在新的端口和地址上接受连接。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the disconnect attempt is complete.-->
    // 断开连接的尝试完成后调用。
    static void disconnect(long socketId,
                           optional DisconnectCallback callback);

    // <!--@Disconnects and destroys the socket. Each socket created should be
    // closed after use. The socket id is no longer valid as soon at the
    // function is called. However, the socket is guaranteed to be closed only
    // when the callback is invoked.-->
    // 断开连接并释放套接字。每一个创建的套接字在使用完成后都应该关闭。该函数调用后套接字标识符就失效，但是调用回调函数时才能保证套接字已经关闭。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the <code>close</code> operation completes.-->
    // <code>close</code> 操作完成后调用。
    static void close(long socketId,
                      optional CloseCallback callback);

    // <!--@Retrieves the state of the given socket.-->
    // 获取指定套接字的状态。
    // |socketId| : <!--@The socket identifier.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the socket state is available.-->
    // 套接字状态可用时调用。
    static void getInfo(long socketId,
                        GetInfoCallback callback);

    // <!--@Retrieves the list of currently opened sockets owned by the application.-->
    // 获取应用拥有的当前打开的套接字列表。
    // |callback| : <!--@Called when the list of sockets is available.-->
    // 套接字列表可用时调用。
    static void getSockets(GetSocketsCallback callback);
  };

  interface Events {
    // <!--@Event raised when a connection has been made to the server socket.-->
    // 连接到服务器套接字时产生。
    // |info| : <!--@The event data.-->
    // 事件数据。
    static void onAccept(AcceptInfo info);

    // <!--@Event raised when a network error occured while the runtime was waiting
    // for new connections on the socket address and port. Once this event is
    // raised, the socket is set to <code>paused</code> and no more
    // <code>onAccept</code> events are raised for this socket until the socket
    // is resumed.-->
    // 运行时在套接字地址和端口上等待新连接时如果发生网络错误则产生该事件。一旦产生了该事件，套接字将设置为暂停状态（<code>paused</code>），而且不会再产生
    // <code>onAccept</code> 事件，直到套接字恢复。
    // |info| : <!--@The event data.-->
    // 事件数据。
    static void onAcceptError(AcceptErrorInfo info);
  };
};
