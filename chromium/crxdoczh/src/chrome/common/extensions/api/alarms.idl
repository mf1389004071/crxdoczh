// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.alarms</code> API to schedule code to run
// periodically or at a specified time in the future.-->
// 使用 <code>chrome.alarms</code> API
// 安排代码周期性地或者在将来的指定时间运行。
namespace alarms {
  dictionary Alarm {
    // <!--@Name of this alarm.-->
    // 该定时器的名称。
    DOMString name;

    // <!--@Time at which this alarm was scheduled to fire, in milliseconds past the
    // epoch (e.g. <code>Date.now() + n</code>).  For performance reasons, the
    // alarm may have been delayed an arbitrary amount beyond this.-->
    // 该定时器计划的触发时间，以纪元以来所经过的毫秒数为单位（例如
    // <code>Date.now() + n</code>）。由于性能原因，定时器可能会延迟至该时间后的任意时间。
    double scheduledTime;

    // <!--@If not null, the alarm is a repeating alarm and will fire again in
    // <var>periodInMinutes</var> minutes.-->
    // 如果不是 null 的话，该定时器会重复触发，每隔 <var>periodInMinutes</var>
    // 分钟触发。
    double? periodInMinutes;
  };

  // TODO(mpcomplete): rename to CreateInfo when http://crbug.com/123073 is
  // fixed.
  dictionary AlarmCreateInfo {
    // <!--@Time at which the alarm should fire, in milliseconds past the epoch
    // (e.g. <code>Date.now() + n</code>).-->
    // 定时器应该触发的时刻，以纪元以来所经过的毫秒数为单位（例如
    // <code>Date.now() + n</code>）。
    double? when;

    // <!--@Length of time in minutes after which the <code>onAlarm</code> event
    // should fire.-->
    // 以分钟为单位的时间长度，在指定时间之后将产生 $(ref:alarms.onAlarm) 事件。
    //
    // <!-- TODO: need minimum=0 -->
    double? delayInMinutes;

    // <!--@If set, the onAlarm event should fire every <var>periodInMinutes</var>
    // minutes after the initial event specified by <var>when</var> or
    // <var>delayInMinutes</var>.  If not set, the alarm will only fire once.-->
    // 如果设置了该属性，定时器将在由 <var>when</var> 或者 <var>delayInMinutes</var>
    // 指定的初始时间后每隔 <var>periodInMinutes</var>
    // 分钟触发。如果没有设置，定时器只会触发一次。
    //
    // <!-- TODO: need minimum=0 -->
    double? periodInMinutes;
  };

  callback AlarmCallback = void (Alarm alarm);
  callback AlarmListCallback = void (Alarm[] alarms);
  callback ClearCallback = void (boolean wasCleared);

  interface Functions {
    // <!--@Creates an alarm.  Near the time(s) specified by <var>alarmInfo</var>,
    // the <code>onAlarm</code> event is fired. If there is another alarm with
    // the same name (or no name if none is specified), it will be cancelled and
    // replaced by this alarm.-->
    // 创建定时器，在 <var>alarmInfo</var> 指定的时间前后将产生 $(ref:alarms.onAlarm)
    // 事件。如果已经存在具有相同名称（或者如果没指定而没有名称）另一个定时器，它将会被取消，并由这一定时器取代。
    //
    // <!--@In order to reduce the load on the user's machine, Chrome limits alarms
    // to at most once every 1 minute but may delay them an arbitrary amount
    // more.  That is, setting <code>delayInMinutes</code> or
    // <code>periodInMinutes</code> to less than <code>1</code> will not be
    // honored and will cause a warning.  <code>when</code> can be set to less
    // than 1 minute after "now" without warning but won't actually cause the
    // alarm to fire for at least 1 minute.-->
    // 为了降低用户计算机的资源占用，Chrome 浏览器将定时器限制为最多每 1
    // 分钟一次，而且可能会推迟任意长度的时间。也就是说，将
    // <code>delayInMinutes</code> 或 <code>periodInMinutes</code>
    // 设置为小于 1
    // 的值不会被认可，并会导致警告，<code>when</code>
    // 可以设置为当前时间后小于1分钟的值，但是定时器至少在 1
    // 分钟内不会运行。
    //
    // <!--@To help you debug your app or extension, when you've loaded it unpacked,
    // there's no limit to how often the alarm can fire.-->
    // 为了帮助您调试您的应用或扩展程序，当您以未打包的形式加载时，不会限制定时器产生的频率。
    //
    // |name|: <!--@Optional name to identify this alarm. Defaults to the empty
    // string.-->
    // 标识该定时器的可选字符串，默认为空字符串。
    //
    // |alarmInfo|: <!--@Describes when the alarm should fire.  The initial time must
    // be specified by either <var>when</var> or <var>delayInMinutes</var> (but
    // not both).  If <var>periodInMinutes</var> is set, the alarm will repeat
    // every <var>periodInMinutes</var> minutes after the initial event.  If
    // neither <var>when</var> or <var>delayInMinutes</var> is set for a
    // repeating alarm, <var>periodInMinutes</var> is used as the default for
    // <var>delayInMinutes</var>.-->
    // 描述定时器触发的时刻，初始时刻必须由 <var>when</var> 或者
    // <var>delayInMinutes</var> 中的某一个（但不能同时）指定。如果设置了
    // <var>periodInMinutes</var>，定时器将在初始事件后每隔
    // <var>periodInMinutes</var> 分钟重复。如果重复定时器的 <var>when</var>
    // 或 <var>delayInMinutes</var> 都没有设置，<var>periodInMinutes</var>
    // 将作为 <var>delayInMinutes</var> 的默认值。
    static void create(optional DOMString name, AlarmCreateInfo alarmInfo);

    // <!--@Retrieves details about the specified alarm.-->
    // 获取指定定时器的有关详情。
    // |name|: <!--@The name of the alarm to get. Defaults to the empty string.-->
    // 要获取的定时器名称，默认为空字符串。
    static void get(optional DOMString name, AlarmCallback callback);

    // <!--@Gets an array of all the alarms.-->
    // 获取包含所有定时器的数组。
    static void getAll(AlarmListCallback callback);

    // <!--@Clears the alarm with the given name.-->
    // 清除指定名称的定时器。
    // |name|: <!--@The name of the alarm to clear. Defaults to the empty string.-->
    // 要清除的定时器名称，默认为空字符串。
    static void clear(optional DOMString name, optional ClearCallback callback);

    // <!--@Clears all alarms.-->
    // 清除所有定时器。
    static void clearAll(optional ClearCallback callback);
  };

  interface Events {
    // <!--@Fired when an alarm has elapsed. Useful for event pages.-->
    // 当定时器到达时间时产生，对于事件页面很有用。
    // |alarm|: <!--@The alarm that has elapsed.-->
    // 到达时间的定时器。
    static void onAlarm(Alarm alarm);
  };
};
