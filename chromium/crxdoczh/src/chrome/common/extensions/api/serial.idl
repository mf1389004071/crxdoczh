// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.serial</code> API to read from and write to a device
// connected to a serial port.-->
// 使用 <code>chrome.serial</code> API 读取和写入连接到串行端口的设备。
namespace serial {

  dictionary DeviceInfo {
    // <!--@The device's system path. This should be passed as the <code>path</code>
    // argument to <code>chrome.serial.connect</code> in order to connect to
    // this device.-->
    // 设备的系统路径，应该传递给 <code>chrome.serial.connect</code>
    // 的 <code>path</code> 参数，以便连接到该设备。
    DOMString path;
  };

  callback GetDevicesCallback = void (DeviceInfo[] ports);

  enum DataBits { seven, eight };
  enum ParityBit { no, odd, even };
  enum StopBits { one, two };

  dictionary ConnectionOptions {
    // <!--@Flag indicating whether or not the connection should be left open when
    // the application is suspended (see
    // <a href="http://developer.chrome.com/apps/app_lifecycle.html">Manage App
    // Lifecycle</a>). The default value is "false." When the application is
    // loaded, any serial connections previously opened with persistent=true
    // can be fetched with <code>getConnections</code>.-->
    // 应用关闭时连接是否应该保持打开状态（参见<a
    // href="app_lifecycle.html">Chrome 应用的生命周期</a>），默认值为
    // <code>false</code>。应用加载时，之前使用 <code>persistent: true</code>
    // 打开的串口连接可以通过 <code>getConnections</code> 获取。
    boolean? persistent;

    // <!--@An application-defined string to associate with the connection.-->
    // 与连接相关联的字符串，由应用定义。
    DOMString? name;

    // <!--@The size of the buffer used to receive data. The default value is 4096.-->
    // 用于接收数据的缓冲区大小，默认值为 4096。
    long? bufferSize;

    // <!--@The requested bitrate of the connection to be opened. For compatibility
    // with the widest range of hardware, this number should match one of
    // commonly-available bitrates, such as 110, 300, 1200, 2400, 4800, 9600,
    // 14400, 19200, 38400, 57600, 115200. There is no guarantee, of course,
    // that the device connected to the serial port will support the requested
    // bitrate, even if the port itself supports that bitrate. <code>9600</code>
    // will be passed by default.-->
    // 打开连接时请求的比特率。为了尽可能地与各种硬件兼容，该数值应该匹配常用的比特率，例如
    // 110、300、1200、2400、4800、9600、14400、19200、38400、57600、115200。当然，不能保证连接到串行端口的设备能支持请求的比特率，即使端口本身支持该比特率。默认为 <code>9600</code>。
    long? bitrate;

    // <!--@<code>"eight"</code> will be passed by default.-->
    // 默认为 <code>"eight"</code>。
    DataBits? dataBits;

    // <!--@<code>"no"</code> will be passed by default.-->
    // 默认为 <code>"no"</code>。
    ParityBit? parityBit;

    // <!--@<code>"one"</code> will be passed by default.-->
    // 默认为 <code>"one"</code>。
    StopBits? stopBits;

    // <!--@Flag indicating whether or not to enable RTS/CTS hardware flow control.
    // Defaults to false.-->
    // 是否启用 RTS/CTS 硬件流控制，默认为 false。
    boolean? ctsFlowControl;

    // <!--@The maximum amount of time (in milliseconds) to wait for new data before
    // raising an <code>onReceiveError</code> event with a "timeout" error.
    // If zero, receive timeout errors will not be raised for the connection.
    // Defaults to 0.-->
    // 产生 "timeout"（超时）错误的 <code>onReceiveError</code>
    // 事件前等待新数据的最长时间（以毫秒为单位）。如果为零，该连接不会产生接收超时错误。默认为
    // 0。
    long? receiveTimeout;

    // <!--@The maximum amount of time (in milliseconds) to wait for a
    // <code>send</code> operation to complete before calling the callback with
    // a "timeout" error. If zero, send timeout errors will not be triggered.
    // Defaults to 0.-->
    // 调用回调函数产生 "timeout"（超时）错误前等待
    // <code>send</code>（发送）操作完成的最长时间（以毫秒为单位）。如果为零，不会产生发送超时错误。默认为
    // 0。
    long? sendTimeout;
  };

  // <!--@Result of the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的结果。
  dictionary ConnectionInfo {
    // <!--@The id of the serial port connection.-->
    // 串行端口连接标识符。
    long connectionId;

    // <!--@Flag indicating whether the connection is blocked from firing onReceive
    // events.-->
    // 是否阻止连接产生 onReceive 事件。
    boolean paused;

    // <!--@See <code>ConnectionOptions.persistent</code>-->
    // 参见 <code>ConnectionOptions.persistent</code>。
    boolean persistent;

    // <!--@See <code>ConnectionOptions.name</code>-->
    // 参见 <code>ConnectionOptions.name</code>。
    DOMString name;

    // <!--@See <code>ConnectionOptions.bufferSize</code>-->
    // 参见 <code>ConnectionOptions.bufferSize</code>。
    long bufferSize;

    // <!--@See <code>ConnectionOptions.receiveTimeout</code>-->
    // 参见 <code>ConnectionOptions.receiveTimeout</code>。
    long receiveTimeout;

    // <!--@See <code>ConnectionOptions.sendTimeout</code>-->
    // 参见 <code>ConnectionOptions.sendTimeout</code>。
    long sendTimeout;

    // <!--@See <code>ConnectionOptions.bitrate</code>. This field may be omitted
    // or inaccurate if a non-standard bitrate is in use, or if an error
    // occurred while querying the underlying device.-->
    // 参见
    // <code>ConnectionOptions.bitrate</code>。如果使用了非标准的比特率或者查询下层设备时产生错误，该字段可能不精确或省略。
    long? bitrate;

    // <!--@See <code>ConnectionOptions.dataBits</code>. This field may be omitted
    // if an error occurred while querying the underlying device.-->
    // 参见 <code>ConnectionOptions.dataBits</code>，如果查询下层设备时产生错误，该字段可能会省略。
    DataBits? dataBits;

    // <!--@See <code>ConnectionOptions.parityBit</code>. This field may be omitted
    // if an error occurred while querying the underlying device.-->
    // 参见 <code>ConnectionOptions.parityBit</code>，如果查询下层设备时产生错误，该字段可能会省略。
    ParityBit? parityBit;

    // <!--@See <code>ConnectionOptions.stopBits</code>. This field may be omitted
    // if an error occurred while querying the underlying device.-->
    // 参见 <code>ConnectionOptions.stopBits</code>，如果查询下层设备时产生错误，该字段可能会省略。
    StopBits? stopBits;

    // <!--@See <code>ConnectionOptions.ctsFlowControl</code>. This field may be
    // omitted if an error occurred while querying the underlying device.-->
    // 参见 <code>ConnectionOptions.ctsFlowControl</code>，如果查询下层设备时产生错误，该字段可能会省略。
    boolean? ctsFlowControl;
  };

  // <!--@Callback from the <code>connect</code> method;-->
  // <code>connect</code> 方法的回调函数。
  callback ConnectCallback = void (ConnectionInfo connectionInfo);

  // <!--@Callback from the <code>update</code> method.-->
  // <code>update</code> 方法的回调函数。
  callback UpdateCallback = void (boolean result);

  // <!--@Callback from the <code>disconnect</code> method. Returns true if the
  // operation was successful.-->
  // <code>disconnect</code> 方法的回调函数，如果操作成功则返回 true。
  callback DisconnectCallback = void (boolean result);

  // <!--@Callback from the <code>setPaused</code> method.-->
  // <code>setPaused</code> 方法的回调函数。
  callback SetPausedCallback = void ();

  // <!--@Callback from the <code>getInfo</code> method.-->
  // <code>getInfo</code> 方法的回调函数。
  callback GetInfoCallback = void (ConnectionInfo connectionInfo);

  // <!--@Callback from the <code>getConnections</code> method.-->
  // <code>getConnections</code> 方法的回调函数。
  callback GetConnectionsCallback = void (ConnectionInfo[] connectionInfos);

  enum SendError {
    // <!--@The connection was disconnected.-->
    // 连接已断开。
    disconnected,

    // <!--@A send was already pending.-->
    // 发送操作正在进行。
    pending,

    // <!--@The send timed out.-->
    // 发送操作超时。
    timeout,

    // <!--@A system error occurred and the connection may be unrecoverable.-->
    // 发生系统错误，连接可能无法恢复。
    system_error
  };

  dictionary SendInfo {
    // <!--@The number of bytes sent.-->
    // 发送的字节数。
    long bytesSent;

    // <!--@An error code if an error occurred.-->
    // 如果发生错误则为错误代码。
    SendError? error;
  };

  callback SendCallback = void (SendInfo sendInfo);

  callback FlushCallback = void (boolean result);

  // <!--@The set of control signals which may be sent to a connected serial device
  // using <code>setControlSignals</code>. Note that support for these signals
  // is device-dependent.-->
  // 使用 <code>setControlSignals</code>
  // 向已连接的串行设备发送的控制信号。注意：对这些信号的支持与设备有关。
  dictionary HostControlSignals {
    // <!--@DTR (Data Terminal Ready).-->
    // DTR（数据终端就绪）。
    boolean? dtr;

    // <!--@RTS (Request To Send).-->
    // RTS（请求发送）。
    boolean? rts;
  };

  // <!--@The set of control signals which may be set by a connected serial device.
  // These can be queried using <code>getControlSignals</code>. Note that
  // support for these signals is device-dependent.-->
  // 已连接的串行设备可能设置的控制信号，可以使用
  // <code>getControlSignals</code> 查询。注意：对这些信号的支持与设备有关。
  dictionary DeviceControlSignals {
    // <!--@DCD (Data Carrier Detect) or RLSD (Receive Line Signal/ Detect).-->
    // DCD（数据载波检测）或 RLSD（接收线信号检出）。
    boolean dcd;

    // <!--@CTS (Clear To Send).-->
    // 清除发送。
    boolean cts;

    // <!--@RI (Ring Indicator).-->
    // 振铃指示。
    boolean ri;

    // <!--@DSR (Data Set Ready).-->
    // 数据装置就绪。
    boolean dsr;
  };

  // <!--@Returns a snapshot of current control signals.-->
  // 返回当前控制信号的快照。
  callback GetControlSignalsCallback = void (DeviceControlSignals signals);

  // <!--@Returns true if operation was successful.-->
  // 如果操作成功则返回 true。
  callback SetControlSignalsCallback = void (boolean result);

  // <!--@Data from an <code>onReceive</code> event.-->
  // 来自 <code>onReceive</code> 事件的数据。
  dictionary ReceiveInfo {
    // <!--@The connection identifier.-->
    // 连接标识符。
    long connectionId;

    // <!--@The data received.-->
    // 接收的数据。
    ArrayBuffer data;
  };

  enum ReceiveError {
    // <!--@The connection was disconnected.-->
    // 连接已断开。
    disconnected,

    // <!--@No data has been received for <code>receiveTimeout</code> milliseconds.-->
    // 经过 <code>receiveTimeout</code> 毫秒后仍然未接收到数据。
    timeout,

    // <!--@The device was most likely disconnected from the host.-->
    // 设备可能已经从主机断开。
    device_lost,

    // <!--@A system error occurred and the connection may be unrecoverable.-->
    // 发生系统错误，连接可能无法恢复。
    system_error
  };

  // <!--@Data from an <code>onReceiveError</code> event.-->
  // 来自 <code>onReceiveError</code> 事件的数据。
  dictionary ReceiveErrorInfo {
    // <!--@The connection identifier.-->
    // 连接标识符。
    long connectionId;

    // <!--@An error code indicating what went wrong.-->
    // 表示错误信息的错误代码。
    ReceiveError error;
  };

  interface Functions {
    // <!--@Returns information about available serial devices on the system.
    // The list is regenerated each time this method is called.-->
    // 返回系统中可用串行设备的有关信息，每次调用该方法时都会重新生成该列表。
    // |callback| : <!--@Called with the list of <code>DeviceInfo</code> objects.-->
    // 调用时传递 <code>DeviceInfo</code> 对象列表。
    static void getDevices(GetDevicesCallback callback);

    // <!--@Connects to a given serial port.-->
    // 连接到指定的串行端口。
    // |path| : <!--@The system path of the serial port to open.-->
    // 要打开的串行端口的系统路径。
    // |options| : <!--@Port configuration options.-->
    // 端口配置选项。
    // |callback| : <!--@Called when the connection has been opened.-->
    // 连接打开后调用。
    static void connect(DOMString path,
                        optional ConnectionOptions options,
                        ConnectCallback callback);

    // <!--@Update the option settings on an open serial port connection.-->
    // 更新打开的串行端口连接的选项设置。
    // |connectionId| : <!--@The id of the opened connection.-->
    // 打开的连接的标识符。
    // |options| : <!--@Port configuration options.-->
    // 端口配置选项。
    // |callback| : <!--@Called when the configuation has completed.-->
    // 配置完成后调用。
    static void update(long connectionId,
                       ConnectionOptions options,
                       UpdateCallback callback);

    // <!--@Disconnects from a serial port.-->
    // 断开串行端口连接。
    // |connectionId| : <!--@The id of the opened connection.-->
    // 打开的连接的标识符。
    // |callback| : <!--@Called when the connection has been closed.-->
    // 连接关闭后调用。
    static void disconnect(long connectionId, DisconnectCallback callback);

    // <!--@Pauses or unpauses an open connection.-->
    // 暂停打开的连接，或取消暂停。
    // |connectionId| : <!--@The id of the opened connection.-->
    // 打开的连接的标识符。
    // |paused| : <!--@Flag to indicate whether to pause or unpause.-->
    // 暂停还是取消暂停。
    // |callback| : <!--@Called when the connection has been successfully paused or
    //              unpaused.-->
    // 连接暂停或取消暂停成功后调用。
    static void setPaused(long connectionId,
                          boolean paused,
                          SetPausedCallback callback);

    // <!--@Retrieves the state of a given connection.-->
    // 获取指定连接的状态。
    // |connectionId| : <!--@The id of the opened connection.-->
    // 打开的连接的标识符。
    // |callback| : <!--@Called with connection state information when available.-->
    // 连接状态信息可用时调用。
    static void getInfo(long connectionId, GetInfoCallback callback);

    // <!--@Retrieves the list of currently opened serial port connections owned by
    // the application.-->
    // 获取当前应用拥有并打开的串行端口连接列表。
    // |callback| : <!--@Called with the list of connections when available.-->
    // 连接列表可用时调用。
    static void getConnections(GetConnectionsCallback callback);

    // <!--@Writes data to the given connection.-->
    // 向指定连接写入数据。
    // |connectionId| : <!--@The id of the connection.-->
    // 连接标识符。
    // |data| : <!--@The data to send.-->
    // 要发送的数据。
    // |callback| : <!--@Called when the operation has completed.-->
    // 操作完成时调用。
    static void send(long connectionId,
                     ArrayBuffer data,
                     SendCallback callback);

    // <!--@Flushes all bytes in the given connection's input and output buffers.-->
    // 清洗指定连接输入输出缓存中的所有内容。
    static void flush(long connectionId, FlushCallback callback);

    // <!--@Retrieves the state of control signals on a given connection.-->
    // 获取指定连接上控制信号的状态。
    // |connectionId| : <!--@The id of the connection.-->
    // 连接标识符。
    // |callback| : <!--@Called when the control signals are available.-->
    // 控制信号可用时调用。
    static void getControlSignals(long connectionId,
                                  GetControlSignalsCallback callback);

    // <!--@Sets the state of control signals on a given connection.-->
    // 设置指定连接上控制信号的状态。
    // |connectionId| : <!--@The id of the connection.-->
    // 连接标识符。
    // |signals| : <!--@The set of signal changes to send to the device.-->
    // 要向设备发送的信号变化。
    // |callback| : <!--@Called once the control signals have been set.-->
    // 控制信号设置后调用。
    static void setControlSignals(long connectionId,
                                  HostControlSignals signals,
                                  SetControlSignalsCallback callback);
  };

  interface Events {
    // <!--@Event raised when data has been read from the connection.-->
    // 数据从连接读取时产生该事件。
    // |info| : <!--@Event data.-->
    // 事件数据。
    static void onReceive(ReceiveInfo info);

    // <!--@Event raised when an error occurred while the runtime was waiting for
    // data on the serial port. Once this event is raised, the connection may be
    // set to <code>paused</code>. A <code>"timeout"</code> error does not pause
    // the connection.-->
    // 运行时等待串行端口上的数据时如果发生错误，则产生该事件。产生该事件后，连接状态将设置为
    // <code>paused</code>（暂停）。<code>"timeout"</code>（超时）错误不会暂停连接。
    static void onReceiveError(ReceiveErrorInfo info);
  };
};
