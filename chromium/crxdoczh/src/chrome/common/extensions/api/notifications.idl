// Copyright (c) 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.notifications</code> API to create rich notifications
// using templates and show these notifications to users in the system tray.-->
// 使用 <code>chrome.notifications</code> API
// 通过模板创建丰富通知，并在系统托盘中向用户显示这些通知。
namespace notifications {
  [noinline_doc] enum TemplateType {
    // icon, title, message, expandedMessage, up to two buttons
    basic,

    // icon, title, message, expandedMessage, image, up to two buttons
    image,

    // icon, title, message, items, up to two buttons
    list,

    // icon, title, message, progress, up to two buttons
    progress
  };

  enum PermissionLevel {
    // <!--@User has elected to show notifications from the app or extension.
    // This is the default at install time.-->
    // 用户允许为当前应用或扩展程序显示通知，在安装时这是默认的。
    granted,

    // <!--@User has elected not to show notifications from the app or extension.-->
    // 用户拒绝为当前应用或扩展程序显示通知。
    denied
  };

  dictionary NotificationItem {
    // <!--@Title of one item of a list notification.-->
    // 通知列表中某个项目的标题。
    DOMString title;

    // <!--@Additional details about this item.-->
    // 该项目的额外详情。
    DOMString message;
  };

  [nodoc] dictionary NotificationBitmap {
    long width;
    long height;
    ArrayBuffer? data;
  };

  dictionary NotificationButton {
    DOMString title;
    DOMString? iconUrl;
    [nodoc] NotificationBitmap? iconBitmap;
  };

  dictionary NotificationOptions {
    // <!--@Which type of notification to display.
    // <em>Required for $ref:notifications.create</em> method.-->
    // 要显示哪种类型的通知，<em>调用
    // $ref:notifications.create 方法时必须指定</em>。
    TemplateType? type;

    // <!--@Sender's avatar, app icon, or a thumbnail for image notifications.
    // <em>Required for $ref:notifications.create</em> method.-->
    // 发送方的图标、应用图标或图片通知的缩略图，<em>调用
    // $ref:notifications.create 方法时必须指定</em>。
    DOMString? iconUrl;
    [nodoc] NotificationBitmap? iconBitmap;

    // <!--@Title of the notification (e.g. sender name for email).
    // <em>Required for $ref:notifications.create</em> method.-->
    // 通知标题（例如邮件发送者的姓名），<em>调用
    // $ref:notifications.create 方法时必须指定</em>。
    DOMString? title;

    // <!--@Main notification content.
    // <em>Required for $ref:notifications.create</em> method.-->
    // 通知的主要内容，<em>调用
    // $ref:notifications.create 方法时必须指定</em>。
    DOMString? message;

    // <!--@Alternate notification content with a lower-weight font.-->
    // 附加通知内容，以较小的字体显示。
    DOMString? contextMessage;

    // <!--@Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero
    // is default.-->
    // 优先级，从 -2 到 2，-2 优先级最低，2 最高，默认为零。
    long? priority;

    // <!--@A timestamp associated with the notification, in milliseconds past the
    // epoch (e.g. <code>Date.now() + n</code>).-->
    // 与通知相关联的时间，表示为 1970 年 1 月 1 日以来所经过的毫秒数（例如
    // <code>Date.now() + n</code>）。
    double? eventTime;

    // <!--@Text and icons for up to two notification action buttons.-->
    // 通知动作按钮（最多两个）的文本和图标。
    NotificationButton[]? buttons;

    // <!--@Secondary notification content.-->
    // 辅助通知内容。
    [nodoc] DOMString? expandedMessage;

    // <!--@Image thumbnail for image-type notifications.-->
    // 图片类型通知的图片缩略图。
    DOMString? imageUrl;
    [nodoc] NotificationBitmap? imageBitmap;

    // <!--@Items for multi-item notifications.-->
    // 多项目通知的项目。
    NotificationItem[]? items;

    // <!--@Current progress ranges from 0 to 100.-->
    // 当前进度，从 0 到 100。
    long? progress;

    // <!--@Whether to show UI indicating that the app will visibly respond to
    // clicks on the body of a notification.-->
    // 是否在用户界面中显示应用会以可见的方式响应通知正文的单击。
    boolean? isClickable;
  };

  callback CreateCallback = void (DOMString notificationId);

  callback UpdateCallback = void (boolean wasUpdated);

  callback ClearCallback = void (boolean wasCleared);

  callback GetAllCallback = void (object notifications);

  callback PermissionLevelCallback = void (PermissionLevel level);

  interface Functions {
    // <!--@Creates and displays a notification.-->
    // 创建并显示通知。
    // |notificationId|: <!--@Identifier of the notification. If it is empty, this
    // method generates an id. If it matches an existing notification, this
    // method first clears that notification before proceeding with the create
    // operation.-->
    // 通知的标识符。如果为空，该方法会生成一个标识符。如果匹配已有的标识符，该方法在创建操作之前会首先清除这一通知。
    // |options|: <!--@Contents of the notification.-->
    // 通知内容。
    // |callback|: <!--@Returns the notification id (either supplied or generated)
    // that represents the created notification.-->
    // 返回通知标识符（提供的或生成的），代表创建的通知。
    static void create(DOMString notificationId,
                       NotificationOptions options,
                       CreateCallback callback);

    // <!--@Updates an existing notification.-->
    // 更新已有的通知。
    // |notificationId|: <!--@The id of the notification to be updated. This is
    // returned by $ref:notifications.create method.-->
    // 要更新的通知标识符，由 $ref:notifications.create 方法返回。
    // |options|: <!--@Contents of the notification to update to.-->
    // 更新后的通知内容。
    // |callback|: <!--@Called to indicate whether a matching notification existed.-->
    // 调用时指示是否存在匹配的通知。
    static void update(DOMString notificationId,
                       NotificationOptions options,
                       UpdateCallback callback);

    // <!--@Clears the specified notification.-->
    // 清除指定的通知。
    // |notificationId|: <!--@The id of the notification to be cleared. This is
    // returned by $ref:notifications.create method.-->
    // 要清除的通知标识符，由 $ref:notifications.create 方法返回。
    // |callback|: <!--@Called to indicate whether a matching notification existed.-->
    // 调用时指示是否存在匹配的通知。
    static void clear(DOMString notificationId, ClearCallback callback);

    // <!--@Retrieves all the notifications.-->
    // 获取所有通知。
    // |callback|: <!--@Returns the set of notification_ids currently in the system.-->
    // 返回系统中当前所有通知标识符。
    static void getAll(GetAllCallback callback);

    // <!--@Retrieves whether the user has enabled notifications from this app
    // or extension.-->
    // 获取用户是否为当前应用或扩展程序启用通知。
    // |callback|: <!--@Returns the current permission level.-->
    // 返回当前的权限级别。
    static void getPermissionLevel(PermissionLevelCallback callback);
  };

  interface Events {
    // <!--@The notification closed, either by the system or by user action.-->
    // 通知由系统或用户操作关闭。
    static void onClosed(DOMString notificationId, boolean byUser);

    // <!--@The user clicked in a non-button area of the notification.-->
    // 用户单击了通知中的非按钮区域。
    static void onClicked(DOMString notificationId);

    // <!--@The user pressed a button in the notification.-->
    // 用户按下了通知中的一个按钮。
    static void onButtonClicked(DOMString notificationId, long buttonIndex);

    // <!--@The user changes the permission level.-->
    // 用户更改了权限级别。
    static void onPermissionLevelChanged(PermissionLevel level);

    // <!--@The user clicked on a link for the app's notification settings.-->
    // 用户单击了应用的通知设置链接。
    static void onShowSettings();
  };

};
