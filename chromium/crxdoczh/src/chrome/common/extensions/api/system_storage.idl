// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.system.storage</code> API to query storage device
// information and be notified when a removable storage device is attached and
// detached or the available capacity changes.-->
// 使用 <code>chrome.system.storage</code> API
// 查询存储设备信息，并在连接或移除可移动存储设备或可用容量更改时得到通知。
namespace system.storage {

  enum StorageUnitType {
    // <!--@The storage has fixed media, e.g. hard disk or SSD.-->
    // 存储器是固定媒体，例如硬盘或 SSD。
    fixed,
    // <!--@The storage is removable, e.g. USB flash drive.-->
    // 存储器可移动，例如 USB 闪存盘。
    removable,
    // <!--@The storage type is unknown.-->
    // 存储器类型未知。
    unknown
  };

  dictionary StorageUnitInfo {
    // <!--@The transient ID that uniquely identifies the storage device.
    // This ID will be persistent within the same run of a single application.
    // It will not be a persistent identifier between different runs of an
    // application, or between different applications.-->
    // 唯一标识存储设备的暂存标识符，标识符在应用程序同一次运行中持久有效，但不会在同一应用程序两次运行或者不同应用程序之间持久保留。
    DOMString id;
    // <!--@The name of the storage unit.-->
    // 存储单元的名称。
    DOMString name;
    // <!--@The media type of the storage unit.-->
    // 存储单元的媒体类型。
    StorageUnitType type;
    // <!--@The total amount of the storage space, in bytes.-->
    // 存储空间的总共大小，以字节为单位。
    double capacity;
  };

  dictionary StorageFreeSpaceChangeInfo {
    // <!--@The transient id of the storage unit already changed.-->
    // 已更改存储单元的暂存标识符。
    DOMString id;
    // <!--@The new value of the available capacity.-->
    // 可用容量的新值。
    double availableCapacity;
  };

  // <!--@A dictionary that describes the add particular storage device watch
  // request results.-->
  // 描述对某个存储设备监视请求结果的词典。
  dictionary AddAvailableCapacityWatchResult {
    DOMString id;
    boolean success;
  };

  [inline_doc] enum EjectDeviceResultCode {
    // The ejection command is successful -- the application can prompt the user
    // to remove the device.
    success,
    // The device is in use by another application. The ejection did not
    // succeed; the user should not remove the device until the other
    // application is done with the device.
    in_use,
    // There is no such device known.
    no_such_device,
    // The ejection command failed.
    failure
  };

  callback AddAvailableCapacityWatchCallback = void (
      AddAvailableCapacityWatchResult info);

  callback GetAllAvailableCapacityWatchesCallback = void (
      DOMString[] storageIds);

  callback EjectDeviceCallback = void (EjectDeviceResultCode result);

  callback StorageInfoCallback = void (StorageUnitInfo[] info);

  interface Functions {
    // Get the storage information from the system. The argument passed to the
    // callback is an array of StorageUnitInfo objects.
    // <!--@Get the storage information from the system. The argument passed to the
    // callback is an array of StorageUnitInfo objects.-->
    // 从系统获取存储信息，传递给回调函数的参数为
    // $ref:StorageUnitInfo 对象的数组。
    static void getInfo(StorageInfoCallback callback);

    // <!--@Ejects a removable storage device.-->
    // 弹出可移动存储设备。
    static void ejectDevice(DOMString id, EjectDeviceCallback callback);

    // <!--@Monitor a particular storage device available change capacity.-->
    // 监视指定存储设备可用容量的更改。
    static void addAvailableCapacityWatch(
        DOMString id,
        AddAvailableCapacityWatchCallback callback);

    // <!--@Remove the monitor of a particular device.-->
    // 取消对指定设备的监视。
    static void removeAvailableCapacityWatch(DOMString id);

    // <!--@Get all the watched storage devices.-->
    // 获取正在监视的所有存储设备。
    static void getAllAvailableCapacityWatches(
        GetAllAvailableCapacityWatchesCallback callback);

    // <!--@Remove all the storage devices monitors.-->
    // 取消对所有设备的监视。
    static void removeAllAvailableCapacityWatches();
  };

  interface Events {
    // <!--@Fired when a new removable storage is attached to the system.-->
    // 当可移动存储器连接到系统时产生。
    static void onAttached(StorageUnitInfo info);

    // <!--@Fired when a removable storage is detached from the system.-->
    // 当可移动设备从系统移除时产生。
    static void onDetached(DOMString id);

    // <!--@Fired when the storage device available capacity is changed.-->
    // 当存储设备的可用容量更改时产生。
    // |info|: <!--@The changed information for the specified storage unit.-->
    // 指定存储单元已更改的信息。
    static void onAvailableCapacityChanged(StorageFreeSpaceChangeInfo info);
  };

};

