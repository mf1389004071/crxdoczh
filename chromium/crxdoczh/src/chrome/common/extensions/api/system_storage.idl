// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.system.storage</code> API to query storage device
// information and be notified when a removable storage device is attached and
// detached.-->
// 使用 <code>chrome.system.storage</code> API
// 查询存储设备信息，并在连接或移除可移动存储设备时得到通知。
namespace system.storage {

  enum StorageUnitType {
    // <!--@The storage has fixed media, e.g. hard disk or SSD.-->
    // 存储器是固定媒体，例如硬盘或 SSD。
    fixed,
    // <!--@The storage is removable, e.g. USB flash drive.-->
    // 存储器可移动，例如 USB 闪存盘。
    removable,
    // <!--@The storage type is unknown.-->
    // 存储器类型未知。
    unknown
  };

  dictionary StorageUnitInfo {
    // <!--@The transient ID that uniquely identifies the storage device.
    // This ID will be persistent within the same run of a single application.
    // It will not be a persistent identifier between different runs of an
    // application, or between different applications.-->
    // 唯一标识存储设备的暂存标识符，标识符在应用程序同一次运行中持久有效，但不会在同一应用程序两次运行或者不同应用程序之间持久保留。
    DOMString id;
    // <!--@The name of the storage unit.-->
    // 存储单元的名称。
    DOMString name;
    // <!--@The media type of the storage unit.-->
    // 存储单元的媒体类型。
    StorageUnitType type;
    // <!--@The total amount of the storage space, in bytes.-->
    // 存储空间的总共大小，以字节为单位。
    double capacity;
  };

  dictionary StorageAvailableCapacityInfo {
    // <!--@A copied |id| of getAvailableCapacity function parameter |id|.-->
    // 从 getAvailableCapacity 函数的 id 参数复制过来的标识符。
    DOMString id;
    // <!--@The available capacity of the storage device, in bytes.-->
    // 存储设备的可用容量，以字节为单位。
    double availableCapacity;
  };

  [inline_doc] enum EjectDeviceResultCode {
    // <!--@The ejection command is successful -- the application can prompt the user
    // to remove the device.-->
    // 弹出命令成功完成，应用程序可以提示用户拔出设备。
    success,
    // <!--@The device is in use by another application. The ejection did not
    // succeed; the user should not remove the device until the other
    // application is done with the device.-->
    // 另一个应用程序正在使用该设备，弹出命令没有成功，用户不应该拔出设备，而应该等另一个应用程序使用完该设备。
    in_use,
    // <!--@There is no such device known.-->
    // 指定设备不存在。
    no_such_device,
    // <!--@The ejection command failed.-->
    // 弹出命令失败。
    failure
  };

  callback EjectDeviceCallback = void (EjectDeviceResultCode result);

  callback StorageInfoCallback = void (StorageUnitInfo[] info);

  callback GetAvailableCapacityCallback = void (
      StorageAvailableCapacityInfo info);

  interface Functions {
    // <!--@Get the storage information from the system. The argument passed to the
    // callback is an array of StorageUnitInfo objects.-->
    // 从系统获取存储信息，传递给回调函数的参数为
    // $(ref:StorageUnitInfo) 对象的数组。
    static void getInfo(StorageInfoCallback callback);

    // <!--@Ejects a removable storage device.-->
    // 弹出可移动存储设备。
    static void ejectDevice(DOMString id, EjectDeviceCallback callback);

    // <!--@Get the available capacity of a specified |id| storage device.-->
    // 获取指定存储设备的可用容量。
    // <!--@The |id| is the transient device ID from StorageUnitInfo.-->
    // 来自 StorageUnitInfo 的设备标识符。
    static void getAvailableCapacity(DOMString id,
                                     GetAvailableCapacityCallback callback);
  };

  interface Events {
    // <!--@Fired when a new removable storage is attached to the system.-->
    // 当可移动存储器连接到系统时产生。
    static void onAttached(StorageUnitInfo info);

    // <!--@Fired when a removable storage is detached from the system.-->
    // 当可移动设备从系统移除时产生。
    static void onDetached(DOMString id);
  };

};
