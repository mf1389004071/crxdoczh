// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.downloads</code> API to programmatically initiate,
// monitor, manipulate, and search for downloads.-->
// 使用 <code>chrome.downloads</code> API 以编程方式开始下载，监视、操纵、搜索下载的文件。
[permissions=downloads]
namespace downloads {
  [inline_doc] dictionary HeaderNameValuePair {
    // <!--@Name of the HTTP header.-->
    // HTTP 头信息的名称。
    DOMString name;

    // <!--@Value of the HTTP header.-->
    // HTTP 头信息的值。
    DOMString value;
  };

  // <dl><dt>uniquify</dt>
  //     <dd><!--@To avoid duplication, the <code>filename</code> is changed to
  //     include a counter before the filename extension.-->为了避免重复，<code>filename</code> 可能会更改，在文件扩展名前包含一个计数器。</dd>
  //     <dt>overwrite</dt>
  //     <dd><!--@The existing file will be overwritten with the new file.-->现有文件会被新文件覆盖。</dd>
  //     <dt>prompt</dt>
  //     <dd><!--@The user will be prompted with a file chooser dialog.-->显示文件选择对话框提示用户。</dd>
  // </dl>
  enum FilenameConflictAction {uniquify, overwrite, prompt};

  [inline_doc] dictionary FilenameSuggestion {
    // <!--@The $(ref:DownloadItem)'s new target $(ref:DownloadItem.filename), as a path
    // relative to the user's default Downloads directory, possibly containing
    // subdirectories. Absolute paths, empty paths, and paths containing
    // back-references ".." will be ignored.-->
    // $(ref:DownloadItem)（下载项）新的目标
    // $(ref:DownloadItem.filename)（文件名），以相对于用户默认下载目录的路径表示，可以包含子目录。绝对路径、空路径以及包含父目录引用“..”的路径将被忽略。
    DOMString filename;

    // <!--@The action to take if <code>filename</code> already exists.-->
    // 如果 <code>filename</code> 已存在的话要采取的行动。
    FilenameConflictAction? conflictAction;
  };

  [inline_doc] enum HttpMethod {GET, POST};

  enum InterruptReason {
    FILE_FAILED,
    FILE_ACCESS_DENIED,
    FILE_NO_SPACE,
    FILE_NAME_TOO_LONG,
    FILE_TOO_LARGE,
    FILE_VIRUS_INFECTED,
    FILE_TRANSIENT_ERROR,
    FILE_BLOCKED,
    FILE_SECURITY_CHECK_FAILED,
    FILE_TOO_SHORT,
    NETWORK_FAILED,
    NETWORK_TIMEOUT,
    NETWORK_DISCONNECTED,
    NETWORK_SERVER_DOWN,
    NETWORK_INVALID_REQUEST,
    SERVER_FAILED,
    SERVER_NO_RANGE,
    SERVER_PRECONDITION,
    SERVER_BAD_CONTENT,
    USER_CANCELED,
    USER_SHUTDOWN,
    CRASH};

  [inline_doc] dictionary DownloadOptions {
    // <!--@The URL to download.-->
    // 要下载的 URL。
    DOMString url;

    // <!--@A file path relative to the Downloads directory to contain the downloaded
    // file, possibly containing subdirectories. Absolute paths, empty paths,
    // and paths containing back-references ".." will cause an error.
    // $(ref:onDeterminingFilename) allows suggesting a filename after the file's
    // MIME type and a tentative filename have been determined.-->
    // 相对于下载文件夹的路径，包含下载得到的文件，可以包含子目录。绝对路径、空路径以及包含向前引用“..”的路径会导致错误。$(ref:onDeterminingFilename)
    // 允许在文件 MIME 类型和待定文件名确定后推荐文件名。
    DOMString? filename;

    // <!--@The action to take if <code>filename</code> already exists.-->
    // <code>filename</code> 已经存在时进行的操作。
    FilenameConflictAction? conflictAction;

    // <!--@Use a file-chooser to allow the user to select a filename regardless of
    // whether <code>filename</code> is set or already exists.-->
    // 使用选择文件对话框，允许用户选择文件名（无论 <code>filename</code>
    // 是否设置或已经存在）。
    boolean? saveAs;

    // <!--@The HTTP method to use if the URL uses the HTTP[S] protocol.-->
    // 如果 URL 使用 HTTP[S] 协议，则为使用的 HTTP 方法。
    HttpMethod? method;

    // <!--@Extra HTTP headers to send with the request if the URL uses the HTTP[s]
    // protocol. Each header is represented as a dictionary containing the keys
    // <code>name</code> and either <code>value</code> or
    // <code>binaryValue</code>, restricted to those allowed by XMLHttpRequest.-->
    // 如果 URL 使用 HTTP[S] 协议，则包含要与请求一起发送的附加 HTTP
    // 头信息。每一条头信息都由词典表示，包含键 <code>name</code> 以及
    // <code>value</code> 或 <code>binaryValue</code> 中的某一个，仅限于
    // XMLHttpRequest 中允许的头信息。
    HeaderNameValuePair[]? headers;

    // <!--@Post body.-->
    // POST 方法的正文。
    DOMString? body;
  };

  // <dl><dt>file</dt>
  //     <dd><!--@The download's filename is suspicious.-->下载项的文件名可疑。</dd>
  //     <dt>url</dt>
  //     <dd><!--@The download's URL is known to be malicious.-->下载项的 URL 已知是恶意的。</dd>
  //     <dt>content</dt>
  //     <dd><!--@The downloaded file is known to be malicious.-->已下载的文件已知是恶意的。</dd>
  //     <dt>uncommon</dt>
  //     <dd><!--@The download's URL is not commonly downloaded and could be
  //     dangerous.-->下载项的 URL 不常见，可能有风险。</dd>
  //     <dt>host</dt>
  //     <dd><!--@The download came from a host known to distribute malicious
  //     binaries and is likely dangerous.-->下载项来自已知发布恶意软件的主机，可能有风险。</dd>
  //     <dt>unwanted</dt>
  //     <dd><!--@The download is potentially unwanted or unsafe. E.g. it could make
  //     changes to browser or computer settings.-->下载项可能不是所需要的或者不安全，例如它可能会更改浏览器或计算机设置。</dd>
  //     <dt>safe</dt>
  //     <dd><!--@The download presents no known danger to the user's computer.-->下载项对用户的计算机没有已知风险。</dd>
  //     <dt>accepted</dt>
  //     <dd><!--@The user has accepted the dangerous download.-->用户已经接受了有风险的下载。</dd>
  // </dl>
  enum DangerType {
    file, url, content, uncommon, host, unwanted, safe, accepted
  };

  // <dl><dt>in_progress</dt>
  //     <dd><!--@The download is currently receiving data from the server.-->下载项当前正在从服务器接收数据。</dd>
  //     <dt>interrupted</dt>
  //     <dd><!--@An error broke the connection with the file host.-->错误中断了与文件主机之间的连接。</dd>
  //     <dt>complete</dt>
  //     <dd><!--@The download completed successfully.-->下载成功完成。</dd>
  // </dl>
  enum State {in_progress, interrupted, complete};

  // <!--@The state of the process of downloading a file.-->
  // 下载文件过程中的状态。
  dictionary DownloadItem {
    // <!--@An identifier that is persistent across browser sessions.-->
    // 在不同浏览器会话间持久存在的标识符。
    long id;

    // <!--@Absolute URL.-->
    // 绝对 URL。
    DOMString url;

    // <!--@Absolute URL.-->
    // 绝对 URL。
    DOMString referrer;

    // <!--@Absolute local path.-->
    // 绝对本地路径。
    DOMString filename;

    // <!--@False if this download is recorded in the history, true if it is not
    // recorded.-->
    // 如果该下载项记录在历史记录中则为 false，没有记录则为 true。
    boolean incognito;

    // <!--@Indication of whether this download is thought to be safe or known to be
    // suspicious.-->
    // 表示该下载项是否被识别为安全的或者已知是可疑的。
    DangerType danger;

    // <!--@The file's MIME type.-->
    // 文件的 MIME 类型。
    DOMString mime;

    // <!--@The time when the download began in ISO 8601 format. May be passed
    // directly to the Date constructor: <code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){console.log(new
    // Date(item.startTime))})})</code>-->
    // 下载开始的时间，以 <a href="https://zh.wikipedia.org/wiki/ISO_8601">ISO
    // 8601</a> 格式表示，可以直接传递给 Date
    // 的构造函数：<code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){console.log(new
    // Date(item.startTime))})})</code>。
    DOMString startTime;

    // <!--@The time when the download ended in ISO 8601 format. May be passed
    // directly to the Date constructor: <code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){if (item.endTime)
    // console.log(new Date(item.endTime))})})</code>-->
    // 下载结束的时间，以 <a href="https://zh.wikipedia.org/wiki/ISO_8601">ISO
    // 8601</a> 格式表示，可以直接传递给 Date
    // 的构造函数：<code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){console.log(new
    // Date(item.endTime))})})</code>。
    DOMString? endTime;

    // <!--@Estimated time when the download will complete in ISO 8601 format. May be
    // passed directly to the Date constructor:
    // <code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){if (item.estimatedEndTime)
    // console.log(new Date(item.estimatedEndTime))})})</code>-->
    // 下载项完成的估计时间，以 ISO 8601 格式表示，可以直接传递给 Date
    // 的构造函数：<code>chrome.downloads.search({},
    // function(items){items.forEach(function(item){if (item.estimatedEndTime)
    // console.log(new Date(item.estimatedEndTime))})})</code>-->
    DOMString? estimatedEndTime;

    // <!--@Indicates whether the download is progressing, interrupted, or complete.-->
    // 表示下载项处于正在进行、已中断还是已完成的状态。
    State state;

    // <!--@True if the download has stopped reading data from the host, but kept the
    // connection open.-->
    // 如果下载项已停止从主机读取数据，但是连接仍然保持打开状态则为 true。
    boolean paused;

    // <!--@True if the download is in progress and paused, or else if it is
    // interrupted and can be resumed starting from where it was interrupted.-->
    // 如果下载项还在进行中并且已暂停，或者如果中断了但是可以从中断的位置恢复则为
    // true。
    boolean canResume;

    // <!--@Why the download was interrupted. Several kinds of HTTP errors may be
    // grouped under one of the errors beginning with <code>SERVER_</code>.
    // Errors relating to the network begin with <code>NETWORK_</code>, errors
    // relating to the process of writing the file to the file system begin with
    // <code>FILE_</code>, and interruptions initiated by the user begin with
    // <code>USER_</code>.-->
    // 下载项中断的原因。各种 HTTP 错误可能会归为以 <code>SERVER_</code>
    // 开头的几种错误之一，与网络相关的错误以 <code>NETWORK_</code>
    // 开头，将文件写入文件系统的过程中发生的有关错误以 <code>FILE_</code>
    // 开头，由用户进行的中断由 <code>USER_</code>开头。
    InterruptReason? error;

    // <!--@Number of bytes received so far from the host, without considering file
    // compression.-->
    // 目前为止从主机接收到的字节数，不考虑文件压缩。
    double bytesReceived;

    // <!--@Number of bytes in the whole file, without considering file compression,
    // or -1 if unknown.-->
    // 整个文件的字节数，不考虑压缩，如果未知则为 -1。
    double totalBytes;

    // <!--@Number of bytes in the whole file post-decompression, or -1 if unknown.-->
    // 整个文件解压缩后包含的字节数，如果未知则为 -1。
    double fileSize;

    // <!--@Whether the downloaded file still exists. This information may be out of
    // date because Chrome does not automatically watch for file removal. Call
    // $(ref:search)() in order to trigger the check for file existence. When the
    // existence check completes, if the file has been deleted, then an
    // $(ref:onChanged) event will fire. Note that $(ref:search)() does not wait
    // for the existence check to finish before returning, so results from
    // $(ref:search)() may not accurately reflect the file system. Also,
    // $(ref:search)() may be called as often as necessary, but will not check for
    // file existence any more frequently than once every 10 seconds.-->
    // 下载的文件是否还存在，该信息可能不是最新的，因为 Chrome
    // 浏览器不会自动检测文件的删除。要检查文件是否存在，请调用
    // $(ref:search search&#40;&#41;)。存在性检查完后，如果文件已删除，会产生
    // $(ref:onChanged) 事件。注意 $(ref:search search&#40;&#41;)
    // 不会等到存在性检查完成后再返回，所以 $(ref:search search&#40;&#41;)
    // 的结果不一定能准确地反映文件系统的情况。此外，尽管可以频繁调用
    // $(ref:search search&#40;&#41;)，但是检查文件存在性的频率不会高于每 10 秒一次。
    boolean exists;

    // <!--@The identifier for the extension that initiated this download if this
    // download was initiated by an extension. Does not change once it is set.-->
    // 如果下载项由扩展程序发起，则为开始本次下载的扩展程序标识符，一旦设置后就不会更改。
    DOMString? byExtensionId;

    // <!--@The localized name of the extension that initiated this download if this
    // download was initiated by an extension. May change if the extension
    // changes its name or if the user changes their locale.-->
    // 如果下载项由扩展程序发起，则为开始本次下载的扩展程序本地化名称，如果扩展程序的名称更改或者用户更改了区域设置则该属性也会更改。
    DOMString? byExtensionName;
  };

  [inline_doc] dictionary DownloadQuery {
    // <!--@This array of search terms limits results to $(ref:DownloadItem) whose
    // <code>filename</code> or <code>url</code> contain all of the search terms
    // that do not begin with a dash '-' and none of the search terms that do
    // begin with a dash.-->
    // 这一搜索条目数组将结果限制为文件名（<code>filename</code>）或
    // URL
    // 包含所有不以减号（'-'）开始的搜索条目并且不包含所有以减号（'-'）开始的搜索条目。
    DOMString[]? query;

    // <!--@Limits results to $(ref:DownloadItem) that
    // started before the given ms since the epoch.-->
    // 将结果限制为下载开始时间在给定时间（以 1970 年 1 月 1
    // 日午夜以来所经过的毫秒数表示）之前的
    // $(ref:DownloadItem)。
    DOMString? startedBefore;

    // <!--@Limits results to $(ref:DownloadItem) that
    // started after the given ms since the epoch.-->
    // 将结果限制为下载开始时间在给定时间（以 1970 年 1 月 1
    // 日午夜以来所经过的毫秒数表示）之后的
    // $(ref:DownloadItem)。
    DOMString? startedAfter;

    // <!--@Limits results to $(ref:DownloadItem) that ended before the given ms since the
    // epoch.-->
    // 将结果限制为下载结束时间在给定时间（以 1970 年 1 月 1
    // 日午夜以来所经过的毫秒数表示）之前的
    // $(ref:DownloadItem)。
    DOMString? endedBefore;

    // <!--@Limits results to $(ref:DownloadItem) that ended after the given ms since the
    // epoch.-->
    // 将结果限制为下载结束时间在给定时间（以 1970 年 1 月 1
    // 日午夜以来所经过的毫秒数表示）之后的
    // $(ref:DownloadItem)。
    DOMString? endedAfter;

    // <!--@Limits results to $(ref:DownloadItem) whose
    // <code>totalBytes</code> is greater than the given integer.-->
    // 将结果限制为 <code>totalBytes</code> 大于指定整数的
    // $(ref:DownloadItem)。
    double? totalBytesGreater;

    // <!--@Limits results to $(ref:DownloadItem) whose
    // <code>totalBytes</code> is less than the given integer.-->
    // 将结果限制为 <code>totalBytes</code> 小于指定整数的
    // $(ref:DownloadItem)。
    double? totalBytesLess;

    // <!--@Limits results to $(ref:DownloadItem) whose
    // <code>filename</code> matches the given regular expression.-->
    // 将结果限制为 <code>filename</code> 匹配指定正则表达式的
    // $(ref:DownloadItem)。
    DOMString? filenameRegex;

    // <!--@Limits results to $(ref:DownloadItem) whose
    // <code>url</code> matches the given regular expression.-->
    // 将结果限制为 <code>url</code> 匹配指定正则表达式的
    // $(ref:DownloadItem)。
    DOMString? urlRegex;

    // <!--@The maximum number of matching $(ref:DownloadItem) returned. Defaults to
    // 1000. Set to 0 in order to return all matching $(ref:DownloadItem). See
    // $(ref:search) for how to page through results.-->
    // 返回匹配 $(ref:DownloadItem)（下载项）的最大数目，默认为 1000，设置为 0
    // 则返回所有匹配的 $(ref:DownloadItem)（下载项）。有关如何为结果分页，请参见
    // $(ref:search)。
    long? limit;

    // <!--@Set elements of this array to $(ref:DownloadItem) properties in order to
    // sort search results. For example, setting
    // <code>orderBy=['startTime']</code> sorts the $(ref:DownloadItem) by their
    // start time in ascending order. To specify descending order, prefix with a
    // hyphen: '-startTime'.-->
    // 将该数组的元素设置为 $(ref:DownloadItem)
    // 的属性，为搜索结果排序。例如，设置
    // <code>orderBy: ['startTime']</code>
    // 将使下载项按开始时间升序排列。如果要降序排列，请在前面使用连字符：'-startTime'。
    DOMString[]? orderBy;

    // <!--@The <code>id</code> of the $(ref:DownloadItem) to query.-->
    // 要查询的 $(ref:DownloadItem) 的标识符。
    long? id;

    // <!--@Absolute URL.-->
    // 绝对 URL。
    DOMString? url;

    // <!--@Absolute local path.-->
    // 绝对本地路径。
    DOMString? filename;

    // <!--@Indication of whether this download is thought to be safe or known to be
    // suspicious.-->
    // 表示该下载项是否被识别为安全的或者已知是可疑的。
    DangerType? danger;

    // <!--@The file's MIME type.-->
    // 文件的 MIME 类型。
    DOMString? mime;

    // <!--@The time when the download began in ISO 8601 format.-->
    // 下载开始的时间，以 <a href="https://zh.wikipedia.org/wiki/ISO_8601">ISO
    // 8601</a> 格式表示。
    DOMString? startTime;

    // <!--@The time when the download ended in ISO 8601 format.-->
    // 下载结束的时间，以 <a href="https://zh.wikipedia.org/wiki/ISO_8601">ISO
    // 8601</a> 格式表示。
    DOMString? endTime;

    // <!--@Indicates whether the download is progressing, interrupted, or complete.-->
    // 表示下载项处于正在进行、已中断还是已完成的状态。
    State? state;

    // <!--@True if the download has stopped reading data from the host, but kept the
    // connection open.-->
    // 如果下载项已停止从主机读取数据，但是连接仍然保持打开状态则为 true。
    boolean? paused;

    // <!--@Why a download was interrupted.-->
    // 下载项中断的原因。
    InterruptReason? error;

    // <!--@Number of bytes received so far from the host, without considering file
    // compression.-->
    // 目前为止从主机接收到的字节数，不考虑文件压缩。
    double? bytesReceived;

    // <!--@Number of bytes in the whole file, without considering file compression,
    // or -1 if unknown.-->
    // 整个文件的字节数，不考虑压缩，如果未知则为 -1。
    double? totalBytes;

    // <!--@Number of bytes in the whole file post-decompression, or -1 if unknown.-->
    // 整个文件解压缩后包含的字节数，如果未知则为 -1。
    double? fileSize;

    // <!--@Whether the downloaded file exists;-->
    // 下载的文件是有存在。
    boolean? exists;
  };

  dictionary StringDelta {
    DOMString? previous;
    DOMString? current;
  };

  dictionary DoubleDelta {
    double? previous;
    double? current;
  };

  dictionary BooleanDelta {
    boolean? previous;
    boolean? current;
  };

  // <!--@Encapsulates a change in a DownloadItem.-->
  // 包含 $(ref:DownloadItem) 的更改。
  [inline_doc] dictionary DownloadDelta {
    // <!--@The <code>id</code> of the $(ref:DownloadItem)
    // that changed.-->
    // 更改的 $(ref:DownloadItem) 的标识符。
    long id;

    // <!--@The change in <code>url</code>, if any.-->
    // <code>url</code> 属性的更改（如果有的话）。
    StringDelta? url;

    // <!--@The change in <code>filename</code>, if any.-->
    // <code>filename</code> 属性的更改（如果有的话）。
    StringDelta? filename;

    // <!--@The change in <code>danger</code>, if any.-->
    // <code>danger</code> 属性的更改（如果有的话）。
    StringDelta? danger;

    // <!--@The change in <code>mime</code>, if any.-->
    // <code>mime</code> 属性的更改（如果有的话）。
    StringDelta? mime;

    // <!--@The change in <code>startTime</code>, if any.-->
    // <code>startTime</code> 属性的更改（如果有的话）。
    StringDelta? startTime;

    // <!--@The change in <code>endTime</code>, if any.-->
    // <code>endTime</code> 属性的更改（如果有的话）。
    StringDelta? endTime;

    // <!--@The change in <code>state</code>, if any.-->
    // <code>state</code> 属性的更改（如果有的话）。
    StringDelta? state;

    // <!--@The change in <code>canResume</code>, if any.-->
    // <code>canResume</code> 属性的更改（如果有的话）。
    BooleanDelta? canResume;

    // <!--@The change in <code>paused</code>, if any.-->
    // <code>pause</code> 属性的更改（如果有的话）。
    BooleanDelta? paused;

    // <!--@The change in <code>error</code>, if any.-->
    // <code>error</code> 属性的更改（如果有的话）。
    StringDelta? error;

    // <!--@The change in <code>totalBytes</code>, if any.-->
    // <code>totalBytes</code> 属性的更改（如果有的话）。
    DoubleDelta? totalBytes;

    // <!--@The change in <code>fileSize</code>, if any.-->
    // <code>fileSize</code> 属性的更改（如果有的话）。
    DoubleDelta? fileSize;

    // <!--@The change in <code>exists</code>, if any.-->
    // <code>exists</code> 属性的更改（如果有的话）。
    BooleanDelta? exists;
  };

  [inline_doc] dictionary GetFileIconOptions {
    // <!--@The size of the returned icon. The icon will be square with dimensions
    // size * size pixels. The default and largest size for the icon is 32x32
    // pixels. The only supported sizes are 16 and 32. It is an error to specify
    // any other size.-->
    // 返回图标的大小。返回图标的大小为 size×size
    // 像素，图标的默认大小和最大大小都是 32×32 像素。支持的大小有
    // 16 和 32，指定其他大小都会导致错误。
    [legalValues=(16,32)] long? size;
  };

  callback DownloadCallback = void(long downloadId);
  callback SearchCallback = void(DownloadItem[] results);
  callback EraseCallback = void(long[] erasedIds);
  callback NullCallback = void();
  callback GetFileIconCallback = void(optional DOMString iconURL);
  callback SuggestFilenameCallback = void(
    optional FilenameSuggestion suggestion);

  interface Functions {
    // <!--@Download a URL. If the URL uses the HTTP[S] protocol, then the request
    // will include all cookies currently set for its hostname. If both
    // <code>filename</code> and <code>saveAs</code> are specified, then the
    // Save As dialog will be displayed, pre-populated with the specified
    // <code>filename</code>. If the download started successfully,
    // <code>callback</code> will be called with the new $(ref:DownloadItem)'s
    // <code>downloadId</code>. If there was an error starting the download,
    // then <code>callback</code> will be called with
    // <code>downloadId=undefined</code> and $(ref:runtime.lastError) will contain
    // a descriptive string. The error strings are not guaranteed to remain
    // backwards compatible between releases. Extensions must not parse it.-->
    // 下载某个 URL。如果该 URL 使用 HTTP[S]
    // 协议，请求会包含当前为主机名设置的所有 Cookie。如果同时指定了
    // <code>filename</code> 与 <code>saveAs</code>
    // 属性，则会显示另存为对话框，并且初始文件名为指定的
    // <code>filename</code>。如果下载成功开始，将调用
    // <code>callback</code>，并传递新的 $(ref:DownloadItem)（下载项目）的
    // <code>downloadId</code>。如果开始下载时发生了错误，将调用
    // <code>callback</code>，并传递 <code>downloadId: undefined</code>，并且
    // $(ref:runtime.lastError)
    // 包含描述性文字。错误字符串并不能保证在不同版本之间保持向后的兼容性，扩展程序决不能分析它。
    // |options|: <!--@What to download and how.-->
    // 下载的内容与方式。
    // |callback|: <!--@Called with the id of the new $(ref:DownloadItem).-->
    // 调用时传递新的 $(ref:DownloadItem) 的标识符。
    static void download(DownloadOptions options,
                         optional DownloadCallback callback);

    // <!--@Find $(ref:DownloadItem). Set <code>query</code> to the empty object to get
    // all $(ref:DownloadItem). To get a specific $(ref:DownloadItem), set only the
    // <code>id</code> field. To page through a large number of items, set
    // <code>orderBy: ['-startTime']</code>, set <code>limit</code> to the
    // number of items per page, and set <code>startedAfter</code> to the
    // <code>startTime</code> of the last item from the last page.-->
    // 寻找 $(ref:DownloadItem)（下载项）。将
    // <code>query</code>
    // 设置为空对象可以获取所有下载项。要获得某个特定的下载项，只要设置
    // <code>id</code> 字段。要为大量项目分页，请设置
    // <code>orderBy: ['-startTime']</code>，将 <code>limit</code>
    // 设置为每一页的项目数目，并将 <code>startedAfter</code>
    // 设置为上一页最后一个项目的 <code>startTime</code> 属性。
    static void search(DownloadQuery query, SearchCallback callback);

    // <!--@Pause the download. If the request was successful the download is in a
    // paused state. Otherwise $(ref:runtime.lastError) contains an error message.
    // The request will fail if the download is not active.-->
    // 暂停下载。如果请求成功，下载项将进入暂停状态。否则，$(ref:runtime.lastError)
    // 将包含错误消息。如果下载项不处于活动状态，该调用会失败。
    // |downloadId|: <!--@The id of the download to pause.-->
    // 要暂停的下载项标识符。
    // |callback|: <!--@Called when the pause request is completed.-->
    // 暂停请求完成时调用。
    static void pause(long downloadId, optional NullCallback callback);

    // <!--@Resume a paused download. If the request was successful the download is
    // in progress and unpaused. Otherwise $(ref:runtime.lastError) contains an
    // error message. The request will fail if the download is not active.-->
    // 恢复已暂停的下载。如果请求成功，下载项将继续进行，不再处于暂停状态。否则，$(ref:runtime.lastError)
    // 将包含错误消息。如果下载项不处于活动状态，该调用会失败。
    // |downloadId|: <!--@The id of the download to resume.-->
    // 要恢复的下载项标识符。
    // |callback|: <!--@Called when the resume request is completed.-->
    // 恢复请求完成后调用。
    static void resume(long downloadId, optional NullCallback callback);

    // <!--@Cancel a download. When <code>callback</code> is run, the download is
    // cancelled, completed, interrupted or doesn't exist anymore.-->
    // 取消下载。回调函数运行时，下载已取消、已完成、已中断或者不再存在。
    // |downloadId|: <!--@The id of the download to cancel.-->
    // 要取消的下载项标识符。
    // |callback|: <!--@Called when the cancel request is completed.-->
    // 取消请求完成后调用。
    static void cancel(long downloadId, optional NullCallback callback);

    // <!--@Retrieve an icon for the specified download. For new downloads, file
    // icons are available after the $(ref:onCreated) event has been received. The
    // image returned by this function while a download is in progress may be
    // different from the image returned after the download is complete. Icon
    // retrieval is done by querying the underlying operating system or toolkit
    // depending on the platform. The icon that is returned will therefore
    // depend on a number of factors including state of the download, platform,
    // registered file types and visual theme. If a file icon cannot be
    // determined, $(ref:runtime.lastError) will contain an error message.-->
    // 获取指定下载项的图标。对于新的下载项，文件图标将在
    // $(ref:onCreated)
    // 事件收到后才可用。在下载进行时该函数返回的图像可能与下载完成后返回的图像不同。获取图标的方式取决于平台，通过查询下层操作系统或工具包的方式进行。因此，返回的图标取决于各种因素，包括下载状态、平台、已注册的文件类型以及视觉主题。如果无法确定文件图标，$(ref:runtime.lastError)
    // 将会包含错误消息。
    // |downloadId|: <!--@The identifier for the download.-->
    // 下载项的标识符。
    // |callback|: <!--@A URL to an image that represents the download.-->
    // 调用时传递代表下载项的图标。
    static void getFileIcon(long downloadId,
                            optional GetFileIconOptions options,
                            GetFileIconCallback callback);

    // <!--@Open the downloaded file now if the $(ref:DownloadItem) is complete;
    // otherwise returns an error through $(ref:runtime.lastError). Requires the
    // <code>"downloads.open"</code> permission in addition to the
    // <code>"downloads"</code> permission. An $(ref:onChanged) event will fire
    // when the item is opened for the first time.-->
    // 如果 $(ref:DownloadItem)（下载项）已完成则立即打开下载的文件，否则通过
    // $(ref:runtime.lastError) 返回错误。该方法除了需要
    // <code>"downloads"</code> 权限外还需要
    // <code>"downloads.open"</code> 权限。项目第一次打开时将产生
    // $(ref:onChanged) 事件。
    // |downloadId|: <!--@The identifier for the downloaded file.-->
    // 已下载文件的标识符。
    static void open(long downloadId);

    // <!--@Show the downloaded file in its folder in a file manager.-->
    // 在文件管理器中，打开已下载文件所在的文件夹并显示它。
    // |downloadId|: <!--@The identifier for the downloaded file.-->
    // 已下载文件的标识符。
    static void show(long downloadId);

    // <!--@Show the default Downloads folder in a file manager.-->
    // 在文件管理器中显示默认的下载文件夹。
    static void showDefaultFolder();

    // <!--@Erase matching $(ref:DownloadItem) from history without deleting the
    // downloaded file. An $(ref:onErased) event will fire for each
    // $(ref:DownloadItem) that matches <code>query</code>, then
    // <code>callback</code> will be called.-->
    // 从历史记录中删除匹配的
    // $(ref:DownloadItem)（下载项），但不会删除已下载的文件，匹配
    // <code>query</code> 的每一个 $(ref:DownloadItem) 都会产生一次
    // $(ref:onErased) 事件，然后调用 <code>callback</code>。
    static void erase(DownloadQuery query, optional EraseCallback callback);

    // <!--@Remove the downloaded file if it exists and the $(ref:DownloadItem) is
    // complete; otherwise return an error through $(ref:runtime.lastError).-->
    // 如果文件存在并且i
    // $(ref:DownloadItem)（下载项）已完成，则删除已下载的文件，否则通过
    // $(ref:runtime.lastError) 返回错误。
    static void removeFile(long downloadId, optional NullCallback callback);

    // <!--@Prompt the user to accept a dangerous download. Does not automatically
    // accept dangerous downloads. If the download is accepted, then an
    // $(ref:onChanged) event will fire, otherwise nothing will happen.  When all
    // the data is fetched into a temporary file and either the download is not
    // dangerous or the danger has been accepted, then the temporary file is
    // renamed to the target filename, the |state| changes to 'complete', and
    // $(ref:onChanged) fires.-->
    // 提示用户接受有风险的下载，不会自动接受有风险的下载。如果下载项被接受，将产生
    // $(ref:onChanged)
    // 事件，否则什么都不会发生。当所有数据都获取至临时文件后，如果下载项没有风险或者已被接受，该临时文件将被重命名为目标文件名，<code>state</code>
    // 更改为 'complete'，并产生 $(ref:onChanged) 事件。
    // |downloadId|: <!--@The identifier for the $(ref:DownloadItem).-->
    // $(ref:DownloadItem) 的标识符。
    // |callback|: <!--@Called when the danger prompt dialog closes.-->
    // 风险提示对话框关闭时调用。
    static void acceptDanger(long downloadId, optional NullCallback callback);

    // <!--@Initiate dragging the downloaded file to another application. Call in a
    // javascript <code>ondragstart</code> handler.-->
    // 开始将已下载的文件拖动到另一个应用程序，在 JavaScript 的
    // <code>ondragstart</code> 事件处理程序中调用。
    static void drag(long downloadId);

    // <!--@Enable or disable the gray shelf at the bottom of every window associated
    // with the current browser profile. The shelf will be disabled as long as
    // at least one extension has disabled it. Enabling the shelf while at least
    // one other extension has disabled it will return an error through
    // $(ref:runtime.lastError). Requires the <code>"downloads.shelf"</code>
    // permission in addition to the <code>"downloads"</code> permission.-->
    // 启用或禁用窗口底部与当前浏览器的用户配置文件相关联的灰色下载框，只要有至少一个扩展程序禁用它则下载框就会被禁用，在其他扩展程序禁用下载框时启用它会导致错误，通过
    // $(ref:runtime.lastError) 返回。除了 <code>"downloads"</code>
    // 权限以外还需要 <code>"downloads.shelf"</code> 权限。
    static void setShelfEnabled(boolean enabled);
  };

  interface Events {
    // <!--@This event fires with the $(ref:DownloadItem) object when a download
    // begins.-->
    // 下载开始时产生该事件，并传递 $(ref:DownloadItem) 对象。
    static void onCreated(DownloadItem downloadItem);

    // <!--@Fires with the <code>downloadId</code> when a download is erased from
    // history.-->
    // 当下载项从历史记录中删除时产生，并传递 <code>downloadId</code>。
    // |downloadId|: <!--@The <code>id</code> of the $(ref:DownloadItem) that was
    // erased.-->
    // 已删除的 $(ref:DownloadItem) 的 <code>id</code>。
    static void onErased(long downloadId);

    // <!--@When any of a $(ref:DownloadItem)'s properties except
    // <code>bytesReceived</code> and <code>estimatedEndTime</code> changes,
    // this event fires with the <code>downloadId</code> and an object
    // containing the properties that changed.-->
    // 除 <code>bytesReceived</code> 和 <code>estimatedEndTime</code>
    // 以外，当某个
    // $(ref:DownloadItem)（下载项）的任何属性更改时，会产生该事件，并传递
    // <code>downloadId</code> 以及描述属性更改的对象。
    static void onChanged(DownloadDelta downloadDelta);

    // <!--@During the filename determination process, extensions will be given the
    // opportunity to override the target $(ref:DownloadItem.filename). Each
    // extension may not register more than one listener for this event. Each
    // listener must call <code>suggest</code> exactly once, either
    // synchronously or asynchronously. If the listener calls
    // <code>suggest</code> asynchronously, then it must return
    // <code>true</code>. If the listener neither calls <code>suggest</code>
    // synchronously nor returns <code>true</code>, then <code>suggest</code>
    // will be called automatically. The $(ref:DownloadItem) will not complete
    // until all listeners have called <code>suggest</code>. Listeners may call
    // <code>suggest</code> without any arguments in order to allow the download
    // to use <code>downloadItem.filename</code> for its filename, or pass a
    // <code>suggestion</code> object to <code>suggest</code> in order to
    // override the target filename. If more than one extension overrides the
    // filename, then the last extension installed whose listener passes a
    // <code>suggestion</code> object to <code>suggest</code> wins. In order to
    // avoid confusion regarding which extension will win, users should not
    // install extensions that may conflict. If the download is initiated by
    // $(ref:download) and the target filename is known before the MIME type and
    // tentative filename have been determined, pass <code>filename</code> to
    // $(ref:download) instead.-->
    // 在确定文件名的过程中，扩展程序有机会修改目标
    // $(ref:DownloadItem.filename)（文件名）。每一个扩展程序不能为该事件注册一个以上的监听器，每个监听器必须恰好调用一次
    // <code>suggest</code>，既可以是同步地，也可以是异步地。如果监听器异步地调用
    // <code>suggest</code>，它必须返回 <code>true</code>。如果监听器既没有同步地调用
    // <code>suggest</code>，也没有返回 <code>true</code>，则会自动调用
    // <code>suggest</code>。在所有监听器调用 <code>suggest</code>
    // 前，$(ref:DownloadItem)（下载项）不会完成。监听器应该不传递任何参数调用
    // <code>suggest</code>，允许下载项使用 <code>downloadItem.filename</code>
    // 作为它的文件名，或者向 <code>suggest</code> 传递一个
    // <code>suggestion</code>
    // 对象，修改目标文件名。如果不止一个扩展程序修改文件名，最后安装并且向
    // <code>suggest</code> 传递 <code>suggestion</code>
    // 对象的扩展程序优先。为了避免哪个扩展程序优先造成的混淆，用户不应该安装可能会导致冲突的扩展程序。如果下载由
    // $(ref:download) 发起，并且在 MIME
    // 类型和待定文件名确定前就指定了文件名，请将 <code>filename</code>
    // 传递给 $(ref:download)。
    [maxListeners=1] static void onDeterminingFilename(
        DownloadItem downloadItem, SuggestFilenameCallback suggest);
  };
};
