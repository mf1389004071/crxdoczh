// Copyright (c) 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.identity</code> API to get OAuth2 access tokens.-->
// 使用 <code>chrome.identity</code> API 获取 OAuth2 访问令牌。
namespace identity {

  dictionary AccountInfo {
    // <!--@A unique identifier for the account. This ID will not change
    // for the lifetime of the account.-->
    // 账户的唯一标识符，在账户的生命周期内不会更改。
    DOMString id;
  };

  dictionary TokenDetails {
    // <!--@Fetching a token may require the user to sign-in to Chrome, or
    // approve the application's requested scopes. If the interactive
    // flag is <code>true</code>, <code>getAuthToken</code> will
    // prompt the user as necessary. When the flag is
    // <code>false</code> or omitted, <code>getAuthToken</code> will
    // return failure any time a prompt would be required.-->
    // 获取令牌可能需要用户登录到 Chrome
    // 浏览器，或同意应用程序请求的范围。如果交互式标志为
    // <code>true</code>，<code>getAuthToken</code>
    // 会在必要时提示用户。当该标志为 <code>false</code>
    // 或省略时，需要提示时 <code>getAuthToken</code> 会返回失败。
    boolean? interactive;

    // <!--@The account ID whose token should be returned. If not
    // specified, the primary account for the profile will be used.-->
    // 返回对应令牌的账户标识符，如果未指定，则使用当前配置文件中的主账户。
    //
    // <!--@<code>account</code> is only supported when the
    // "enable-new-profile-management" flag is set.-->
    // 只有设置“enable-new-profile-management”标志后才支持 <code>account</code> 参数。
    AccountInfo? account;

    // <!--@A list of OAuth2 scopes to request.-->
    // 要请求的 OAuth2 范围列表。
    //
    // <!--@When the <code>scopes</code> field is present, it overrides the
    // list of scopes specified in manifest.json.-->
    // <code>scopes</code> 字段存在时，它会覆盖 manifest.json 中指定的范围列表。
    DOMString[]? scopes;
  };

  dictionary InvalidTokenDetails {
    // <!--@The specific token that should be removed from the cache.-->
    // 应该从缓存中移除的某个令牌。
    DOMString token;
  };

  dictionary WebAuthFlowDetails {
    // <!--@The URL that initiates the auth flow.-->
    // 开始认证流程的 URL。
    DOMString url;

    // <!--@Whether to launch auth flow in interactive mode.-->
    // 是否要以交互模式执行认证流程。
    //
    // <!--@Since some auth flows may immediately redirect to a result URL,
    // <code>launchWebAuthFlow</code> hides its web view until the
    // first navigation either redirects to the final URL, or finishes
    // loading a page meant to be displayed.-->
    // 由于某些认证流程可能会立刻重定向至结果
    // URL，<code>launchWebAuthFlow</code>
    // 会隐藏该网页视图，直到第一次导航重定向至最终的
    // URL，或者要显示的网页加载完成。
    //
    // <!--@If the interactive flag is <code>true</code>, the window will
    // be displayed when a page load completes. If the flag is
    // <code>false</code> or omitted, <code>launchWebAuthFlow</code>
    // will return with an error if the initial navigation does not
    // complete the flow.-->
    // 如果交互式标识为
    // <code>true</code>，网页加载完成后会显示窗口。如果该标识为
    // <code>false</code> 或省略，<code>launchWebAuthFlow</code>
    // 在第一次导航没有完成认证流程的情况下会返回错误。
    boolean? interactive;
  };

  callback GetAuthTokenCallback = void (optional DOMString token);
  callback GetAccountsCallback = void (AccountInfo[] accounts);
  callback InvalidateAuthTokenCallback = void ();
  callback LaunchWebAuthFlowCallback = void (optional DOMString responseUrl);

  interface Functions {
    // <!--@Retrieves a list of AccountInfo objects describing the accounts
    // present on the profile.<br>
    // <code>getAccounts</code> is only supported on dev channel.-->
    // 获取 AccountInfo 对象列表，描述配置文件中存在的账户。<br>
    // <code>getAccounts</code> 目前仅在 Dev 分支中支持。
    static void getAccounts(GetAccountsCallback callback);

    // <!--@Gets an OAuth2 access token using the client ID and scopes
    // specified in the <a
    // href="app_identity#update_manifest"><code>oauth2</code>
    // section of manifest.json</a>.-->
    // 获取 <a href="app_identity#update_manifest">manifest.json 中
    // <code>oauth2</code> 部分</a>指定的 OAuth2 访问令牌。
    //
    // <!--@The Identity API caches access tokens in memory, so it's ok to
    // call <code>getAuthToken</code> non-interactively any time a token is
    // required. The token cache automatically handles expiration.-->
    // 认证 API 会在内存中缓存访问令牌，所以可以在需要令牌的任何时候以非交互方式调用
    // <code>getAuthToken</code>。令牌缓存的过期问题会自动处理。
    //
    // <!--@For a good user experience it is important interactive token requests are
    // initiated by UI in your app explaining what the authorization is for.
    // Failing to do this will cause your users to get authorization requests,
    // or Chrome sign in screens if they are not signed in, with with no
    // context. In particular, do not use <code>getAuthToken</code>
    // interactively when your app is first launched.-->
    // 为了良好的用户体验，交互式令牌请求应该通过应用中的用户界面发起，并解释认证的原因。如果您没有做到这一点，用户会在没有任何上下文的情况下看到认证请求，如果未登录的话还会显示
    // Chrome 登录屏幕。特别注意，不要在应用第一次启动时以交互方式调用
    // <code>getAuthToken</code>。
    //
    // |details| : <!--@Token options.-->
    // 令牌选项。
    // |callback| : <!--@Called with an OAuth2 access token as specified by the
    // manifest, or undefined if there was an error.-->
    // 调用时传递清单文件中指定的 OAuth2 访问令牌，如果发生错误则为
    // undefined。
    static void getAuthToken(optional TokenDetails details,
                             GetAuthTokenCallback callback);

    // <!--@Removes an OAuth2 access token from the Identity API's token cache.-->
    // 从认证 API 的令牌缓存中移除 OAuth2 访问令牌。
    //
    // <!--@If an access token is discovered to be invalid, it should be
    // passed to removeCachedAuthToken to remove it from the
    // cache. The app may then retrieve a fresh token with
    // <code>getAuthToken</code>.-->
    // 如果发现某个访问令牌无效，应该将它传递给 removeCachedAuthToken
    // 将它从缓存中移除，接着应用可以使用 <code>getAuthToken</code>
    // 获取新的令牌。
    //
    // |details| : Token information.
    // |callback| : Called when the token has been removed from the cache.
    static void removeCachedAuthToken(
        InvalidTokenDetails details, InvalidateAuthTokenCallback callback);

    // <!--@Starts an auth flow at the specified URL.-->
    // 在指定 URL 开始认证流程。
    //
    // <!--@This method enables auth flows with non-Google identity
    // providers by launching a web view and navigating it to the
    // first URL in the provider's auth flow. When the provider
    // redirects to a URL matching the pattern
    // <code>https://&lt;app-id&gt;.chromiumapp.org/*</code>, the
    // window will close, and the final redirect URL will be passed to
    // the <var>callback</var> function.-->
    // 该方法通过打开一个网页视图并导航至提供商认证流程的第一个
    // URL，可以与非 Google 认证提供商进行认证流程。当提供商重定向至某个匹配
    // <code>https://&lt;app-id&gt;.chromiumapp.org/*</code> 的 URL
    // 时，窗口会关闭，最终的重定向 URL 会传递给 <var>callback</var> 函数。
    //
    // <!--@For a good user experience it is important interactive auth flows are
    // initiated by UI in your app explaining what the authorization is for.
    // Failing to do this will cause your users to get authorization requests
    // with no context. In particular, do not launch an interactive auth flow
    // when your app is first launched.-->
    // 为了更好的用户体验，交互式认证流程应该通过应用中的用户界面发起，并解释认证原因。如果您没有这样做，您的用户看到认证请求时没有任何上下文。尤其注意，不要在应用第一次启动时开始交互式认证流程。
    //
    // |details| : <!--@WebAuth flow options.-->
    // WebAuth 流程选项。
    // |callback| : <!--@Called with the URL redirected back to your application.-->
    // 调用时传递重定向回您的应用程序的 URL。
    static void launchWebAuthFlow(WebAuthFlowDetails details,
                                  LaunchWebAuthFlowCallback callback);

    // <!--@Generates a redirect URL to be used in |launchWebAuthFlow|.-->
    // 生成重定向 URL，以便在 <code>launchWebAuthFlow</code> 中使用。
    //
    // <!--@The generated URLs match the pattern-->
    // 生成的 URL 匹配如下表达式
    // <code>https://&lt;app-id&gt;.chromiumapp.org/*</code><!--@.-->。
    //
    // |path| : <!--@The path appended to the end of the generated URL.-->
    // 附加到生成的 URL 末尾的路径。
    [nocompile] static DOMString getRedirectURL(optional DOMString path);
  };

  interface Events {
    // <!--@Fired when signin state changes for an account on the user's profile.-->
    // 当用户配置文件中某个账户的登录状态更改时产生。
    static void onSignInChanged(AccountInfo account, boolean signedIn);
  };
};
