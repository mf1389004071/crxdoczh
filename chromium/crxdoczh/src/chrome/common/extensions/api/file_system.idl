// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.fileSystem</code> API to create, read, navigate,
// and write to a sandboxed section of the user's local file system. With this
// API, Chrome Apps can read and write to a user-selected location. For
// example, a text editor app can use the API to read and write local documents.
// All failures are notified via chrome.runtime.lastError.-->
// 使用 <code>chrome.fileSystem</code> API
// 创建、读取、浏览与写入用户本地文件系统中经过沙盒屏蔽的一个区域。使用该
// API，Chrome 应用可以读取和写入用户选定的位置，例如文本编辑应用可以使用该
// API 读取和写入本地文档。所有失败信息都通过 $ref:runtime.lastError 通知。
namespace fileSystem {
  dictionary AcceptOption {
    // <!--@This is the optional text description for this option. If not present,
    // a description will be automatically generated; typically containing an
    // expanded list of valid extensions (e.g. "text/html" may expand to
    // "*.html, *.htm").-->
    // 这是该选项的可选文字描述。如果不存在的话，将会自动生成描述，通常包含扩充之后的有效扩展名列表（例如
    // "text/html" 将扩充为 "*.html, *.htm"）。
    DOMString? description;

    // <!--@Mime-types to accept, e.g. "image/jpeg" or "audio/*". One of mimeTypes or
    // extensions must contain at least one valid element.-->
    // 可接受的 MIME 类型，例如 "image/jpeg" 或 "audio/*"。mimeTypes
    // 或 extensions 其中之一必须包含至少一个有效元素。
    DOMString[]? mimeTypes;

    // <!--@Extensions to accept, e.g. "jpg", "gif", "crx".-->
    // 可接受的扩展名，例如 ["jpg", "gif", "crx"]。
    DOMString[]? extensions;
  };

  enum ChooseEntryType {

    // <!--@Prompts the user to open an existing file and returns a FileEntry on
    // success. From Chrome 31 onwards, the FileEntry will be writable if the
    // application has the 'write' permission under 'fileSystem'; otherwise, the
    // FileEntry will be read-only.-->
    // 提示用户打开现有文件，并在成功后返回只读的 FileEntry（文件项）。从
    // Chrome 31 开始，如果应用程序拥有 "fileSystem" 之下的 "write"
    // 权限，返回的 FileEntry 可写，否则只读。
    openFile,

    // <!--@Prompts the user to open an existing file and returns a writable
    // FileEntry on success. Calls using this type will fail with a runtime
    // error if the application doesn't have the 'write' permission under
    // 'fileSystem'.-->
    // 提示用户打开现有文件，并在成功后返回可写的
    // FileEntry（文件项）。如果应用没有 'fileSystem' 下的 'write'
    // 权限，使用这种类型的调用将会失败，产生运行时错误。
    openWritableFile,

    // <!--@Prompts the user to open an existing file or a new file and returns a
    // writable FileEntry on success. Calls using this type will fail with a
    // runtime error if the application doesn't have the 'write' permission
    // under 'fileSystem'.-->
    // 提示用户打开现有文件或新文件，并在成功后返回可写的
    // FileEntry（文件项）。如果应用没有 'fileSystem' 下的 'write'
    // 权限，使用这种类型的调用将会失败，产生运行时错误。
    saveFile,

    // <!--@Prompts the user to open a directory and returns a DirectoryEntry on
    // success. Calls using this type will fail with a runtime error if the
    // application doesn't have the 'directory' permission under 'fileSystem'.
    // If the application has the 'write' permission under 'fileSystem', the
    // returned DirectoryEntry will be writable; otherwise it will be read-only.
    // New in Chrome 31.-->
    // 提示用户打开目录，并在成功后返回
    // DirectoryEntry（目录项）。如果应用程序没有 "fileSystem" 之下的
    // "directory"
    // 权限，使用这种类型调用会失败，产生运行时错误。如果应用程序拥有
    // "fileSystem" 之下的 "write" 权限，返回的 DirectoryEntry
    // 可写，否则只读。该类型在 Chrome 31 中新增。
    openDirectory
  };

  dictionary ChooseEntryOptions {
    // <!--@Type of the prompt to show. The default is 'openFile'.-->
    // 显示的提示类型，默认为 'openFile'（打开文件）。
    ChooseEntryType? type;

    // <!--@The suggested file name that will be presented to the user as the
    // default name to read or write. This is optional.-->
    // 展现给用户的推荐文件名，作为要读取或写入的默认文件名，该参数可选。
    DOMString? suggestedName;

    // <!--@The optional list of accept options for this file opener. Each option
    // will be presented as a unique group to the end-user.-->
    // 该文件打开器可选接受选项的列表，对最终用户来说，每一个选项都会呈现为唯一的分组。
    AcceptOption[]? accepts;

    // <!--@Whether to accept all file types, in addition to the options specified
    // in the accepts argument. The default is true. If the accepts field is
    // unset or contains no valid entries, this will always be reset to true.-->
    // 除了 accepts 字段中指定的选项外，是否接受所有文件类型，默认为
    // true。如果 accepts 字段未设置或没有包含有效的项，它始终会被重置为
    // true 。
    boolean? acceptsAllTypes;

    // <!--@Whether to accept multiple files. This is only supported for openFile and
    // openWritableFile. The callback to chooseEntry will be called with a list
    // of entries if this is set to true. Otherwise it will be called with a
    // single Entry.-->
    // 是否接受多个文件，仅在 'openFile'（打开文件）和
    // 'openWritableFile'（打开可写文件）时支持。如果该属性设置为
    // true，调用 chooseEntry
    // 的回调函数时会传递文件项列表，否则传递单个文件项。
    boolean? acceptsMultiple;
  };
  callback GetDisplayPathCallback = void (DOMString displayPath);
  callback EntryCallback = void ([instanceOf=Entry] object entry);
  callback EntriesCallback = void (
      [instanceOf=Entry] optional object entry,
      [instanceOf=FileEntry] optional object[] fileEntries);
  callback IsWritableCallback = void (boolean isWritable);
  callback IsRestorableCallback = void (boolean isRestorable);

  interface Functions {
    // <!--@Get the display path of an Entry object. The display path is based on
    // the full path of the file or directory on the local file system, but may
    // be made more readable for display purposes.-->
    // 获取 <code>FileEntry</code>
    // 对象的显示路径。显示路径基于文件在本地文件系统上的完整路径，但是可能会为了显示的目的而使可读性更好。
    static void getDisplayPath([instanceOf=Entry] object entry,
                               GetDisplayPathCallback callback);

    // <!--@Get a writable Entry from another Entry. This call will fail with a
    // runtime error if the application does not have the 'write' permission
    // under 'fileSystem'. If entry is a DirectoryEntry, this call will fail if
    // the application does not have the 'directory' permission under
    // 'fileSystem'.-->
    // 从另一个 <code>Entry</code> 获取可写的 Entry。如果应用程序没有
    // 'fileSystem' 下的 'write'
    // 权限则该方法会失败，产生运行时错误。如果项目为
    // DirectoryEntry（目录项），应用程序必须拥有 "fileSystem" 之下的
    // "directory" 权限，否则调用会失败。
    static void getWritableEntry([instanceOf=Entry] object entry,
                                 EntryCallback callback);

    // <!--@Gets whether this Entry is writable or not.-->
    // 获取该 <code>Entry</code> 对象是否可以写入的信息。
    static void isWritableEntry([instanceOf=Entry] object entry,
                                IsWritableCallback callback);

    // <!--@Ask the user to choose a file or directory.-->
    // 让用户选择文件或目录。
    static void chooseEntry(optional ChooseEntryOptions options,
                            EntriesCallback callback);

    // <!--@Returns the file entry with the given id if it can be restored. This call
    // will fail with a runtime error otherwise. This method is new in Chrome
    // 31.-->
    // 如果可以恢复则恢复指定标识符的文件项，否则该调用会失败，产生运行时错误。该方法在
    // Chrome 31 中增加。
    static void restoreEntry(DOMString id, EntryCallback callback);

    // <!--@Returns whether the app has permission to restore the entry with the
    // given id. This method is new in Chrome 31.-->
    // 返回应用是否有权限恢复指定标识符的文件项。该方法在 Chrome 30 中增加。
    static void isRestorable(DOMString id, IsRestorableCallback callback);

    // <!--@Returns an id that can be passed to restoreEntry to regain access to a
    // given file entry. Only the 500 most recently used entries are retained,
    // where calls to retainEntry and restoreEntry count as use. If the app has
    // the 'retainEntries' permission under 'fileSystem', entries are retained
    // indefinitely. Otherwise, entries are retained only while the app is
    // running and across restarts. This method is new in Chrome 31.-->
    // 返回一个标识符，可以传递给 restoreEntry
    // 而重新获得指定文件项的访问。只能保留最近使用的 500
    // 个项目，调用 retainEntry 和 restoreEntry 都算作使用。如果应用拥有
    // 'fileSystem' 之下的 'retainEntries'
    // 权限，项目将永久保留。否则，只有应用运行时或重新启动后才会保留。该方法在
    // Chrome 31 中增加。
    static DOMString retainEntry([instanceOf=Entry] object entry);
  };
};
