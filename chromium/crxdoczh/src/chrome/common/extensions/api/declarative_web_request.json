// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "namespace": "declarativeWebRequest",
//@    "description": "Use the <code>chrome.declarativeWebRequest</code> API to intercept, block, or modify requests in-flight. It is significantly faster than the <a href='webRequest'><code>chrome.webRequest</code> API</a> because you can register rules that are evaluated in the browser rather than the JavaScript engine with reduces roundtrip latencies and allows higher efficiency.",
    "description": "使用 <code>chrome.declarativeWebRequest</code> API 实时地拦截、阻止或修改请求，它比 <a href='webRequest'><code>chrome.webRequest</code> API</a> 要快得多，因为您注册的规则在浏览器中而不是 JavaScript 引擎中求值，这样就减少了来回延迟，效率更高。",
    "types": [
      {
        "id": "HeaderFilter",
        "type": "object",
//@        "description": "Filters request headers for various criteria. Multiple criteria are evaluated as a conjunction.",
        "description": "通过各种条件过滤请求头信息，多个条件将同时求值。",
        "properties": {
          "namePrefix": {
//@            "description" : "Matches if the header name starts with the specified string.",
            "description" : "如果头信息的名称以指定字符串开头则匹配。",
            "type": "string",
            "optional": true
          },
          "nameSuffix": {
            "type": "string",
            "optional": true,
//@            "description" : "Matches if the header name ends with the specified string."
            "description" : "如果头信息的名称以指定字符串结尾则匹配。"
          },
          "nameContains": {
            "choices": [
             {"type": "array", "items": {"type": "string"}},
             {"type": "string"}
            ],
            "optional": true,
//@            "description" : "Matches if the header name contains all of the specified strings."
            "description" : "如果头信息的名称包含所有指定的字符串则匹配。"
          },
          "nameEquals": {
            "type": "string",
            "optional": true,
//@            "description" : "Matches if the header name is equal to the specified string."
            "description" : "如果头信息的名称与指定字符串相同则匹配。"
          },
          "valuePrefix": {
            "type": "string",
            "optional": true,
//@            "description" : "Matches if the header value starts with the specified string."
            "description" : "如果头信息的值以指定字符串开头则匹配。"
          },
          "valueSuffix": {
            "type": "string",
            "optional": true,
//@            "description" : "Matches if the header value ends with the specified string."
            "description" : "如果头信息的值以指定字符串结尾则匹配。"
          },
          "valueContains": {
            "choices": [
             {"type": "array", "items": {"type": "string"}},
             {"type": "string"}
            ],
            "optional": true,
//@            "description" : "Matches if the header value contains all of the specified strings."
            "description" : "如果头信息的值包含所有指定的字符串则匹配。"
          },
          "valueEquals": {
            "type": "string",
            "optional": true,
//@            "description" : "Matches if the header value is equal to the specified string."
            "description" : "如果头信息的值与指定字符串相同则匹配。"
          }
        }
      },
      {
        "id": "RequestMatcher",
        "type": "object",
//@        "description": "Matches network events by various criteria.",
        "description": "通过各种条件匹配网络事件。",
        "properties": {
          "url": {
            "$ref": "events.UrlFilter",
//@            "description": "Matches if the conditions of the UrlFilter are fulfilled for the URL of the request.",
            "description": "如果请求所对应的 URL 满足 UrlFilter 的条件则匹配。",
            "optional": true
          },
          "firstPartyForCookiesUrl": {
            "$ref": "events.UrlFilter",
//@            "description": "Matches if the conditions of the UrlFilter are fulfilled for the 'first party' URL of the request. The 'first party' URL of a request, when present, can be different from the request's target URL, and describes what is considered 'first party' for the sake of third-party checks for cookies.",
            "description": "如果请求的“第一方”URL 满足 UrlFilter 的条件则匹配，请求的“第一方”URL（如果存在的话）可能与请求的目标 URL 不同，描述的是相对于第三方 Cookie 检查的“第一方”。",
            "optional": true
          },
          "resourceType": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if the request type of a request is contained in the list. Requests that cannot match any of the types will be filtered out.",
            "description": "如果请求的类型包含在列表中则匹配，不匹配指定的任何类型的请求将被过滤出去。",
            "items": { "type": "string", "enum": ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"] }
          },
          "contentType": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if the MIME media type of a response (from the HTTP Content-Type header) is contained in the list.",
            "description": "如果响应的 MIME 媒体类型（来自 HTTP Content-Type 头信息）包含在列表中则匹配。",
            "items": { "type": "string" }
          },
          "excludeContentType": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if the MIME media type of a response (from the HTTP Content-Type header) is <em>not</em> contained in the list.",
            "description": "如果响应的 MIME 媒体类型（来自 HTTP Content-Type 头信息）<em>没有</em>包含在列表中则匹配。",
            "items": { "type": "string" }
          },
          "requestHeaders": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if some of the request headers is matched by one of the HeaderFilters.",
            "description": "如果某些请求头信息匹配 HeaderFilter 中的某一个则匹配该请求。",
            "items": { "$ref": "HeaderFilter" }
          },
          "excludeRequestHeaders": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if none of the request headers is matched by any of the HeaderFilters.",
            "description": "如果请求头信息都不匹配任何一个 HeaderFilter 则匹配该请求。",
            "items": { "$ref": "HeaderFilter" }
          },
          "responseHeaders": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if some of the response headers is matched by one of the HeaderFilters.",
            "description": "如果某些响应头信息匹配 HeaderFilter 中的某一个则匹配该请求。",
            "items": { "$ref": "HeaderFilter" }
          },
          "excludeResponseHeaders": {
            "type": "array",
            "optional": true,
//@            "description": "Matches if none of the response headers is matched by any of the HeaderFilters.",
            "description": "如果响应头信息都不匹配任何一个 HeaderFilter 则匹配该请求。",
            "items": { "$ref": "HeaderFilter" }
          },
          "thirdPartyForCookies": {
            "type": "boolean",
            "optional": true,
//@            "description": "If set to true, matches requests that are subject to third-party cookie policies. If set to false, matches all other requests."
            "description": "如果设为 true，则匹配受第三方 Cookie 策略约束的请求；如果设为 false，则匹配所有其他请求。"
          },
          "stages": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["onBeforeRequest", "onBeforeSendHeaders", "onHeadersReceived", "onAuthRequired"]
            },
            "optional": true,
//@            "description": "Contains a list of strings describing stages. Allowed values are 'onBeforeRequest', 'onBeforeSendHeaders', 'onHeadersReceived', 'onAuthRequired'. If this attribute is present, then it limits the applicable stages to those listed. Note that the whole condition is only applicable in stages compatible with all attributes."
            "description": "包含描述阶段的字符串列表，允许的值包括 'onBeforeRequest'、'onBeforeSendHeaders'、'onHeadersReceived'、'onAuthRequired'。如果该属性存在的话，它会将适用的阶段限制在这一列表中。注意整个条件只能在与所有属性兼容的阶段中适用。"
          },
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RequestMatcher"],
            "nodoc": true
          }
        }
      },
      {
        "id": "CancelRequest",
//@        "description": "Declarative event action that cancels a network request.",
        "description": "声明式事件操作，取消网络请求。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.CancelRequest"],
            "nodoc": true
          }
        }
      },
      {
        "id": "RedirectRequest",
//@        "description": "Declarative event action that redirects a network request.",
        "description": "声明式事件操作，重定向网络请求。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RedirectRequest"],
            "nodoc": true
          },
//@          "redirectUrl": { "type": "string", "description": "Destination to where the request is redirected."}
          "redirectUrl": { "type": "string", "description": "请求重定向的目标。"}
        }
      },
      {
        "id": "declarativeWebRequest.RedirectToTransparentImage",
//@        "description": "Declarative event action that redirects a network request to a transparent image.",
        "description": "声明式事件操作，将网络请求重定向至透明图片。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RedirectToTransparentImage"],
            "nodoc": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.RedirectToEmptyDocument",
//@        "description": "Declarative event action that redirects a network request to an empty document.",
        "description": "声明式事件操作，将网络请求重定向至空文档。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RedirectToEmptyDocument"],
            "nodoc": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.RedirectByRegEx",
//@        "description": "Redirects a request by applying a regular expression on the URL. The regular expressions use the <a href=\"http://code.google.com/p/re2/wiki/Syntax\">RE2 syntax</a>.",
        "description": "对 URL 应用正则表达式，重定向请求。正则表达式采用 <a href=\"http://code.google.com/p/re2/wiki/Syntax\">RE2 语法</a>。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RedirectByRegEx"],
            "nodoc": true
          },
          "from": {
            "type": "string",
//@            "description": "A match pattern that may contain capture groups. Capture groups are referenced in the Perl syntax ($1, $2, ...) instead of the RE2 syntax (\\1, \\2, ...) in order to be closer to JavaScript Regular Expressions."
            "description": "匹配表达式，可以包含捕获性分组。为了更接近 JavaScript 正则表达式，捕获性分组以 Perl 语法（$1、$2……），而不是 RE2 语法（\\1、\\2……）引用。"
          },
          "to": {
            "type": "string",
//@            "description": "Destination pattern."
            "description": "目标表达式。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.SetRequestHeader",
//@        "description": "Sets the request header of the specified name to the specified value. If a header with the specified name did not exist before, a new one is created. Header name comparison is always case-insensitive. Each request header name occurs only once in each request.",
        "description": "将指定名称的请求头信息设置为指定值。如果指定名称的头信息原来不存在，则会创建新的。头信息名称的比较不区分大小写，且每个请求中每个请求头信息名称只会出现一次。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.SetRequestHeader"],
            "nodoc": true
          },
          "name": {
            "type": "string",
//@            "description": "HTTP request header name."
            "description": "HTTP 请求头信息的名称。"
          },
          "value": {
            "type": "string",
//@            "description": "HTTP request header value."
            "description": "HTTP 请求头信息的值。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.RemoveRequestHeader",
//@        "description": "Removes the request header of the specified name. Do not use SetRequestHeader and RemoveRequestHeader with the same header name on the same request. Each request header name occurs only once in each request.",
        "description": "移除指定名称的请求头信息。不要在同一请求的同一头信息名称上同时使用 SetRequestHeader 和 RemoveRequestHeader。每个请求中每个请求头信息名称只会出现一次。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RemoveRequestHeader"],
            "nodoc": true
          },
          "name": {
            "type": "string",
//@            "description": "HTTP request header name (case-insensitive)."
            "description": "HTTP 请求头信息的名称（不区分大小写）。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.AddResponseHeader",
//@        "description": "Adds the response header to the response of this web request. As multiple response headers may share the same name, you need to first remove and then add a new response header in order to replace one.",
        "description": "向当前网络请求的响应中添加响应头信息。由于多个响应头信息可能会使用相同的名称，您需要首先删除然后再添加新的响应头信息才能完成替换。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.AddResponseHeader"],
            "nodoc": true
          },
          "name": {
            "type": "string",
//@            "description": "HTTP response header name."
            "description": "HTTP 响应头信息的名称。"
          },
          "value": {
            "type": "string",
//@            "description": "HTTP response header value."
            "description": "HTTP 响应头信息的值。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.RemoveResponseHeader",
//@        "description": "Removes all response headers of the specified names and values.",
        "description": "删除指定名称和值的所有响应头信息。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RemoveResponseHeader"],
            "nodoc": true
          },
          "name": {
            "type": "string",
//@            "description": "HTTP request header name (case-insensitive)."
            "description": "HTTP 请求头信息的名称（不区分大小写）。"
          },
          "value": {
            "type": "string",
//@            "description": "HTTP request header value (case-insensitive).",
            "description": "HTTP 响应头信息的值（不区分大小写）。",
            "optional": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.IgnoreRules",
//@        "description": "Masks all rules that match the specified criteria.",
        "description": "排除所有匹配指定条件的规则。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.IgnoreRules"],
            "nodoc": true
          },
          "lowerPriorityThan": {
            "type": "integer",
//@            "description": "If set, rules with a lower priority than the specified value are ignored. This boundary is not persisted, it affects only rules and their actions of the same network request stage.",
            "description": "如果设置的话，将忽略优先级低于指定值的规则。这一界限不是持久的，它只会影响同一网络请求阶段的规则与它们对应的操作。",
            "optional": true
          },
          "hasTag": {
            "type": "string",
//@            "description": "If set, rules with the specified tag are ignored. This ignoring is not persisted, it affects only rules and their actions of the same network request stage. Note that rules are executed in descending order of their priorities. This action affects rules of lower priority than the current rule. Rules with the same priority may or may not be ignored.",
            "description": "如果设置的话，包含指定标签的规则将被忽略。这一忽略不是持久的，它只影响同一网络请求阶段的规则及其操作。注意，规则按照优先级递减的顺序执行，该操作只会影响优先级低于当前规则的规则，具有相同优先级的规则可能会也可能不会被忽略。",
            "optional": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.SendMessageToExtension",
//@        "description": "Triggers the $(ref:declarativeWebRequest.onMessage) event.",
        "description": "触发 $(ref:declarativeWebRequest.onMessage) 事件。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.SendMessageToExtension"],
            "nodoc": true
          },
          "message": {
            "type": "string",
//@            "description": "The value that will be passed in the <code>message</code> attribute of the dictionary that is passed to the event handler."
            "description": "传递给事件处理函数的词典中 <code>message</code> 属性的值。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.RequestCookie",
//@        "description": "A filter or specification of a cookie in HTTP Requests.",
        "description": "用于过滤或指定 HTTP 请求中的 Cookie。",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
//@            "description": "Name of a cookie.",
            "description": "Cookie 的名称。",
            "optional": true
          },
          "value": {
            "type": "string",
//@            "description": "Value of a cookie, may be padded in double-quotes.",
            "description": "Cookie 的值，可以填充在双引号中。",
            "optional": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.ResponseCookie",
//@        "description": "A specification of a cookie in HTTP Responses.",
        "description": "用于指定 HTTP 响应中的 Cookie。",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
//@            "description": "Name of a cookie.",
            "description": "Cookie 的名称。",
            "optional": true
          },
          "value": {
            "type": "string",
//@            "description": "Value of a cookie, may be padded in double-quotes.",
            "description": "Cookie 的值，可以填充在双引号中。",
            "optional": true
          },
          "expires": {
            "type": "string",
//@            "description": "Value of the Expires cookie attribute.",
            "description": "Cookie 的 Expires 属性值。",
            "optional": true
          },
          "maxAge": {
            "type": "number",
//@            "description": "Value of the Max-Age cookie attribute",
            "description": "Cookie 的 Max-Age 属性值。",
            "optional": true
          },
          "domain": {
            "type": "string",
//@            "description": "Value of the Domain cookie attribute.",
            "description": "Cookie 的 Domain 属性值。",
            "optional": true
          },
          "path": {
            "type": "string",
//@            "description": "Value of the Path cookie attribute.",
            "description": "Cookie 的 Path 属性值。",
            "optional": true
          },
          "secure": {
            "type": "string",
//@            "description": "Existence of the Secure cookie attribute.",
            "description": "Cookie 的 Secure 属性是否存在。",
            "optional": true
          },
          "httpOnly": {
            "type": "string",
//@            "description": "Existence of the HttpOnly cookie attribute.",
            "description": "Cookie 的 HttpOnly 属性是否存在。",
            "optional": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.FilterResponseCookie",
//@        "description": "A filter of a cookie in HTTP Responses.",
        "description": "用于 HTTP 响应 Cookie 的过滤器。",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
//@            "description": "Name of a cookie.",
            "description": "Cookie 的名称。",
            "optional": true
          },
          "value": {
            "type": "string",
//@            "description": "Value of a cookie, may be padded in double-quotes.",
            "description": "Cookie 的值，可以用双引号填充。",
            "optional": true
          },
          "expires": {
            "type": "string",
//@            "description": "Value of the Expires cookie attribute.",
            "description": "Cookie 的 Expires 属性值。",
            "optional": true
          },
          "maxAge": {
            "type": "number",
//@            "description": "Value of the Max-Age cookie attribute",
            "description": "Cookie 的 Max-Age 属性值。",
            "optional": true
          },
          "domain": {
            "type": "string",
//@            "description": "Value of the Domain cookie attribute.",
            "description": "Cookie 的 Domain 属性值。",
            "optional": true
          },
          "path": {
            "type": "string",
//@            "description": "Value of the Path cookie attribute.",
            "description": "Cookie 的 Path 属性值。",
            "optional": true
          },
          "secure": {
            "type": "string",
//@            "description": "Existence of the Secure cookie attribute.",
            "description": "Cookie 的 Secure 属性是否存在。",
            "optional": true
          },
          "httpOnly": {
            "type": "string",
//@            "description": "Existence of the HttpOnly cookie attribute.",
            "description": "Cookie 的 HttpOnly 属性是否存在。",
            "optional": true
          },
          "ageUpperBound": {
            "type": "integer",
//@            "description": "Inclusive upper bound on the cookie lifetime (specified in seconds after current time). Only cookies whose expiration date-time is in the interval [now, now + ageUpperBound] fulfill this criterion. Session cookies and cookies whose expiration date-time is in the past do not meet the criterion of this filter. The cookie lifetime is calculated from either 'max-age' or 'expires' cookie attributes. If both are specified, 'max-age' is used to calculate the cookie lifetime.",
            "description": "Cookie 生命周期的上界（包含）（以当前时间之后多少秒的形式指定），只有过期日期时间在区间 [现在, 现在 + ageUpperBound] 内的 Cookie 满足这一条件，会话 Cookie 以及过期时间在过去的 Cookie 不满足该过滤器的条件。Cookie 的生命周期通过 Cookie 的 'max-age' 或 'expires' 属性来计算，如果两者都指定则使用 'max-age' 来计算 Cookie 的生命周期。",
            "minimum": 0,
            "optional": true
          },
          "ageLowerBound": {
            "type": "integer",
//@            "description": "Inclusive lower bound on the cookie lifetime (specified in seconds after current time). Only cookies whose expiration date-time is set to 'now + ageLowerBound' or later fulfill this criterion. Session cookies do not meet the criterion of this filter. The cookie lifetime is calculated from either 'max-age' or 'expires' cookie attributes. If both are specified, 'max-age' is used to calculate the cookie lifetime.",
            "description": "Cookie 生命周期的下界（包含）（以当前时间之后多少秒的形式指定），只有过期日期时间在区间 [现在 + ageLowerBound, 现在] 内的 Cookie 满足这一条件，会话 Cookie 以及过期时间在过去的 Cookie 不满足该过滤器的条件。Cookie 的生命周期通过 Cookie 的 'max-age' 或 'expires' 属性来计算，如果两者都指定则使用 'max-age' 来计算 Cookie 的生命周期。",
            "minimum": 0,
            "optional": true
          },
          "sessionCookie": {
            "type": "boolean",
//@            "description": "Filters session cookies. Session cookies have no lifetime specified in any of 'max-age' or 'expires' attributes.",
            "description": "过滤会话 Cookie，会话 Cookie 没有 'max-age' 或 'expires' 属性指定的生命周期。",
            "optional": true
          }
        }
      },
      {
        "id": "declarativeWebRequest.AddRequestCookie",
//@        "description": "Adds a cookie to the request or overrides a cookie, in case another cookie of the same name exists already. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "向请求中添加或者覆盖（如果相同名称的 Cookie 已经存在）Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.AddRequestCookie"],
            "nodoc": true
          },
          "cookie": {
            "$ref": "declarativeWebRequest.RequestCookie",
//@            "description": "Cookie to be added to the request. No field may be undefined."
            "description": "要添加至请求的 Cookie，所有字段都不能为 undefined。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.AddResponseCookie",
//@        "description": "Adds a cookie to the response or overrides a cookie, in case another cookie of the same name exists already. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "向响应中添加或者覆盖（如果相同名称的 Cookie 已经存在）Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.AddResponseCookie"],
            "nodoc": true
          },
          "cookie": {
            "$ref": "declarativeWebRequest.ResponseCookie",
//@            "description": "Cookie to be added to the response. The name and value need to be specified."
            "description": "要添加至响应的 Cookie，name 与 value 必须指定。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.EditRequestCookie",
//@        "description": "Edits one or more cookies of request. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "编辑请求中的一个或多个 Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.EditRequestCookie"],
            "nodoc": true
          },
          "filter": {
            "$ref": "declarativeWebRequest.RequestCookie",
//@            "description": "Filter for cookies that will be modified. All empty entries are ignored."
            "description": "过滤要修改的 Cookie，所有空项都会忽略。"
          },
          "modification": {
            "$ref": "declarativeWebRequest.RequestCookie",
//@            "description": "Attributes that shall be overridden in cookies that machted the filter. Attributes that are set to an empty string are removed."
            "description": "在匹配过滤器的 Cookie 中应该覆盖的属性，设置为空字符串的属性将移除。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.EditResponseCookie",
//@        "description": "Edits one or more cookies of response. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "编辑响应中的一个或多个 Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.EditResponseCookie"],
            "nodoc": true
          },
          "filter": {
            "$ref": "declarativeWebRequest.FilterResponseCookie",
//@            "description": "Filter for cookies that will be modified. All empty entries are ignored."
            "description": "过滤要修改的 Cookie，所有空项都会忽略。"
          },
          "modification": {
            "$ref": "declarativeWebRequest.ResponseCookie",
//@            "description": "Attributes that shall be overridden in cookies that machted the filter. Attributes that are set to an empty string are removed."
            "description": "在匹配过滤器的 Cookie 中应该覆盖的属性，设置为空字符串的属性将移除。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.RemoveRequestCookie",
//@        "description": "Removes one or more cookies of request. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "移除请求中的一个或多个 Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RemoveRequestCookie"],
            "nodoc": true
          },
          "filter": {
            "$ref": "declarativeWebRequest.RequestCookie",
//@            "description": "Filter for cookies that will be removed. All empty entries are ignored."
            "description": "过滤要移除的 Cookie，所有空项都会忽略。"
          }
        }
      },
      {
        "id": "declarativeWebRequest.RemoveResponseCookie",
//@        "description": "Removes one or more cookies of response. Note that it is preferred to use the Cookies API because this is computationally less expensive.",
        "description": "移除响应中的一个或多个 Cookie。注意，您应该首选 Cookie API，因为它在计算上开销更少。",
        "type": "object",
        "properties": {
          "instanceType": {
            "type": "string", "enum": ["declarativeWebRequest.RemoveResponseCookie"],
            "nodoc": true
          },
          "filter": {
            "$ref": "declarativeWebRequest.FilterResponseCookie",
//@            "description": "Filter for cookies that will be removed. All empty entries are ignored."
            "description": "过滤要移除的 Cookie，所有空项都会忽略。"
          }
        }
      }
    ],
    "functions": [
    ],
    "events": [
      {
        "name": "onRequest",
        "options": {
          "supportsListeners": false,
          "supportsRules": true,
          "conditions": ["declarativeWebRequest.RequestMatcher"],
          "actions": [
            "declarativeWebRequest.AddRequestCookie",
            "declarativeWebRequest.AddResponseCookie",
            "declarativeWebRequest.AddResponseHeader",
            "declarativeWebRequest.CancelRequest",
            "declarativeWebRequest.EditRequestCookie",
            "declarativeWebRequest.EditResponseCookie",
            "declarativeWebRequest.RedirectRequest",
            "declarativeWebRequest.RedirectToTransparentImage",
            "declarativeWebRequest.RedirectToEmptyDocument",
            "declarativeWebRequest.RedirectByRegEx",
            "declarativeWebRequest.RemoveRequestCookie",
            "declarativeWebRequest.RemoveResponseCookie",
            "declarativeWebRequest.RemoveRequestHeader",
            "declarativeWebRequest.RemoveResponseHeader",
            "declarativeWebRequest.SetRequestHeader",
            "declarativeWebRequest.SendMessageToExtension",
            "declarativeWebRequest.IgnoreRules"
          ]
        }
      },
      {
        "name": "onMessage",
        "type": "function",
//@        "description": "Fired when a message is sent via $(ref:declarativeWebRequest.SendMessageToExtension) from an action of the declarative web request API.",
        "description": "当消息通过声明式网络请求 API 的 $(ref:declarativeWebRequest.SendMessageToExtension) 操作发送时产生。",
        "parameters": [
          {
            "type": "object",
            "name": "details",
            "properties": {
//@              "message": {"type": "string", "description": "The message sent by the calling script."},
              "message": {"type": "string", "description": "调用脚本发送的消息。"},
              "stage": {"type": "string",
                        "enum": ["onBeforeRequest", "onBeforeSendHeaders", "onHeadersReceived", "onAuthRequired"],
//@                        "description": "The stage of the network request during which the event was triggered."},
                        "description": "事件发生时网络请求所处的阶段。"},
//@              "requestId": {"type": "string", "description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."},
              "requestId": {"type": "string", "description": "请求标识符。请求标识符在浏览器会话中保证唯一，所以，它们可以用来联系同一请求的不同事件。"},
              "url": {"type": "string"},
//@              "method": {"type": "string", "description": "Standard HTTP method."},
              "method": {"type": "string", "description": "标准 HTTP 方法。"},
//@              "frameId": {"type": "integer", "description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."},
              "frameId": {"type": "integer", "description": "0 表示请求发生在主框架中，正数表示发出请求的子框架标识符。如果加载了（子）框架的文档（<code>type</code> 为 <code>\"main_frame\"</code> 或 <code>\"sub_frame\"</code>），<code>frameId</code> 指定该框架的标识符，而不是外层框架的标识符。框架标识符在标签页中保证唯一。"},
//@              "parentFrameId": {"type": "integer", "description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."},
              "parentFrameId": {"type": "integer", "description": "包含发送请求框架的框架（即父框架）标识符，如果不存在父框架则为 -1。"},
//@              "tabId": {"type": "integer", "description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."},
              "tabId": {"type": "integer", "description": "产生请求的标签页标识符。如果请求与标签页无关则为 -1。"},
//@              "type": {"type": "string", "enum": ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"], "description": "How the requested resource will be used."},
              "type": {"type": "string", "enum": ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"], "description": "请求的资源将如何使用。"},
//@              "timeStamp": {"type": "number", "description": "The time when this signal is triggered, in milliseconds since the epoch."}
              "timeStamp": {"type": "number", "description": "该信号触发的时间，以 1970 年 1 月 1 日午夜开始所经过的毫秒数表示。"}
            }
          }
        ]
      }
    ]
  }
]
