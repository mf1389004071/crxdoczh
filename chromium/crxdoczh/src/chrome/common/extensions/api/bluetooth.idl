// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.bluetooth</code> API to connect to a Bluetooth
// device.-->
// 使用 <code>chrome.bluetooth</code> API 连接到蓝牙设备。
namespace bluetooth {
  dictionary AdapterState {
    // <!--@The address of the adapter, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 适配器的地址，格式为“XX:XX:XX:XX:XX:XX”。
    DOMString address;

    // <!--@The human-readable name of the adapter.-->
    // 可读的适配器名称。
    DOMString name;

    // <!--@Indicates whether or not the adapter has power.-->
    // 表示适配器有没有电源。
    boolean powered;

    // <!--@Indicates whether or not the adapter is available (i.e. enabled).-->
    // 表示适配器是否可用（即已启用）。
    boolean available;

    // <!--@Indicates whether or not the adapter is currently discovering.-->
    // 表示适配器目前是否正在进行发现操作。
    boolean discovering;
  };

  dictionary Device {
    // <!--@The address of the device, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 设备地址，格式为'XX:XX:XX:XX:XX:XX'。
    DOMString address;

    // <!--@The human-readable name of the device.-->
    // 可读的设备名称。
    DOMString? name;

    // <!--@Indicates whether or not the device is paired with the system.-->
    // 表示设备是否已和系统配对。
    boolean? paired;

    // <!--@Indicates whether the device is currently connected to the system.-->
    // 表示设备当前是否已连接到系统。
    boolean? connected;
  };

  dictionary Profile {
    // <!--@Unique profile identifier, e.g. 00001401-0000-1000-8000-00805F9B23FB-->
    // 唯一的规范标识符，例如 00001401-0000-1000-8000-00805F9B23FB。
    DOMString uuid;

    // <!--@Human-readable name of the Profile, e.g. "Health Device"-->
    // 可读的规范名称，例如“Health Device”。
    DOMString? name;

    // <!--@The RFCOMM channel id, used when the profile is to be exported to remote
    // devices.-->
    // RFCOMM 通道标识符，当规范输出至远程设备时使用。
    long? channel;

    // <!--@The LS2CAP PSM number, used when the profile is to be exported to remote
    // deviecs.-->
    // LS2CAP PSM 编号，当规范输出至远程设备时使用。
    long? psm;

    // <!--@Specifies whether pairing (and encryption) is required to be able to
    // connect.-->
    // 指定连接时是否要求配对（与加密）。
    boolean? requireAuthentication;

    // <!--@Specifies whether user authorization is required to be able to connect.-->
    // 指定连接时是否要求用户认证。
    boolean? requireAuthorization;

    // <!--@Specifies whether this profile will be automatically connected if any
    // other profile of device also exporting this profile connects to the host.-->
    boolean? autoConnect;

    // <!--@Specifies the implemented version of the profile.-->
    // 指定规范的实现版本。
    long? version;

    // <!--@Specifies the profile-specific bit field of features the implementation
    // supports.-->
    // 指定实现支持的规范特定的特性位域。
    long? features;
  };

  dictionary ServiceRecord {
    // <!--@The name of the service.-->
    // 服务名称。
    DOMString name;

    // <!--@The UUID of the service.-->
    // 服务的 UUID。
    DOMString? uuid;
  };

  dictionary Socket {
    // <!--@The remote Bluetooth device associated with this socket.-->
    // 与该套接字关联的远程蓝牙设备。
    Device device;

    // <!--@The remote Bluetooth profile associated with this socket.-->
    // 与该套接字关联的远程蓝牙规范。
    Profile profile;

    // <!--@An identifier for this socket that should be used with the
    // read/write/disconnect methods.-->
    // 该套接字的标识符，在 read/write/disconnect 方法中使用。
    long id;
  };

  dictionary OutOfBandPairingData {
    // <!--@Simple Pairing Hash C.
    // Always 16 octets long.-->
    // 简单配对散列 C（Simple Pairing Hash C），总是为16字节长。
    ArrayBuffer hash;

    // <!--@Simple Pairing Randomizer R.
    // Always 16 octets long.-->
    // 简单配对随机数产生器 R（Simple Pairing Randomizer R），总是为
    // 16 字节长。
    ArrayBuffer randomizer;
  };

  callback AdapterStateCallback = void(AdapterState result);
  callback AddressCallback = void (DOMString result);
  callback BooleanCallback = void (boolean result);
  callback DataCallback = void (optional ArrayBuffer result);
  callback DeviceCallback = void (Device device);
  callback DevicesCallback = void (Device[] result);
  callback NameCallback = void (DOMString result);
  callback OutOfBandPairingDataCallback = void (OutOfBandPairingData data);
  callback ProfilesCallback = void(Profile[] result);
  callback ResultCallback = void ();
  callback ServicesCallback = void(ServiceRecord[] result);
  callback SizeCallback = void (long result);
  callback SocketCallback = void (Socket result);

  // <!--@Options for the getDevices function. If |profile| is not provided, all
  // devices known to the system are returned.-->
  // 在 getDevices 函数中使用的选项。如果没有提供
  // <code>profile</code>，系统已知的所有设备都会返回。
  dictionary GetDevicesOptions {
    // <!--@Only devices providing |profile| will be returned.-->
    // 只返回提供了 <code>profile</code> 的设备。
    Profile? profile;

    // <!--@Called for each matching device.  Note that a service discovery request
    // must be made to each non-matching device before it can be definitively
    // excluded.  This can take some time.-->
    // 为每一个匹配的设备调用。注意必须首先向每一个不匹配的设备发出服务发现请求后才能确定地排除它们，这可能需要一些时间。
    DeviceCallback deviceCallback;
  };

  // <!--@Options for the getProfiles function.-->
  // getProfiles 函数中使用的选项。
  dictionary GetProfilesOptions {
    // <!--@The remote Bluetooth device to retrieve the exported profiles list from.-->
    // 要获取导出的规范列表的远程蓝牙设备。
    Device device;
  };

  // <!--@Options for the getServices function.-->
  // getServices 函数中使用的选项。
  dictionary GetServicesOptions {
    // <!--@The address of the device to inquire about. |deviceAddress| should be
    // in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 要获取信息的设备地址。<code>deviceAddress</code> 的格式为“XX:XX:XX:XX:XX:XX”。
    DOMString deviceAddress;
  };

  // <!--@Options for the connect function.-->
  // connect 函数中使用的选项。
  dictionary ConnectOptions {
    // <!--@The connection is made to |device|.-->
    // 连接到 <code>device</code> 设备。
    Device device;

    // <!--@The connection is made to |profile|.-->
    // 连接到 <code>profile</code> 规范。
    Profile profile;
  };

  // <!--@Options for the disconnect function.-->
  // disconnect 函数中使用的选项。
  dictionary DisconnectOptions {
    // <!--@The socket to disconnect.-->
    // 要断开连接的套接字。
    Socket socket;
  };

  // <!--@Options for the read function.-->
  // read 函数中使用的选项。
  dictionary ReadOptions {
    // <!--@The socket to read from.-->
    // 要读取的套接字。
    Socket socket;
  };

  // <!--@Options for the write function.-->
  // write 函数中使用的选项。
  dictionary WriteOptions {
    // <!--@The socket to write to.-->
    // 要写入的套接字。
    Socket socket;

    // <!--@The data to write.-->
    // 要写入的数据。
    ArrayBuffer data;
  };

  // <!--@Options for the setOutOfBandPairingData function.-->
  // setOutOfBandPairingData 函数中使用的选项。
  dictionary SetOutOfBandPairingDataOptions {
    // <!--@The address of the remote device that the data should be associated
    // with. |deviceAddress| should be in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 要关联数据的远程设备地址。<code>deviceAddress</code>
    // 的格式为“XX:XX:XX:XX:XX:XX”。
    DOMString address;

    // <!--@The Out Of Band Pairing Data. If this is omitted, the data for the
    // device is cleared instead.-->
    // 基带外配对（Out of Band Pairing）数据。如果省略，将清除该设备的数据。
    OutOfBandPairingData? data;
  };

  // <!--@Options for the startDiscovery function.-->
  // startDiscovery 函数中使用的选项。
  dictionary StartDiscoveryOptions {
    // <!--@Called for each device that is discovered.-->
    // 每发现一个设备后调用。
    DeviceCallback deviceCallback;
  };

  // These functions all report failures via chrome.runtime.lastError.
  interface Functions {
    // <!--@Registers the JavaScript application as an implementation for the given
    // Profile; if a channel or PSM is specified, the profile will be exported
    // in the host's SDP and GATT tables and advertised to other devices.-->
    // 将 JavaScript 应用程序注册为指定规范的实现。如果指定了通道或
    // PSM，规范将输出至主机的 SDP 与 GATT 表，并广播到其他设备。
    static void addProfile(Profile profile, ResultCallback callback);

    // <!--@Unregisters the JavaScript application as an implementation for the given
    // Profile; only the uuid field of the Profile object is used.-->
    // 取消注册 JavaScript 应用程序，不作为指定规范的实现。Profile
    // 对象中只使用 uuid 字段。
    static void removeProfile(Profile profile, ResultCallback callback);

    // <!--@Get information about the Bluetooth adapter.-->
    // 获取蓝牙适配器的有关信息。
    // |callback| : <!--@Called with an AdapterState object describing the adapter
    //              state.-->
    // 调用时传递 $ref:AdapterState 对象，描述适配器状态。
    static void getAdapterState(AdapterStateCallback callback);

    // <!--@Get a bluetooth devices known to the system.  Known devices are either
    // currently paired, or have been paired in the past.-->
    // 获取系统已知的蓝牙设备列表。已知设备为目前已配对或者以前配对过的设备。
    // |options|  : <!--@Controls which devices are returned and provides
    //              |deviceCallback|, which is called for each matching device.-->
    // 控制返回哪些设备，并提供 <code>deviceCallback</code>，为每一个匹配的设备调用。
    // |callback| : <!--@Called when the search is completed.
    //              |options.deviceCallback| will not be called after
    //              |callback| has been called.-->
    // 搜索完成后调用。<code>callback</code>调用后就不会调用
    // <code>options.deviceCallback</code> 了。
    static void getDevices(GetDevicesOptions options,
                           ResultCallback callback);

    // <!--@Returns the set of exported profiles for the device specified in options.
    // This function will not initiate a connection to the remote device.-->
    // 返回选项中指定设备导出的规范。该函数不会向远程设备发起连接。
    static void getProfiles(GetProfilesOptions options,
                            ProfilesCallback callback);

    // <!--@Get a list of services provided by a device.-->
    // 获取设备提供的服务列表。
    static void getServices(GetServicesOptions options,
                            ServicesCallback callback);

    // <!--@Connect to a service on a device.-->
    // 连接到设备上的某个服务。
    // |options|  : <!--@The options for the connection.-->
    // 连接选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void connect(ConnectOptions options,
                        ResultCallback callback);

    // <!--@Close a Bluetooth connection.-->
    // 关闭蓝牙连接。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void disconnect(DisconnectOptions options,
                           optional ResultCallback callback);

    // <!--@Read data from a Bluetooth connection.-->
    // 从蓝牙连接读取数据。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called with the data when it is available.-->
    // 可用时调用并传递数据。
    static void read(ReadOptions options,
                     DataCallback callback);

    // <!--@Write data to a Bluetooth connection.-->
    // 向蓝牙连接写入数据。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called with the number of bytes written.-->
    // 调用时传递写入的字节数。
    static void write(WriteOptions options,
                      optional SizeCallback callback);

    // <!--@Get the local Out of Band Pairing data.-->
    // 获取本机的基带外配对（Out of Band Pairing）数据。
    // |callback| : <!--@Called with the data.-->
    // 调用时传递数据。
    static void getLocalOutOfBandPairingData(
        OutOfBandPairingDataCallback callback);

    // <!--@Set the Out of Band Pairing data for a remote device.
    // Any previous Out Of Band Pairing Data for this device is overwritten.-->
    // 为远程设备设置基带外配对（Out of Band Pairing）数据，该设备之前的基带外配对（Out of Band Pairing）数据都会覆盖。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void setOutOfBandPairingData(SetOutOfBandPairingDataOptions options,
                                        optional ResultCallback callback);

    // <!--@Start discovery. Discovered devices will be returned via the
    // |onDeviceDiscovered| callback.  Discovery will fail to start if it is
    // already in progress.  Discovery can be resource intensive: stopDiscovery
    // should be called as soon as possible.-->
    // 开始发现，发现的设备会通过 <code>onDeviceDiscovered</code>
    // 回调函数返回。如果已经在进行中，将无法开始发现。发现操作会消耗很多资源，可能的话应该尽快调用
    // $ref:stopDiscovery。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void startDiscovery(
        StartDiscoveryOptions options,
        optional ResultCallback callback);

    // <!--@Stop discovery.-->
    // 停止发现。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void stopDiscovery(
        optional ResultCallback callback);
  };

  interface Events {
    // <!--@Fired when the state of the Bluetooth adapter changes.-->
    // 当蓝牙适配器的状态更改时产生。
    // |state| : <!--@The new state of the adapter.-->
    // 适配器的新状态。
    static void onAdapterStateChanged(AdapterState state);

    // Fired when a connection has been made for a registered profile.
    // |socket| : The socket for the connection.
    static void onConnection(Socket socket);
  };
};
