// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.bluetooth</code> API to connect to a Bluetooth
// device. All functions report failures via chrome.runtime.lastError.-->
// 使用 <code>chrome.bluetooth</code> API 连接到蓝牙设备。所有函数都通过
// chrome.runtime.lastError 报告错误。
namespace bluetooth {
  // <!--@Allocation authorities for Vendor IDs.-->
  // 厂商标识符的分配机构。
  enum VendorIdSource {bluetooth, usb};

  // <!--@Common device types recognized by Chrome.-->
  // Chrome 浏览器能识别的常见设备类型。
  enum DeviceType {computer, phone, modem, audio, carAudio, video, peripheral,
                   joystick, gamepad, keyboard, mouse, tablet,
                   keyboardMouseCombo};

  dictionary AdapterState {
    // <!--@The address of the adapter, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 适配器的地址，格式为“XX:XX:XX:XX:XX:XX”。
    DOMString address;

    // <!--@The human-readable name of the adapter.-->
    // 可读的适配器名称。
    DOMString name;

    // <!--@Indicates whether or not the adapter has power.-->
    // 表示适配器有没有电源。
    boolean powered;

    // <!--@Indicates whether or not the adapter is available (i.e. enabled).-->
    // 表示适配器是否可用（即已启用）。
    boolean available;

    // <!--@Indicates whether or not the adapter is currently discovering.-->
    // 表示适配器目前是否正在进行发现操作。
    boolean discovering;
  };

  dictionary Device {
    // <!--@The address of the device, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 设备地址，格式为'XX:XX:XX:XX:XX:XX'。
    DOMString address;

    // <!--@The human-readable name of the device.-->
    // 可读的设备名称。
    DOMString? name;

    // <!--@The class of the device, a bit-field defined by
    // http://www.bluetooth.org/en-us/specification/assigned-numbers/baseband.-->
    // 设备类型，以位域表示，参见
    // <a href="https://www.bluetooth.org/zh-cn/specification/assigned-numbers/baseband">https://www.bluetooth.org/zh-cn/specification/assigned-numbers/baseband</a>。
    long? deviceClass;

    // <!--@The Device ID record of the device, where available.-->
    // 设备的设备标识符记录（如果可用）。
    VendorIdSource? vendorIdSource;
    long? vendorId;
    long? productId;
    long? deviceId;

    // The type of the device, if recognized by Chrome. This is obtained from
    // the |deviceClass| field and only represents a small fraction of the
    // possible device types. When in doubt you should use the |deviceClass|
    // field directly.
    DeviceType? type;

    // <!--@Indicates whether or not the device is paired with the system.-->
    // 表示设备是否已和系统配对。
    boolean? paired;

    // <!--@Indicates whether the device is currently connected to the system.-->
    // 表示设备当前是否已连接到系统。
    boolean? connected;
  };

  dictionary Profile {
    // <!--@Unique profile identifier, e.g. 00001401-0000-1000-8000-00805F9B23FB-->
    // 唯一的配置文件标识符，例如 00001401-0000-1000-8000-00805F9B23FB。
    DOMString uuid;

    // <!--@Human-readable name of the Profile, e.g. "Health Device"-->
    // 可读的配置文件名称，例如“Health Device”（保健设备）。
    DOMString? name;

    // <!--@The RFCOMM channel id, used when the profile is to be exported to remote
    // devices.-->
    // RFCOMM 通道标识符，当配置文件输出至远程设备时使用。
    long? channel;

    // <!--@The LS2CAP PSM number, used when the profile is to be exported to remote
    // deviecs.-->
    // LS2CAP PSM 编号，当配置文件输出至远程设备时使用。
    long? psm;

    // <!--@Specifies whether pairing (and encryption) is required to be able to
    // connect.-->
    // 指定连接时是否要求配对（与加密）。
    boolean? requireAuthentication;

    // <!--@Specifies whether user authorization is required to be able to connect.-->
    // 指定连接时是否要求用户认证。
    boolean? requireAuthorization;

    // <!--@Specifies whether this profile will be automatically connected if any
    // other profile of device also exporting this profile connects to the host.-->
    // 指定导出该配置文件的其他设备连接到主机时，该配置文件是否会自动连接。
    boolean? autoConnect;

    // <!--@Specifies the implemented version of the profile.-->
    // 指定配置文件的实现版本。
    long? version;

    // <!--@Specifies the profile-specific bit field of features the implementation
    // supports.-->
    // 指定实现支持的配置文件特定的特性位域。
    long? features;
  };

  dictionary ServiceRecord {
    // <!--@The name of the service.-->
    // 服务名称。
    DOMString name;

    // <!--@The UUID of the service.-->
    // 服务的 UUID。
    DOMString? uuid;
  };

  dictionary Socket {
    // <!--@The remote Bluetooth device associated with this socket.-->
    // 与该套接字关联的远程蓝牙设备。
    Device device;

    // <!--@The remote Bluetooth profile associated with this socket.-->
    // 与该套接字关联的远程蓝牙配置文件。
    Profile profile;

    // <!--@An identifier for this socket that should be used with the
    // read/write/disconnect methods.-->
    // 该套接字的标识符，在 read/write/disconnect 方法中使用。
    long id;
  };

  dictionary OutOfBandPairingData {
    // <!--@Simple Pairing Hash C.
    // Always 16 octets long.-->
    // 简单配对散列 C（Simple Pairing Hash C），总是为16字节长。
    ArrayBuffer hash;

    // <!--@Simple Pairing Randomizer R.
    // Always 16 octets long.-->
    // 简单配对随机数产生器 R（Simple Pairing Randomizer R），总是为
    // 16 字节长。
    ArrayBuffer randomizer;
  };

  callback AdapterStateCallback = void(AdapterState result);
  callback AddressCallback = void (DOMString result);
  callback BooleanCallback = void (boolean result);
  callback DataCallback = void (optional ArrayBuffer result);
  callback DevicesCallback = void (Device[] result);
  callback NameCallback = void (DOMString result);
  callback OutOfBandPairingDataCallback = void (OutOfBandPairingData data);
  callback ProfilesCallback = void(Profile[] result);
  callback ResultCallback = void ();
  callback ServicesCallback = void(ServiceRecord[] result);
  callback SizeCallback = void (long result);
  callback SocketCallback = void (Socket result);

  // <!--@Options for the getProfiles function.-->
  // getProfiles 函数中使用的选项。
  dictionary GetProfilesOptions {
    // <!--@The remote Bluetooth device to retrieve the exported profiles list from.-->
    // 要获取导出的配置文件列表的远程蓝牙设备。
    Device device;
  };

  // <!--@Options for the getServices function.-->
  // getServices 函数中使用的选项。
  dictionary GetServicesOptions {
    // <!--@The address of the device to inquire about. |deviceAddress| should be
    // in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 要获取信息的设备地址。<code>deviceAddress</code> 的格式为“XX:XX:XX:XX:XX:XX”。
    DOMString deviceAddress;
  };

  // <!--@Options for the connect function.-->
  // connect 函数中使用的选项。
  dictionary ConnectOptions {
    // <!--@The connection is made to |device|.-->
    // 连接到 <code>device</code> 设备。
    Device device;

    // <!--@The connection is made to |profile|.-->
    // 连接到 <code>profile</code> 配置文件。
    Profile profile;
  };

  // <!--@Options for the disconnect function.-->
  // disconnect 函数中使用的选项。
  dictionary DisconnectOptions {
    // <!--@The socket to disconnect.-->
    // 要断开连接的套接字。
    Socket socket;
  };

  // <!--@Options for the read function.-->
  // read 函数中使用的选项。
  dictionary ReadOptions {
    // <!--@The socket to read from.-->
    // 要读取的套接字。
    Socket socket;
  };

  // <!--@Options for the write function.-->
  // write 函数中使用的选项。
  dictionary WriteOptions {
    // <!--@The socket to write to.-->
    // 要写入的套接字。
    Socket socket;

    // <!--@The data to write.-->
    // 要写入的数据。
    ArrayBuffer data;
  };

  // <!--@Options for the setOutOfBandPairingData function.-->
  // setOutOfBandPairingData 函数中使用的选项。
  dictionary SetOutOfBandPairingDataOptions {
    // <!--@The address of the remote device that the data should be associated
    // with. |deviceAddress| should be in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 要关联数据的远程设备地址。<code>deviceAddress</code>
    // 的格式为“XX:XX:XX:XX:XX:XX”。
    DOMString address;

    // <!--@The Out Of Band Pairing Data. If this is omitted, the data for the
    // device is cleared instead.-->
    // 基带外配对（Out of Band Pairing）数据。如果省略，将清除该设备的数据。
    OutOfBandPairingData? data;
  };

  // These functions all report failures via chrome.runtime.lastError.
  interface Functions {
    // <!--@Registers the JavaScript application as an implementation for the given
    // Profile; if a channel or PSM is specified, the profile will be exported
    // in the host's SDP and GATT tables and advertised to other devices.-->
    // 将 JavaScript 应用程序注册为指定配置文件的实现。如果指定了通道或
    // PSM，配置文件将输出至主机的 SDP 与 GATT 表，并广播到其他设备。
    static void addProfile(Profile profile, ResultCallback callback);

    // <!--@Unregisters the JavaScript application as an implementation for the given
    // Profile; only the uuid field of the Profile object is used.-->
    // 取消注册 JavaScript 应用程序，不作为指定配置文件的实现。Profile
    // 对象中只使用 uuid 字段。
    static void removeProfile(Profile profile, ResultCallback callback);

    // <!--@Get information about the Bluetooth adapter.-->
    // 获取蓝牙适配器的有关信息。
    // |callback| : <!--@Called with an AdapterState object describing the adapter
    //              state.-->
    // 调用时传递 $ref:AdapterState 对象，描述适配器状态。
    static void getAdapterState(AdapterStateCallback callback);

    // <!--@Get a list of Bluetooth devices known to the system, including paired
    // and recently discovered devices.-->
    // 获取系统已知的蓝牙设备列表，包括已配对或以前发现的设备。
    // |callback| : <!--@Called when the search is completed.-->
    // 搜索完成后调用。
    static void getDevices(DevicesCallback callback);

    // <!--@Returns the set of exported profiles for the device specified in options.
    // This function will not initiate a connection to the remote device.-->
    // 返回选项中指定设备导出的配置文件。该函数不会向远程设备发起连接。
    static void getProfiles(GetProfilesOptions options,
                            ProfilesCallback callback);

    // <!--@Get a list of services provided by a device.-->
    // 获取设备提供的服务列表。
    static void getServices(GetServicesOptions options,
                            ServicesCallback callback);

    // <!--@Connect to a service on a device.-->
    // 连接到设备上的某个服务。
    // |options|  : <!--@The options for the connection.-->
    // 连接选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void connect(ConnectOptions options,
                        ResultCallback callback);

    // <!--@Close a Bluetooth connection.-->
    // 关闭蓝牙连接。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void disconnect(DisconnectOptions options,
                           optional ResultCallback callback);

    // <!--@Read data from a Bluetooth connection. The |callback| will be called
    // with the current data in the buffer even if it is empty. This function
    // should be polled to read incoming data.-->
    // 从蓝牙连接读取数据。调用 <code>callback</code>
    // 时会传递缓冲区中的当前数据，即使缓冲区为空也是如此。您应该以查询方式使用该函数读取数据。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called with the data read from the socket buffer.-->
    // 调用时传递套接字缓冲区中读取的数据。
    static void read(ReadOptions options,
                     DataCallback callback);

    // <!--@Write data to a Bluetooth connection.-->
    // 向蓝牙连接写入数据。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called with the number of bytes written.-->
    // 调用时传递写入的字节数。
    static void write(WriteOptions options,
                      optional SizeCallback callback);

    // <!--@Get the local Out of Band Pairing data.-->
    // 获取本机的基带外配对（Out of Band Pairing）数据。
    // |callback| : <!--@Called with the data.-->
    // 调用时传递数据。
    static void getLocalOutOfBandPairingData(
        OutOfBandPairingDataCallback callback);

    // <!--@Set the Out of Band Pairing data for a remote device.
    // Any previous Out Of Band Pairing Data for this device is overwritten.-->
    // 为远程设备设置基带外配对（Out of Band Pairing）数据，该设备之前的基带外配对（Out of Band Pairing）数据都会覆盖。
    // |options|  : <!--@The options for this function.-->
    // 该函数的选项。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void setOutOfBandPairingData(SetOutOfBandPairingDataOptions options,
                                        optional ResultCallback callback);

    // <!--@Start discovery. Newly discovered devices will be returned via the
    // onDeviceAdded event. Previously discovered devices already known to
    // the adapter must be obtained using getDevices and will only be updated
    // using the |onDeviceChanged| event if information about them changes.
    //
    // Discovery will fail to start if this application has already called
    // startDiscovery.  Discovery can be resource intensive: stopDiscovery
    // should be called as soon as possible.-->
    // 开始发现，新发现的设备通过 onDeviceAdded
    // 事件返回。之前发现并且适配器已知的设备必须通过 getDevices
    // 获取，如果设备的有关信息更改则会产生 onDeviceChanged 事件。
    //
    // 如果应用已经调用了 startDiscovery
    // 则发现操作会失败。发现操作需要消耗很多资源：您应该尽快调用
    // stopDiscovery。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void startDiscovery(
        optional ResultCallback callback);

    // <!--@Stop discovery.-->
    // 停止发现。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void stopDiscovery(
        optional ResultCallback callback);
  };

  interface Events {
    // <!--@Fired when the state of the Bluetooth adapter changes.-->
    // 当蓝牙适配器的状态更改时产生。
    // |state| : <!--@The new state of the adapter.-->
    // 适配器的新状态。
    static void onAdapterStateChanged(AdapterState state);

    // <!--@Fired when information about a new Bluetooth device is available.-->
    // 新的蓝牙设备有关信息可用时产生。
    static void onDeviceAdded(Device device);

    // <!--@Fired when information about a known Bluetooth device has changed.-->
    // 已知蓝牙设备的有关信息更改时产生。
    static void onDeviceChanged(Device device);

    // <!--@Fired when a Bluetooth device that was previously discovered has been
    // out of range for long enough to be considered unavailable again, and
    // when a paired device is removed.-->
    // 之前发现的蓝牙设备很长时间不在范围内，视为不再可用时，或者配对的设备移除时产生。
    static void onDeviceRemoved(Device device);

    // <!--@Fired when a connection has been made for a registered profile.-->
    // 注册的配置文件建立连接时产生。
    // |socket| : <!--@The socket for the connection.-->
    // 该连接的套接字。
    static void onConnection(Socket socket);
  };
};
