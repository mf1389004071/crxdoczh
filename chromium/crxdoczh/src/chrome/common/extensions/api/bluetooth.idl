// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.bluetooth</code> API to connect to a Bluetooth
// device. All functions report failures via chrome.runtime.lastError.-->
// 使用 <code>chrome.bluetooth</code> API 连接到蓝牙设备。所有函数都通过
// $(ref:runtime.lastError) 报告错误。
namespace bluetooth {
  // <!--@Allocation authorities for Vendor IDs.-->
  // 厂商标识符的分配机构。
  enum VendorIdSource {bluetooth, usb};

  // <!--@Common device types recognized by Chrome.-->
  // Chrome 浏览器能识别的常见设备类型。
  enum DeviceType {computer, phone, modem, audio, carAudio, video, peripheral,
                   joystick, gamepad, keyboard, mouse, tablet,
                   keyboardMouseCombo};

  // <!--@Information about the state of the Bluetooth adapter.-->
  // 蓝牙适配器状态的有关信息。
  dictionary AdapterState {
    // <!--@The address of the adapter, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 适配器的地址，格式为“XX:XX:XX:XX:XX:XX”。
    DOMString address;

    // <!--@The human-readable name of the adapter.-->
    // 可读的适配器名称。
    DOMString name;

    // <!--@Indicates whether or not the adapter has power.-->
    // 表示适配器有没有电源。
    boolean powered;

    // <!--@Indicates whether or not the adapter is available (i.e. enabled).-->
    // 表示适配器是否可用（即已启用）。
    boolean available;

    // <!--@Indicates whether or not the adapter is currently discovering.-->
    // 表示适配器目前是否正在进行发现操作。
    boolean discovering;
  };

  // <!--@Callback from the <code>getAdapterState</code> method.-->
  // <code>getAdapterState</code> 方法的回调函数。
  // |adapterInfo| : <!--@Object containing the adapter information.-->
  // 包含适配器信息的对象。
  callback AdapterStateCallback = void(AdapterState adapterInfo);

  // <!--@Information about the state of a known Bluetooth device.-->
  // 与已知蓝牙设备状态有关的信息。
  dictionary Device {
    // <!--@The address of the device, in the format 'XX:XX:XX:XX:XX:XX'.-->
    // 设备地址，格式为'XX:XX:XX:XX:XX:XX'。
    DOMString address;

    // <!--@The human-readable name of the device.-->
    // 可读的设备名称。
    DOMString? name;

    // <!--@The class of the device, a bit-field defined by
    // http://www.bluetooth.org/en-us/specification/assigned-numbers/baseband.-->
    // 设备类型，以位域表示，参见
    // <a href="https://www.bluetooth.org/zh-cn/specification/assigned-numbers/baseband">https://www.bluetooth.org/zh-cn/specification/assigned-numbers/baseband</a>。
    long? deviceClass;

    // <!--@The Device ID record of the device, where available.-->
    // 设备的设备标识符记录（如果可用）。
    VendorIdSource? vendorIdSource;
    long? vendorId;
    long? productId;
    long? deviceId;

    // <!--@The type of the device, if recognized by Chrome. This is obtained from
    // the |deviceClass| field and only represents a small fraction of the
    // possible device types. When in doubt you should use the |deviceClass|
    // field directly.-->
    // 如果 Chrome 浏览器能够识别的话则为设备类型，通过 <code>deviceClass</code>
    // 字段获取，仅包括可用设备类型中的一小部分。如果有疑问您应该直接使用
    // <code>deviceClass</code> 字段。
    DeviceType? type;

    // <!--@Indicates whether or not the device is paired with the system.-->
    // 表示设备是否已和系统配对。
    boolean? paired;

    // <!--@Indicates whether the device is currently connected to the system.-->
    // 表示设备当前是否已连接到系统。
    boolean? connected;

    // <!--@Indicates the RSSI ("received signal strength indication") of the
    // connection to the device, measured in dBm, to a resolution of 1dBm.
    // If the device is currently connected, then measures the RSSI of the
    // connection signal. Otherwise, measures the RSSI of the last inquiry sent
    // to the device, where available. Absent if unavailable.-->
    // 表示设备连接的 RSSI（接收信号强度指示），以 dBm 为单位，精度为 1
    // dBm。如果设备当前已连接，则会测量连接信号的
    // RSSI，否则如果可用的话测量上一次发送给设备的查询信号的
    // RSSI。如果不可用则不存在该属性。
    long? rssi;

    // <!--@Indicates the host's current transmit power ("Tx power") for the
    // connection to the device, measured in dBm, to a resolution of 1dBm.
    // This value is only available if the device is currently connected.-->
    // 表示设备连接中主机当前的传输功率（Tx 功率），以 dBm 为单位，精度为 1
    // dBm。只有设备当前处于连接状态时该属性值才可用。
    long? currentHostTransmitPower;

    // <!--@Indicates the host's maximum transmit power ("Tx power") for the
    // connection to the device, measured in dBm, to a resolution of 1dBm.
    // This value is only available if the device is currently connected.-->
    // 表示设备连接中主机的最大传输功率（Tx 功率），以 dBm 为单位，精度为 1
    // dBm。只有设备当前处于连接状态时该属性值才可用。
    long? maximumHostTransmitPower;

    // <!--@UUIDs of protocols, profiles and services advertised by the device.
    // For classic Bluetooth devices, this list is obtained from EIR data and
    // SDP tables. For Low Energy devices, this list is obtained from AD and
    // GATT primary services. For dual mode devices this may be obtained from
    // both.-->
    // 设备支持的协议、配置文件和服务的
    // UUID。对于传统蓝牙设备来说，这一列表可以从 EIR 数据和 SDP
    // 表中获取。对于低功耗设备，可以从 AD 和 GATT
    // 主服务获取。对于双模式设备，可以从这两者获取。
    DOMString[]? uuids;
  };

  // <!--@Callback from the <code>getDevice</code> method.-->
  //<code>getDevice</code>  方法的回调函数。
  // |deviceInfo| : <!--@Object containing the device information.-->
  // 包含设备信息的对象。
  callback GetDeviceCallback = void(Device deviceInfo);

  // <!--@Callback from the <code>getDevices</code> method.-->
  // <code>getDevices</code> 方法的回调函数。
  // |deviceInfos| : <!--@Array of object containing device information.-->
  // 包含设备信息的对象数组。
  callback GetDevicesCallback = void(Device[] deviceInfos);

  // Callback from the <code>startDiscovery</code> method.
  // <code>startDiscovery</code> 方法的回调函数。
  callback StartDiscoveryCallback = void();

  // <!--@Callback from the <code>stopDiscovery</code> method.-->
  // <code>stopDiscovery</code> 方法的回调函数。
  callback StopDiscoveryCallback = void();

  // <!--@These functions all report failures via chrome.runtime.lastError.-->
  // 这些函数都通过 chrome.runtime.lastError 报告错误。
  interface Functions {
    // <!--@Get information about the Bluetooth adapter.-->
    // 获取蓝牙适配器的有关信息。
    // |callback| : <!--@Called with an AdapterState object describing the adapter
    //              state.-->
    // 调用时传递 $(ref:AdapterState) 对象，描述适配器状态。
    static void getAdapterState(AdapterStateCallback callback);

    // <!--@Get information about a Bluetooth device known to the system.-->
    // 获取系统已知的蓝牙设备信息。
    // |deviceAddress| : <!--@Address of device to get.-->
    // 要获取的设备的地址。
    // |callback| : <!--@Called with the Device object describing the device.-->
    // 调用时传递 Device 对象描述设备。
    static void getDevice(DOMString deviceAddress, GetDeviceCallback callback);

    // <!--@Get a list of Bluetooth devices known to the system, including paired
    // and recently discovered devices.-->
    // 获取系统已知的蓝牙设备列表，包括已配对或以前发现的设备。
    // |callback| : <!--@Called when the search is completed.-->
    // 搜索完成后调用。
    static void getDevices(GetDevicesCallback callback);

    // <!--@Start discovery. Newly discovered devices will be returned via the
    // onDeviceAdded event. Previously discovered devices already known to
    // the adapter must be obtained using getDevices and will only be updated
    // using the |onDeviceChanged| event if information about them changes.
    //
    // Discovery will fail to start if this application has already called
    // startDiscovery.  Discovery can be resource intensive: stopDiscovery
    // should be called as soon as possible.-->
    // 开始发现，新发现的设备通过 onDeviceAdded
    // 事件返回。之前发现并且适配器已知的设备必须通过 getDevices
    // 获取，如果设备的有关信息更改则会产生 onDeviceChanged 事件。
    //
    // 如果应用已经调用了 startDiscovery
    // 则发现操作会失败。发现操作需要消耗很多资源：您应该尽快调用
    // stopDiscovery。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void startDiscovery(optional StartDiscoveryCallback callback);

    // <!--@Stop discovery.-->
    // 停止发现。
    // |callback| : <!--@Called to indicate success or failure.-->
    // 调用时指示成功或失败。
    static void stopDiscovery(optional StopDiscoveryCallback callback);
  };

  interface Events {
    // <!--@Fired when the state of the Bluetooth adapter changes.-->
    // 当蓝牙适配器的状态更改时产生。
    // |state| : <!--@The new state of the adapter.-->
    // 适配器的新状态。
    static void onAdapterStateChanged(AdapterState state);

    // <!--@Fired when information about a new Bluetooth device is available.-->
    // 新的蓝牙设备有关信息可用时产生。
    static void onDeviceAdded(Device device);

    // <!--@Fired when information about a known Bluetooth device has changed.-->
    // 已知蓝牙设备的有关信息更改时产生。
    static void onDeviceChanged(Device device);

    // <!--@Fired when a Bluetooth device that was previously discovered has been
    // out of range for long enough to be considered unavailable again, and
    // when a paired device is removed.-->
    // 之前发现的蓝牙设备很长时间不在范围内，视为不再可用时，或者配对的设备移除时产生。
    static void onDeviceRemoved(Device device);
  };
};
