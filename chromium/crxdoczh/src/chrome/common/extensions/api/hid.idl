// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.hid</code> API to interact with connected HID devices.
// This API provides access to HID operations from within the context of an app.
// Using this API, apps can function as drivers for hardware devices.-->
// 使用 <code>chrome.hid</code> API 与连接的 HID 设备交互。使用该 API
// 您可以在应用中进行 HID 操作，应用可以作为硬件设备的驱动程序使用。
namespace hid {
  // <!--@HID usage pair. Each enumerated device interface exposes an array of
  // these objects. Values correspond to those defined by the
  // <a href="http://www.usb.org/developers/devclass_docs/HID1_11.pdf>
  // HID device class specification</a>.-->
  // HID 用途。枚举出来的每个设备接口都会提供这种对象的数组，具体的值对应于
  // <a href="http://www.usb.org/developers/devclass_docs/HID1_11.pdf">HID
  // 设备类型规范</a>中定义的内容。
  // |usage_page|: <!--@HID usage page identifier.-->
  // HID 用途类别。
  // |usage|: <!--@Page-defined usage identifier.-->
  // 类别定义的用途标识符。
  dictionary HidUsageAndPage {
    long usage_page;
    long usage;
  };

  // <!--@Returned by <code>getDevices</code> functions to describes a connected HID
  // device. Use <code>connect</code> to connect to any of the returned devices.-->
  // 由 <code>getDevices</code> 函数返回，描述连接的 HID 设备。使用
  // <code>connect</code> 可以连接到返回的任意一个设备。
  // |deviceId|: <!--@Device opaque ID.-->
  // 不透明的设备标识符。
  // |vendorId|: <!--@Vendor ID.-->
  // 制造商标识符。
  // |productId|: <!--@Product ID.-->
  // 产品标识符。
  // |usages|: HID usage pairs exposed by underlying Top-level collections.
  // 下层接口提供的 HID 用途。
  dictionary HidDeviceInfo {
    long deviceId;
    long vendorId;
    long productId;
    HidUsageAndPage[] usages;
  };

  // <!--@Returned by <code>connect</code> to represent a communication session with
  // an HID device. Must be closed with a call to <code>disconnect</code>.-->
  // 由 <code>connect</code> 返回，表示与 HID 设备之间的通信会话，您必须调用
  // <code>disconnect</code> 关闭它。
  dictionary HidConnectInfo {
    long connectionId;
  };

  // <!--@Searching criteria to enumerate devices with.-->
  // 枚举设备时的搜索条件。
  dictionary GetDevicesOptions {
    long vendorId;
    long productId;
  };

  callback GetDevicesCallback = void (HidDeviceInfo[] devices);
  callback ConnectCallback = void (HidConnectInfo connection);
  callback DisconnectCallback = void ();

  // <!--@The callback to be invoked when a <code>receive</code> or
  // <code>receiveFeatureReport</code> call is finished.-->
  // <code>receive</code> 或 <code>receiveFeatureReport</code>
  // 调用完成时执行的回调函数。
  // |data|: <!--@The content of the report.-->
  // 报告内容。
  callback ReceiveCallback = void (ArrayBuffer data);
  callback SendCallback = void();

  interface Functions {
    // <!--@Enumerate all the connected HID devices specified by the vendorId/
    // productId/interfaceId tuple.-->
    // 根据制造商标识符/产品标识符/接口标识符枚举所有已连接的 HID 设备。
    // |options|: <!--@The properties to search for on target devices.-->
    // 在目标设备上搜索的属性。
    // |callback|: <!--@Invoked with the <code>HidDeviceInfo</code> array on success.-->
    // 如果成功，调用时传递 <code>HidDeviceInfo</code> 数组。
    static void getDevices(GetDevicesOptions options,
                           GetDevicesCallback callback);

    // <!--@Open a connection to an HID device for communication.-->
    // 连接到 HID 设备进行通信。
    // |deviceId|: <!--@The ID of the device to open.-->
    // 要打开的设备标识符。
    // |callback|: <!--@Invoked with an <code>HidConnectInfo</code>.-->
    // 调用时传递 <code>HidConnectInfo</code>。
    static void connect(long deviceId,
                        ConnectCallback callback);

    // <!--@Disconnect from a device. Invoking operations on a device after calling
    // this is safe but has no effect.-->
    // 断开设备的连接，调用该函数后继续在设备上进行操作是安全的，只是没有任何效果。
    // |connectionId|: <!--@The connection to close.-->
    // 要关闭的连接。
    // |callback|: <!--@The callback to invoke once the device is closed.-->
    // 设备关闭后调用的回调函数。
    static void disconnect(long connectionId,
                           optional DisconnectCallback callback);

    // <!--@Receive an Input report from an HID device.-->
    // 从 HID 设备接收 Input（输入）报告。
    //
    // <!--@Input reports are returned to the host through the INTERRUPT IN endpoint.-->
    // 输入报告通过 INTERRUPT IN（中断输入）端点返回给主机。
    // |connectionId|: <!--@The connection from which to receive a report.-->
    // 接收报告的连接。
    // |size|: <!--@The size of the Input report to receive.-->
    // 接收输入报告的大小。
    // |callback|: <!--@The callback to invoke with received report.-->
    // 调用回调函数时传递接收的报告。
    static void receive(long connectionId,
                        long size,
                        ReceiveCallback callback);

    // <!--@Send an Output report to an HID device.
    // <code>send</code> will send the data on the first OUT endpoint, if one
    // exists. If one does not exist, the report will be sent through the
    // Control endpoint.-->
    // 向 HID 设备发送 Output（输出）报告。如果存在的话，<code>send</code>
    // 函数在第一个 OUT（输出）端点发送数据；如果不存在，则通过 Control（控制）
    // 端点发送报告。
    //
    // |connectionId|: <!--@The connection to which to send a report.-->
    // 发送报告的连接。
    // |reportId|: <!--@The report ID to use, or <code>0</code> if none.-->
    // 使用的报告标识符，如果没有则为 <code>0</code>。
    // |data|: <!--@The report data.-->
    // 报告数据。
    // |callback|: <!--@The callback to invoke once the write is finished.-->
    // 写入完成后调用的回调函数。
    static void send(long connectionId,
                     long reportId,
                     ArrayBuffer data,
                     SendCallback callback);

    // <!--@Receive a Feature report from the device.-->
    // 从设备接收 Feature（特性）报告。
    //
    // |connectionId|: <!--@The connection to read Input report from.-->
    // 要读取特性报告的设备。
    // |reportId|: <!--@The report ID, or zero if none.-->
    // 使用的报告标识符，如果没有则为零。
    // |size|: <!--@The size of the Feature report to receive.-->
    // 要接收的特性报告大小。
    // |callback|: <!--@The callback to invoke once the write is finished.-->
    // 操作完成后调用的回调函数。
    static void receiveFeatureReport(long connectionId,
                                     long reportId,
                                     long size,
                                     ReceiveCallback callback);

    // <!--@Send a Feature report to the device.-->
    // 向设备发送 Feature（特性）报告。
    //
    // <!--@Feature reports are sent over the Control endpoint as a Set_Report
    // transfer.-->
    // 特性报告以 Set_Report 传输的形式通过 Control（控制）端点发送。
    // |connectionId|: <!--@The connection to read Input report from.-->
    // 发送特性报告的连接。
    // |reportId|: <!--@The report ID to use, or <code>0</code> if none.-->
    // 使用的报告标识符，如果没有则为 <code>0</code>。
    // |data|: <!--@The report data.-->
    // 报告数据。
    // |callback|: <!--@The callback to invoke once the write is finished.-->
    // 写入完成后调用的回调函数。
    static void sendFeatureReport(long connectionId,
                                  long reportId,
                                  ArrayBuffer data,
                                  SendCallback callback);
  };
};
