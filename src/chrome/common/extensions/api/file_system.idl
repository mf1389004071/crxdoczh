// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.fileSystem</code> API to create, read, navigate,
// and write to a sandboxed section of the user's local file system. With this
// API, packaged apps can read and write to a user-selected location. For
// example, a text editor app can use the API to read and write local documents.-->
// 使用 <code>chrome.fileSystem</code> API
// 创建、读取、浏览与写入用户本地文件系统中经过沙盒屏蔽的一个区域。使用该
// API，打包应用可以读取和写入用户选定的位置，例如文本编辑应用可以使用该
// API 读取和写入本地文档。
namespace fileSystem {
  dictionary AcceptOption {
    // <!--@This is the optional text description for this option. If not present,
    // a description will be automatically generated; typically containing an
    // expanded list of valid extensions (e.g. "text/html" may expand to
    // "*.html, *.htm").-->
    // 这是该选项的可选文字描述。如果不存在的话，将会自动生成描述，通常包含扩充之后的有效扩展名列表（例如
    // "text/html" 将扩充为 "*.html, *.htm"）。
    DOMString? description;

    // <!--@Mime-types to accept, e.g. "image/jpeg" or "audio/*". One of mimeTypes or
    // extensions must contain at least one valid element.-->
    // 可接受的 MIME 类型，例如 "image/jpeg" 或 "audio/*"。mimeTypes
    // 或 extensions 其中之一必须包含至少一个有效元素。
    DOMString[]? mimeTypes;

    // <!--@Extensions to accept, e.g. "jpg", "gif", "crx".-->
    // 可接受的扩展名，例如 ["jpg", "gif", "crx"]。
    DOMString[]? extensions;
  };

  enum ChooseEntryType {

    // <!--@Prompts the user to open an existing file and returns a read-only
    // FileEntry on success.-->
    // 提示用户打开现有文件，并在成功后返回只读的 FileEntry（文件项）。
    openFile,

    // <!--@Prompts the user to open an existing file and returns a writable
    // FileEntry on success. Calls using this type will fail unless the
    // application has the 'write' permission under 'fileSystem'.-->
    // 提示用户打开现有文件，并在成功后返回可写的
    // FileEntry（文件项）。除非应用拥有 'fileSystem' 下的 'write'
    // 权限，否则使用这种类型的调用将会失败。
    openWritableFile,

    // <!--@Prompts the user to open an existing file or a new file and returns a
    // writable FileEntry on success. Calls using this type will fail unless the
    // application has the 'write' permission under 'fileSystem'.-->
    // 提示用户打开现有文件或新文件，并在成功后返回可写的
    // FileEntry（文件项）。除非应用拥有 'fileSystem' 下的 'write'
    // 权限，否则使用这种类型的调用将会失败。
    saveFile
  };

  dictionary ChooseEntryOptions {
    // <!--@Type of the prompt to show. The default is 'openFile'.-->
    // 显示的提示类型，默认为 'openFile'（打开文件）。
    ChooseEntryType? type;

    // <!--@The suggested file name that will be presented to the user as the
    // default name to read or write. This is optional.-->
    // 展现给用户的推荐文件名，作为要读取或写入的默认文件名，该参数可选。
    DOMString? suggestedName;

    // <!--@The optional list of accept options for this file opener. Each option
    // will be presented as a unique group to the end-user.-->
    // 该文件打开器可选接受选项的列表，对最终用户来说，每一个选项都会呈现为唯一的分组。
    AcceptOption[]? accepts;

    // <!--@Whether to accept all file types, in addition to the options specified
    // in the accepts argument. The default is true. If the accepts field is
    // unset or contains no valid entries, this will always be reset to true.-->
    // 除了 accepts 字段中指定的选项外，是否接受所有文件类型，默认为
    // true。如果 accepts 字段未设置或没有包含有效的项，它始终会被重置为
    // true 。
    boolean? acceptsAllTypes;
  };
  callback GetDisplayPathCallback = void (DOMString displayPath);
  callback FileEntryCallback = void ([instanceOf=FileEntry] object fileEntry);
  callback IsWritableCallback = void (boolean isWritable);
  callback IsRestorableCallback = void (boolean isRestorable);

  interface Functions {
    // <!--@Get the display path of a FileEntry object. The display path is based on
    // the full path of the file on the local file system, but may be made more
    // readable for display purposes.-->
    // 获取 <code>FileEntry</code>
    // 对象的显示路径。显示路径基于文件在本地文件系统上的完整路径，但是可能会为了显示的目的而使可读性更好。
    static void getDisplayPath([instanceOf=FileEntry] object fileEntry,
                               GetDisplayPathCallback callback);

    // <!--@Get a writable FileEntry from another FileEntry. This call will fail if
    // the application does not have the 'write' permission under 'fileSystem'.-->
    // 从另一个 <code>FileEntry</code> 获取可写的文件项。如果应用程序没有
    // 'fileSystem' 下的 'write' 权限则该方法会失败。
    static void getWritableEntry([instanceOf=FileEntry] object fileEntry,
                                 FileEntryCallback callback);

    // <!--@Gets whether this FileEntry is writable or not.-->
    // 获取该 <code>FileEntry</code> 是否可以写入的信息。
    static void isWritableEntry([instanceOf=FileEntry] object fileEntry,
                                IsWritableCallback callback);

    // <!--@Ask the user to choose a file.-->
    // 让用户选择文件。
    static void chooseEntry(optional ChooseEntryOptions options,
                            FileEntryCallback callback);

    // <!--@Returns the file entry with the given id if it can be restored. This call
    // will fail otherwise.-->
    // 如果可以恢复则恢复指定标识符的文件项，否则该调用会失败。
    static void restoreEntry(DOMString id, FileEntryCallback callback);

    // <!--@Returns whether a file entry for the given id can be restored, i.e.
    // whether restoreEntry would succeed with this id now.-->
    // 返回指定标识符的文件项能否恢复，即使用该标识符调用 restoreEntry
    // 是否会成功。
    static void isRestorable(DOMString id, IsRestorableCallback callback);

    // <!--@Returns an id that can be passed to restoreEntry to regain access to a
    // given file entry. Only the 500 most recently used entries are retained,
    // where calls to retainEntry and restoreEntry count as use. If the app has
    // the 'retainEntries' permission under 'fileSystem', entries are retained
    // indefinitely. Otherwise, entries are retained only while the app is
    // running and across restarts.-->
    // 返回一个标识符，可以传递给 restoreEntry
    // 而重新获得指定文件项的访问。只能保留最近使用的 500
    // 个项目，调用 retainEntry 和 restoreEntry 都算作使用。如果应用拥有
    // 'fileSystem' 之下的 'retainEntries'
    // 权限，项目将永久保留。否则，只有应用运行时或重新启动后才会保留。
    static DOMString retainEntry([instanceOf=FileEntry] object fileEntry);
  };
};
