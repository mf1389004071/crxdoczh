// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// <!--@Use the <code>chrome.socket</code> API to send and receive data over the
// network using TCP and UDP connections.-->
// 使用 <code>chrome.socket</code> API 使用 TCP 和 UDP
// 连接通过网络发送和接收数据。
namespace socket {
  enum SocketType {
    tcp,
    udp
  };

  // <!--@The socket options.-->
  // 套接字选项。
  dictionary CreateOptions {
  };

  dictionary CreateInfo {
    // <!--@The id of the newly created socket.-->
    // 新创建套接字的标识符。
    long socketId;
  };

  callback CreateCallback = void (CreateInfo createInfo);

  callback ConnectCallback = void (long result);

  callback BindCallback = void (long result);

  callback ListenCallback = void (long result);

  dictionary AcceptInfo {
    long resultCode;
    // <!--@The id of the accepted socket.-->
    // 已接受套接字的标识符。
    long? socketId;
  };

  callback AcceptCallback = void (AcceptInfo acceptInfo);

  dictionary ReadInfo {
    // <!--@The resultCode returned from the underlying read() call.-->
    // read() 调用返回的结果代码。
    long resultCode;

    ArrayBuffer data;
  };

  callback ReadCallback = void (ReadInfo readInfo);

  dictionary WriteInfo {
    // <!--@The number of bytes sent, or a negative error code.-->
    // 发送的字节数，或者为负数，表示错误代码。
    long bytesWritten;
  };

  callback WriteCallback = void (WriteInfo writeInfo);

  dictionary RecvFromInfo {
    // <!--@The resultCode returned from the underlying recvfrom() call.-->
    // recvFrom() 调用返回的结果代码。
    long resultCode;

    ArrayBuffer data;

    // <!--@The address of the remote machine.-->
    // 远程计算机的地址。
    DOMString address;

    long port;
  };

  dictionary SocketInfo {
    // <!--@The type of the passed socket. This will be <code>tcp</code> or
    // <code>udp</code>.-->
    // 传递的套接字类型，为 "tcp" 或 "udp"。
    SocketType socketType;

    // <!--@Whether or not the underlying socket is connected.
    //
    // For <code>tcp</code> sockets, this will remain true even if the remote
    // peer has disconnected. Reading or writing to the socket may then result
    // in an error, hinting that this socket should be disconnected via
    // <code>disconnect()</code>.
    //
    // For <code>udp</code> sockets, this just represents whether a default
    // remote address has been specified for reading and writing packets.-->
    // 指定套接字是否已连接。对于 <code>tcp</code>
    // 套接字，即使远程计算机已经断开连接，该属性仍然为
    // true。读取或写入套接字可能会导致错误，表示该套接字应该通过
    // <code>disconnect()</code> 断开连接。对于 udp
    // 套接字，该属性只是表示读取和写入数据包的默认远程地址是否已经指定。
    boolean connected;

    // <!--@If the underlying socket is connected, contains the IPv4/6 address of
    // the peer.-->
    // 如果套接字已连接，则包含对方的 IPv4/6 地址。
    DOMString? peerAddress;

    // <!--@If the underlying socket is connected, contains the port of the
    // connected peer.-->
    // 如果套接字已连接，则包含对方的端口号。
    long? peerPort;

    // <!--@If the underlying socket is bound or connected, contains its local
    // IPv4/6 address.-->
    // 如果套接字已绑定或连接，则包含本机 IPv4/6 地址。
    DOMString? localAddress;

    // <!--@If the underlying socket is bound or connected, contains its local port.-->
    // 如果套接字已绑定或连接，则包含本机端口。
    long? localPort;
  };

  dictionary NetworkInterface {
    // <!--@The underlying name of the adapter. On *nix, this will typically be
    // "eth0", "lo", etc.-->
    // 适配器的名称，在 *nix 上通常为"eth0"、"lo" 等等。
    DOMString name;

    // <!--@The available IPv4/6 address.-->
    // 可用的 IPv4/6 地址。
    DOMString address;
  };

  callback RecvFromCallback = void (RecvFromInfo recvFromInfo);

  callback SendToCallback = void (WriteInfo writeInfo);

  callback SetKeepAliveCallback = void (boolean result);

  callback SetNoDelayCallback = void (boolean result);

  callback GetInfoCallback = void (SocketInfo result);

  callback GetNetworkCallback = void (NetworkInterface[] result);

  callback JoinGroupCallback = void (long result);

  callback LeaveGroupCallback = void (long result);

  callback SetMulticastTimeToLiveCallback = void (long result);

  callback SetMulticastLoopbackModeCallback = void (long result);

  callback GetJoinedGroupsCallback = void (DOMString[] groups);

  interface Functions {
    // <!--@Creates a socket of the specified type that will connect to the specified
    // remote machine.-->
    // 创建指定类型的套接字，以便用来连接到远程计算机。
    // |type| : <!--@The type of socket to create. Must be <code>tcp</code> or
    // <code>udp</code>.-->
    // 要创建的套接字类型，必须为 <code>"tcp"</code> 或 <code>"udp"</code>。
    // |options| : <!--@The socket options.-->
    // 套接字选项。
    // |callback| : <!--@Called when the socket has been created.-->
    // 套接字创建后调用。
    static void create(SocketType type,
                       optional CreateOptions options,
                       CreateCallback callback);

    // <!--@Destroys the socket. Each socket created should be destroyed after use.-->
    // 释放套接字，创建的套接字使用完后应该释放。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    static void destroy(long socketId);

    // <!--@Connects the socket to the remote machine (for a <code>tcp</code>
    // socket). For a <code>udp</code> socket, this sets the default address
    // which packets are sent to and read from for <code>read()</code>
    // and <code>write()</code> calls.-->
    // 将套接字连接至远程计算机（用于 <code>tcp</code> 套接字）。对于
    // <code>udp</code> 套接字，该函数设置 <code>read()</code> 与
    // <code>write()</code> 调用时数据包发送至的默认地址。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |hostname| : <!--@The hostname or IP address of the remote machine.-->
    // 远程计算机的主机名或 IP 地址。
    // |port| : <!--@The port of the remote machine.-->
    // 远程计算机的端口。
    // |callback| : <!--@Called when the connection attempt is complete.-->
    // 连接尝试完成后调用。
    static void connect(long socketId,
                        DOMString hostname,
                        long port,
                        ConnectCallback callback);

    // <!--@Binds the local address for socket. Currently, it does not support
    // TCP socket.-->
    // 为套接字绑定本机地址。当前还不支持 TCP 套接字。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |address| : <!--@The address of the local machine.-->
    // 本机地址。
    // |port| : <!--@The port of the local machine.-->
    // 本机端口
    // |callback| : <!--@Called when the bind attempt is complete.-->
    // 绑定尝试完成后调用。
    static void bind(long socketId,
                     DOMString address,
                     long port,
                     BindCallback callback);

    // <!--@Disconnects the socket. For UDP sockets, <code>disconnect</code> is a
    // non-operation but is safe to call.-->
    // 断开套接字的连接。对于 UDP
    // 套接字来说，断开连接并不会执行任何操作，但是可以安全地调用。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    static void disconnect(long socketId);

    // <!--@Reads data from the given connected socket.-->
    // 从指定的已连接套接字读取数据。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |bufferSize| : <!--@The read buffer size.-->
    // 读取缓冲区大小。
    // |callback| : <!--@Delivers data that was available to be read without
    // blocking.-->
    // 以非阻塞的方式传递可以读取的数据
    static void read(long socketId,
                     optional long bufferSize,
                     ReadCallback callback);

    // <!--@Writes data on the given connected socket.-->
    // 向已连接的指定套接字写入数据。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |data| : <!--@The data to write.-->
    // 要写入的数据。
    // |callback| : <!--@Called when the write operation completes without blocking
    // or an error occurs.-->
    // 以非阻塞的方式在写入操作完成或发生错误时调用。
    static void write(long socketId,
                      ArrayBuffer data,
                      WriteCallback callback);

    // <!--@Receives data from the given UDP socket.-->
    // 从指定 UDP 套接字接收数据。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |bufferSize| : <!--@The receive buffer size.-->
    // 接收缓冲区大小。
    // |callback| : <!--@Returns result of the recvFrom operation.-->
    // 返回接收操作的结果。
    static void recvFrom(long socketId,
                         optional long bufferSize,
                         RecvFromCallback callback);

    // <!--@Sends data on the given UDP socket to the given address and port.-->
    // 在指定 UDP 套接字上向指定地址与端口发送数据。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |data| : <!--@The data to write.-->
    // 要写入的数据。
    // |address| : <!--@The address of the remote machine.-->
    // 远程计算机的地址。
    // |port| : <!--@The port of the remote machine.-->
    // 远程计算机的端口。
    // |callback| : <!--@Called when the send operation completes without blocking
    // or an error occurs.-->
    // 以非阻塞的方式在发送操作完成或产生错误时调用。
    static void sendTo(long socketId,
                       ArrayBuffer data,
                       DOMString address,
                       long port,
                       SendToCallback callback);

    // <!--@This method applies to TCP sockets only.
    // Listens for connections on the specified port and address. This
    // effectively makes this a server socket, and client socket
    // functions (connect, read, write) can no longer be used on this socket.-->
    // 该方法仅适用于 TCP
    // 套接字，监听指定端口与地址上的连接，这样的结果是使该套接字成为服务器套接字，客户端套接字函数（connect、read、write）就不能再在该套接字上使用。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |address| : <!--@The address of the local machine.-->
    // 本地计算机的地址。
    // |port| : <!--@The port of the local machine.-->
    // 本地计算机的端口。
    // |backlog| : <!--@Length of the socket's listen queue.-->
    // 套接字监听队列的长度。
    // |callback| : <!--@Called when listen operation completes.-->
    // 监听操作完成时调用。
    static void listen(long socketId,
                       DOMString address,
                       long port,
                       optional long backlog,
                       ListenCallback callback);

    // <!--@This method applies to TCP sockets only.
    // Registers a callback function to be called when a connection is
    // accepted on this listening server socket. Listen must be called first.
    // If there is already an active accept callback, this callback will be
    // invoked immediately with an error as the resultCode.-->
    // 该方法仅适用于 TCP
    // 套接字，注册一个回调函数，当正在监听的服务器套接字接受连接时调用。必须首先调用
    // listen。如果已经有活动的接受回调函数，该回调函数将立即执行，resultCode
    // 包含错误。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |callback| : <!--@The callback is invoked when a new socket is accepted.-->
    // 新的套接字接受时调用该回调函数。
    static void accept(long socketId,
                       AcceptCallback callback);

    // <!--@Enables or disables the keep-alive functionality for a TCP connection.-->
    // 启用或禁用 TCP 连接保持活动状态的功能。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |enable| : <!--@If true, enable keep-alive functionality.-->
    // 如果为 true 的话，启用保持活动状态的功能。
    // |delay| : <!--@Set the delay seconds between the last data packet received
    // and the first keepalive probe. Default is 0.-->
    // 设置最后一次数据包接收与第一次活动状态检测之间的时间延迟，默认为 0。
    // |callback| : <!--@Called when the setKeepAlive attempt is complete.-->
    // 操作完成后调用。
    static void setKeepAlive(long socketId,
                             boolean enable,
                             optional long delay,
                             SetKeepAliveCallback callback);

    // <!--@Sets or clears <code>TCP_NODELAY</code> for a TCP connection. Nagle's
    // algorithm will be disabled when <code>TCP_NODELAY</code> is set.-->
    // 设置或清除 TCP 连接的 <code>TCP_NODELAY</code>标志，当设置
    // <code>TCP_NODELAY</code> 标志时将禁用<a
    // href="https://zh.wikipedia.org/zh/%E7%B4%8D%E6%A0%BC%E7%AE%97%E6%B3%95">纳格算法</a>。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |noDelay| : <!--@If true, disables Nagle's algorithm.-->
    // 如果为 true 的话，禁用纳格算法。
    // |callback| : <!--@Called when the setNoDelay attempt is complete.-->
    // 操作完成后调用。
    static void setNoDelay(long socketId,
                           boolean noDelay,
                           SetNoDelayCallback callback);

    // <!--@Retrieves the state of the given socket.-->
    // 获取指定套接字的状态。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |callback| : <!--@Called when the state is available.-->
    // 状态可用时调用。
    static void getInfo(long socketId,
                        GetInfoCallback callback);

    // <!--@Retrieves information about local adapters on this system.-->
    // 获取当前系统中本地适配器的有关信息。
    // |callback| : <!--@Called when local adapter information is available.-->
    // 本地适配器信息可用时调用。
    static void getNetworkList(GetNetworkCallback callback);

    // <!--@Join the multicast group and start to receive packets from that group.
    // The socket must be of UDP type and must be bound to a local port
    // before calling this method.-->
    // 加入多播组，并开始接收数据包。调用该方法之前，套接字的类型必须是
    // UDP，并且已经绑定至本机端口。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |address| : <!--@The group address to join. Domain names are not supported.-->
    // 要加入的多播组地址，不支持域名。
    // |callback| : <!--@Called when the join group operation is done with an
    // integer parameter indicating the platform-independent error code.-->
    // 加入多播组的操作完成后调用，并传递一个整型参数，表示平台无关的错误代码。
    static void joinGroup(long socketId,
                          DOMString address,
                          JoinGroupCallback callback);

    // <!--@Leave the multicast group previously joined using <code>joinGroup</code>.
    // It's not necessary to leave the multicast group before destroying the
    // socket or exiting. This is automatically called by the OS.-->
    // 离开之前使用 <code>joinGroup</code>
    // 加入的多播组。释放套接字或退出前不用离开多播组，这会由操作系统自动调用。
    //
    // <!--@Leaving the group will prevent the router from sending multicast
    // datagrams to the local host, presuming no other process on the host is
    // still joined to the group.-->
    // 离开多播组后，如果没有其他进程仍然加入多播组，路由器不会继续向本机发送多播数据包。
    //
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |address| : <!--@The group address to leave. Domain names are not supported.-->
    // 要离开的多播组地址，不支持域名。
    // |callback| : <!--@Called when the leave group operation is done with an
    // integer parameter indicating the platform-independent error code.-->
    // 离开多播组的操作完成后调用，并传递一个整型参数，表示平台无关的错误代码。
    static void leaveGroup(long socketId, DOMString address,
                           LeaveGroupCallback callback);

    // <!--@Set the time-to-live of multicast packets sent to the multicast group.-->
    // 设置发送至多播组的多播数据包的 TTL 值。
    //
    // <!--@Calling this method does not require multicast permissions.-->
    // 调用该方法不需要多播权限。
    //
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |ttl| : <!--@The time-to-live value.-->
    // TTL 值。
    // |callback| : <!--@Called when the configuration operation is done.-->
    // 配置操作完成后调用。
    static void setMulticastTimeToLive(
        long socketId,
        long ttl,
        SetMulticastTimeToLiveCallback callback);

    // <!--@Set whether multicast packets sent from the host to the multicast
    // group will be looped back to the host.-->
    // 设置主机向多播组发送的多播包是否要回环至主机。
    //
    // <!--@Note: the behavior of <code>setMulticastLoopbackMode</code> is slightly
    // different between Windows and Unix-like systems. The inconsistency
    // happens only when there is more than one application on the same host
    // joined to the same multicast group while having different settings on
    // multicast loopback mode. On Windows, the applications with loopback off
    // will not RECEIVE the loopback packets; while on Unix-like systems, the
    // applications with loopback off will not SEND the loopback packets to
    // other applications on the same host. See MSDN: http://goo.gl/6vqbj-->
    // 注意：<code>setMulticastLookbackMode</code> 在 Windows 与类 Unix
    // 系统上的行为不同。只有当同一主机上不止一个应用程序加入了同一个多播组，并且多播回环模式的设置不同时才会出现这一不一致性。在
    // Windows 中，关闭回环的应用程序不会<b>接受</b>到回环包；而在类 Unix
    // 系统中，关闭回环的应用程序不会向同一主机上的其他应用程序<b
    // >发送</b>回环包。请参见 MSDN：<a href="http://goo.gl/6vqbj"
    // >http://goo.gl/6vqbj</a>。
    //
    // <!--@Calling this method does not require multicast permissions.-->
    // 调用该方法不需要多播权限。
    //
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |enabled| : <!--@Indicate whether to enable loopback mode.-->
    // 表示是否启用回环模式。
    // |callback| : <!--@Called when the configuration operation is done.-->
    // 配置操作完成后调用。
    static void setMulticastLoopbackMode(
        long socketId,
        boolean enabled,
        SetMulticastLoopbackModeCallback callback);

    // <!--@Get the multicast group addresses the socket is currently joined to.-->
    // 获取套接字当前加入的多播组地址。
    // |socketId| : <!--@The socketId.-->
    // 套接字标识符。
    // |callback| : <!--@Called with an array of strings of the result.-->
    // 调用时传递字符串数据，表示结果。
    static void getJoinedGroups(long socketId,
                                GetJoinedGroupsCallback callback);
  };

};
